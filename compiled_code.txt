//MY CODE
//START OF app\api\auth\debug\route.ts
import { NextResponse } from "next/server"
import bcrypt from "bcryptjs"
import { MOCK_USERS } from "@/lib/auth"

export async function GET(request: Request) {
  // Get the email from the query string
  const { searchParams } = new URL(request.url)
  const email = searchParams.get("email")
  const password = searchParams.get("password") || "P@sswOrd123" // Default to test password

  if (!email) {
    return NextResponse.json(
      {
        success: false,
        error: "Email parameter is required",
      },
      { status: 400 },
    )
  }

  try {
    // Find user by email
    const user = MOCK_USERS.find((u) => u.email.toLowerCase() === email.toLowerCase())

    if (!user) {
      return NextResponse.json(
        {
          success: false,
          error: "User not found",
        },
        { status: 404 },
      )
    }

    // Generate a new hash for the provided password
    const newHash = await bcrypt.hash(password, 12)

    // Test verification against stored hash
    const isValidAgainstStored = await bcrypt.compare(password, user.password)

    // Test verification against new hash
    const isValidAgainstNew = await bcrypt.compare(password, newHash)

    return NextResponse.json({
      success: true,
      user: {
        id: user.id,
        email: user.email,
        role: user.role,
        name: user.name,
        isActive: user.isActive,
      },
      passwordInfo: {
        storedHash: user.password,
        newGeneratedHash: newHash,
        providedPassword: password,
        isValidAgainstStored,
        isValidAgainstNew,
      },
      message: "Debug information retrieved successfully",
    })
  } catch (error) {
    console.error("Debug API error:", error)
    return NextResponse.json(
      {
        success: false,
        error: "An error occurred while retrieving debug information",
      },
      { status: 500 },
    )
  }
}

//END OF app\api\auth\debug\route.ts

//START OF app\api\auth\login\route.ts
import { type NextRequest, NextResponse } from "next/server"
import { authenticateUser, createSession, type LoginCredentials } from "@/lib/auth"

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { email, password, userType } = body as LoginCredentials

    // Debug logging
    console.log("üìù Login attempt:", {
      email,
      userType,
      passwordLength: password?.length || 0,
    })

    // Validate input
    if (!email || !password || !userType) {
      return NextResponse.json(
        {
          success: false,
          error: "Email, password, and user type are required.",
        },
        { status: 400 },
      )
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      return NextResponse.json(
        {
          success: false,
          error: "Please enter a valid email address.",
        },
        { status: 400 },
      )
    }

    // For debugging purposes, log if this is a test user
    const testUsers = [
      "parent.test@example.com",
      "emma.johnson@example.com",
      "ta.test@example.com",
      "instructor.test@example.com",
    ]

    if (testUsers.includes(email.toLowerCase())) {
      console.log(`üß™ Test user login attempt detected: ${email} (${userType})`)

      // If this is a test user, we can debug the password hash
      if (password === "P@sswOrd123") {
        console.log("‚úÖ Test user credentials match expected values")
      } else {
        console.log("‚ùå Test user credentials do not match expected values")
        console.log(
          `   Expected: "P@sswOrd123", Received: "${password.substring(0, 3)}${"*".repeat(password.length - 3)}"`,
        )
      }
    }

    // Validate password strength
    if (password.length < 8) {
      return NextResponse.json(
        {
          success: false,
          error: "Password must be at least 8 characters long.",
        },
        { status: 400 },
      )
    }

    // Authenticate user
    const authResult = await authenticateUser({ email, password, userType })

    if (!authResult.success) {
      return NextResponse.json(
        {
          success: false,
          error: authResult.error,
        },
        { status: 401 },
      )
    }

    // Create session
    if (authResult.user) {
      await createSession(authResult.user)
    }

    return NextResponse.json({
      success: true,
      user: authResult.user,
      redirectUrl: authResult.redirectUrl,
    })
  } catch (error) {
    console.error("Login API error:", error)
    return NextResponse.json(
      {
        success: false,
        error: "An unexpected error occurred. Please try again later.",
      },
      { status: 500 },
    )
  }
}

//END OF app\api\auth\login\route.ts

//START OF app\api\auth\logout\route.ts
import { NextResponse } from "next/server"
import { destroySession } from "@/lib/auth"

export async function POST() {
  try {
    await destroySession()

    return NextResponse.json({
      success: true,
      message: "Logged out successfully",
    })
  } catch (error) {
    console.error("Logout API error:", error)
    return NextResponse.json(
      {
        success: false,
        error: "An error occurred during logout.",
      },
      { status: 500 },
    )
  }
}

//END OF app\api\auth\logout\route.ts

//START OF app\api\auth\session\route.ts
import { NextResponse } from "next/server"
import { getSession } from "@/lib/auth"

export async function GET() {
  try {
    const user = await getSession()

    if (!user) {
      return NextResponse.json(
        {
          success: false,
          error: "No active session",
        },
        { status: 401 },
      )
    }

    return NextResponse.json({
      success: true,
      user,
    })
  } catch (error) {
    console.error("Session API error:", error)
    return NextResponse.json(
      {
        success: false,
        error: "Session validation failed",
      },
      { status: 500 },
    )
  }
}

//END OF app\api\auth\session\route.ts

//START OF app\client-layout-wrapper.tsx
"use client"

import type React from "react"
import { Header } from "@/components/header"
import { Footer } from "@/components/footer"
import { usePathname } from "next/navigation"

export function ClientLayoutWrapper({ children }: { children: React.ReactNode }) {
  const pathname = usePathname()

  // Check if current path is a portal page
  const isPortalPage =
    pathname?.startsWith("/student") ||
    pathname?.startsWith("/parent") ||
    pathname?.startsWith("/ta") ||
    pathname?.startsWith("/instructor")

  return (
    <div className="min-h-screen flex flex-col">
      {!isPortalPage && <Header />}
      <main className={isPortalPage ? "flex-1" : "flex-1"}>{children}</main>
      {!isPortalPage && <Footer />}
    </div>
  )
}

//END OF app\client-layout-wrapper.tsx

//START OF app\forgot-password\page.tsx
"use client"

import type React from "react"
import { useState } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { ArrowLeft, Mail, CheckCircle, Shield, Clock, HelpCircle } from "lucide-react"
import { motion, AnimatePresence } from "framer-motion"
import { FloatingElements } from "@/components/floating-elements"

export default function ForgotPasswordPage() {
  const [email, setEmail] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [isSubmitted, setIsSubmitted] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)

    // Simulate password reset request
    setTimeout(() => {
      setIsLoading(false)
      setIsSubmitted(true)
    }, 1000)
  }

  if (isSubmitted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-teal-50 to-cyan-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 pt-28 relative overflow-hidden">
        <FloatingElements />

        <motion.div
          className="max-w-md w-full relative z-10"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.6 }}
        >
          <Card className="shadow-2xl border-0 bg-white/90 backdrop-blur-sm">
            <CardHeader className="text-center">
              <motion.div
                className="mx-auto w-16 h-16 bg-gradient-to-br from-emerald-500 to-teal-500 rounded-2xl flex items-center justify-center mb-4 shadow-xl"
                initial={{ scale: 0, rotate: -180 }}
                animate={{ scale: 1, rotate: 0 }}
                transition={{ duration: 0.6, type: "spring" }}
              >
                <CheckCircle className="h-8 w-8 text-white" />
              </motion.div>
              <CardTitle className="font-poppins">Check Your Email</CardTitle>
              <CardDescription>We've sent password reset instructions to your email address</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <motion.div
                className="text-center"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.2 }}
              >
                <p className="text-sm text-gray-600 mb-4">We've sent a password reset link to:</p>
                <motion.div
                  className="font-medium text-gray-900 bg-gradient-to-r from-emerald-50 to-teal-50 p-4 rounded-xl border border-emerald-200"
                  whileHover={{ scale: 1.02 }}
                >
                  {email}
                </motion.div>
              </motion.div>

              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.4 }}
              >
                <Alert className="border-emerald-200 bg-emerald-50">
                  <Mail className="h-4 w-4 text-emerald-600" />
                  <AlertDescription className="text-emerald-800">
                    If you don't see the email in your inbox, please check your spam folder. The reset link will expire
                    in 24 hours.
                  </AlertDescription>
                </Alert>
              </motion.div>

              <motion.div
                className="space-y-3"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.6 }}
              >
                <Link href="/login" className="block">
                  <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                    <Button className="w-full bg-gradient-to-r from-emerald-600 to-teal-600 hover:from-emerald-700 hover:to-teal-700">
                      Back to Login
                    </Button>
                  </motion.div>
                </Link>
                <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                  <Button
                    variant="outline"
                    className="w-full border-emerald-300 hover:bg-emerald-50"
                    onClick={() => {
                      setIsSubmitted(false)
                      setEmail("")
                    }}
                  >
                    Try Different Email
                  </Button>
                </motion.div>
              </motion.div>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-teal-50 to-cyan-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 pt-28 relative overflow-hidden">
      <FloatingElements />

      <motion.div
        className="max-w-md w-full space-y-8 relative z-10"
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        {/* Header */}
        <motion.div
          className="text-center"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
        >
          <motion.div
            className="mx-auto w-16 h-16 bg-gradient-to-br from-emerald-500 to-teal-500 rounded-2xl flex items-center justify-center mb-6 shadow-xl"
            whileHover={{ scale: 1.05, rotate: 5 }}
            transition={{ type: "spring", stiffness: 400, damping: 10 }}
          >
            <Shield className="h-8 w-8 text-white" />
          </motion.div>
          <h2 className="text-3xl font-poppins font-bold text-gray-900">Reset Your Password</h2>
          <p className="mt-2 text-gray-600">
            Enter your email address and we'll send you a link to reset your password
          </p>
        </motion.div>

        {/* Reset Form */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.4 }}
        >
          <Card className="shadow-2xl border-0 bg-white/90 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="font-poppins">Password Reset</CardTitle>
              <CardDescription>We'll send reset instructions to your registered email address</CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit} className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="email">Email Address</Label>
                  <motion.div whileFocus={{ scale: 1.02 }} transition={{ type: "spring", stiffness: 300, damping: 10 }}>
                    <Input
                      id="email"
                      type="email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      placeholder="Enter your registered email"
                      className="h-12"
                      required
                    />
                  </motion.div>
                  <p className="text-xs text-gray-500">Enter the email address associated with your account</p>
                </div>

                <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                  <Button
                    type="submit"
                    className="w-full h-12 bg-gradient-to-r from-emerald-600 to-teal-600 hover:from-emerald-700 hover:to-teal-700 shadow-lg"
                    disabled={isLoading}
                  >
                    <AnimatePresence mode="wait">
                      {isLoading ? (
                        <motion.div
                          key="loading"
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          exit={{ opacity: 0 }}
                          className="flex items-center"
                        >
                          <motion.div
                            className="w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2"
                            animate={{ rotate: 360 }}
                            transition={{ duration: 1, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
                          />
                          Sending...
                        </motion.div>
                      ) : (
                        <motion.span
                          key="send"
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          exit={{ opacity: 0 }}
                          className="flex items-center"
                        >
                          <Mail className="w-4 h-4 mr-2" />
                          Send Reset Link
                        </motion.span>
                      )}
                    </AnimatePresence>
                  </Button>
                </motion.div>
              </form>

              <motion.div
                className="mt-6"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.6, delay: 0.6 }}
              >
                <Link
                  href="/login"
                  className="flex items-center justify-center text-sm text-emerald-600 hover:text-emerald-500 transition-colors group"
                >
                  <motion.div whileHover={{ x: -5 }} transition={{ type: "spring", stiffness: 400, damping: 10 }}>
                    <ArrowLeft className="h-4 w-4 mr-2" />
                  </motion.div>
                  Back to Login
                </Link>
              </motion.div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Help Information */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.8 }}
        >
          <Card className="bg-blue-50/80 border-blue-200 backdrop-blur-sm">
            <CardContent className="pt-6">
              <div className="flex items-start space-x-3">
                <motion.div
                  whileHover={{ scale: 1.1, rotate: 5 }}
                  transition={{ type: "spring", stiffness: 400, damping: 10 }}
                >
                  <HelpCircle className="h-6 w-6 text-blue-600 mt-0.5" />
                </motion.div>
                <div>
                  <h3 className="font-medium text-blue-900 mb-2">Need Help?</h3>
                  <p className="text-sm text-blue-800 mb-3">
                    If you're having trouble resetting your password or don't receive the email:
                  </p>
                  <ul className="text-sm text-blue-800 space-y-1">
                    {[
                      "Check your spam or junk folder",
                      "Make sure you entered the correct email address",
                      "Wait a few minutes for the email to arrive",
                      "Contact our support team if issues persist",
                    ].map((item, index) => (
                      <motion.li
                        key={index}
                        className="flex items-center space-x-2"
                        initial={{ opacity: 0, x: -10 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.3, delay: index * 0.1 + 1 }}
                      >
                        <Clock className="h-3 w-3 text-blue-600" />
                        <span>{item}</span>
                      </motion.li>
                    ))}
                  </ul>
                  <div className="mt-4">
                    <Link
                      href="/contact"
                      className="text-sm text-blue-600 hover:text-blue-500 underline transition-colors"
                    >
                      Contact Support
                    </Link>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </motion.div>
    </div>
  )
}

//END OF app\forgot-password\page.tsx

//START OF app\globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;

    /* Gossamer Color Palette */
    --color-gossamer-50: #ecfdf7;
    --color-gossamer-100: #d2f9ea;
    --color-gossamer-200: #a9f1d8;
    --color-gossamer-300: #71e4c4;
    --color-gossamer-400: #38cfaa;
    --color-gossamer-500: #14b592;
    --color-gossamer-600: #09957a;
    --color-gossamer-700: #077563;
    --color-gossamer-800: #085d4f;
    --color-gossamer-900: #084c42;
    --color-gossamer-950: #032b26;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Custom font classes */
.font-poppins {
  font-family: var(--font-poppins);
}

.font-inter {
  font-family: var(--font-inter);
}

/* Smooth scrolling */
html {
  scroll-behavior: smooth;
}

/* Accessibility - Respect reduced motion preference */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: #f1f1f1;
}

::-webkit-scrollbar-thumb {
  background: linear-gradient(to bottom, var(--color-gossamer-600), var(--color-gossamer-700));
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(to bottom, var(--color-gossamer-700), var(--color-gossamer-800));
}

/* Focus styles for better accessibility */
.focus-visible:focus-visible {
  outline: 2px solid var(--color-gossamer-600);
  outline-offset: 2px;
}

/* Glass morphism effect */
.glass {
  background: rgba(255, 255, 255, 0.25);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.18);
}

/* Gradient backgrounds */
.gradient-gossamer {
  background: linear-gradient(135deg, var(--color-gossamer-600) 0%, var(--color-gossamer-700) 100%);
}

//END OF app\globals.css

//START OF app\instructor\analytics\engagement\page.tsx
"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { TrendingUp, Users, BookOpen, MessageSquare, Clock, Download, Eye, CheckCircle } from "lucide-react"
import { motion } from "framer-motion"

// Mock analytics data
const engagementStats = {
  totalStudents: 156,
  activeStudents: 142,
  avgSessionTime: "45m",
  completionRate: 78,
  forumPosts: 234,
  videoViews: 1847,
}

const courseEngagement = [
  {
    id: "course-001",
    title: "ICT Fundamentals",
    students: 45,
    completionRate: 78,
    avgTimeSpent: "3.2h",
    forumActivity: 89,
    lastAccessed: "2024-03-12",
    trend: "up",
  },
  {
    id: "course-002",
    title: "Advanced Mathematics",
    students: 32,
    completionRate: 65,
    avgTimeSpent: "4.1h",
    forumActivity: 67,
    lastAccessed: "2024-03-12",
    trend: "down",
  },
  {
    id: "course-003",
    title: "Web Development Basics",
    students: 28,
    completionRate: 82,
    avgTimeSpent: "2.8h",
    forumActivity: 45,
    lastAccessed: "2024-03-11",
    trend: "up",
  },
  {
    id: "course-004",
    title: "Statistics and Probability",
    students: 25,
    completionRate: 71,
    avgTimeSpent: "3.5h",
    forumActivity: 33,
    lastAccessed: "2024-03-10",
    trend: "stable",
  },
]

const studentActivity = [
  {
    id: "student-001",
    name: "Emma Johnson",
    course: "ICT Fundamentals",
    lastActive: "2 hours ago",
    completionRate: 85,
    timeSpent: "12.5h",
    forumPosts: 15,
    status: "active",
  },
  {
    id: "student-002",
    name: "Michael Chen",
    course: "Advanced Mathematics",
    lastActive: "1 day ago",
    completionRate: 92,
    timeSpent: "18.2h",
    forumPosts: 8,
    status: "active",
  },
  {
    id: "student-003",
    name: "Sarah Williams",
    course: "Web Development",
    lastActive: "3 hours ago",
    completionRate: 67,
    timeSpent: "8.7h",
    forumPosts: 22,
    status: "active",
  },
  {
    id: "student-004",
    name: "David Brown",
    course: "Statistics",
    lastActive: "1 week ago",
    completionRate: 34,
    timeSpent: "4.2h",
    forumPosts: 2,
    status: "inactive",
  },
]

export default function EngagementAnalyticsPage() {
  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case "up":
        return <TrendingUp className="h-4 w-4 text-green-600" />
      case "down":
        return <TrendingUp className="h-4 w-4 text-red-600 rotate-180" />
      default:
        return <div className="h-4 w-4 bg-gray-400 rounded-full" />
    }
  }

  const getStatusBadge = (status: string) => {
    return status === "active" ? (
      <Badge className="bg-green-100 text-green-800">
        <CheckCircle className="w-3 h-3 mr-1" />
        Active
      </Badge>
    ) : (
      <Badge className="bg-red-100 text-red-800">
        <Clock className="w-3 h-3 mr-1" />
        Inactive
      </Badge>
    )
  }

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-3xl font-bold font-poppins text-gray-900">Student Engagement Report</h1>
          <p className="text-gray-600 mt-2">Monitor student activity, completion rates, and forum engagement</p>
        </div>
        <div className="mt-4 sm:mt-0 flex space-x-3">
          <Select defaultValue="7days">
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Select period" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="7days">Last 7 days</SelectItem>
              <SelectItem value="30days">Last 30 days</SelectItem>
              <SelectItem value="90days">Last 90 days</SelectItem>
              <SelectItem value="1year">Last year</SelectItem>
            </SelectContent>
          </Select>
          <Button variant="outline">
            <Download className="h-4 w-4 mr-2" />
            Export Report
          </Button>
        </div>
      </div>

      {/* Engagement Stats */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.1 }}
        >
          <Card className="bg-gradient-to-br from-blue-600 to-indigo-600 text-white border-0">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-blue-100 text-sm font-medium">Active Students</p>
                  <p className="text-3xl font-bold">{engagementStats.activeStudents}</p>
                  <p className="text-blue-100 text-sm">
                    of {engagementStats.totalStudents} total (
                    {Math.round((engagementStats.activeStudents / engagementStats.totalStudents) * 100)}%)
                  </p>
                </div>
                <Users className="h-12 w-12 text-blue-200" />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <Card className="bg-gradient-to-br from-green-600 to-emerald-600 text-white border-0">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-green-100 text-sm font-medium">Avg. Completion Rate</p>
                  <p className="text-3xl font-bold">{engagementStats.completionRate}%</p>
                  <p className="text-green-100 text-sm">+5% from last month</p>
                </div>
                <CheckCircle className="h-12 w-12 text-green-200" />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.3 }}
        >
          <Card className="bg-gradient-to-br from-purple-600 to-pink-600 text-white border-0">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-purple-100 text-sm font-medium">Avg. Session Time</p>
                  <p className="text-3xl font-bold">{engagementStats.avgSessionTime}</p>
                  <p className="text-purple-100 text-sm">+8 min from last week</p>
                </div>
                <Clock className="h-12 w-12 text-purple-200" />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.4 }}
        >
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Forum Posts</p>
                  <p className="text-2xl font-bold text-gray-900">{engagementStats.forumPosts}</p>
                  <p className="text-sm text-gray-500">This month</p>
                </div>
                <MessageSquare className="h-8 w-8 text-orange-600" />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.5 }}
        >
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Video Views</p>
                  <p className="text-2xl font-bold text-gray-900">{engagementStats.videoViews}</p>
                  <p className="text-sm text-gray-500">This month</p>
                </div>
                <Eye className="h-8 w-8 text-blue-600" />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.6 }}
        >
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Active Courses</p>
                  <p className="text-2xl font-bold text-gray-900">{courseEngagement.length}</p>
                  <p className="text-sm text-gray-500">Currently running</p>
                </div>
                <BookOpen className="h-8 w-8 text-green-600" />
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>

      {/* Course Engagement */}
      <Card>
        <CardHeader>
          <CardTitle className="font-poppins">Course Engagement Overview</CardTitle>
          <CardDescription>Detailed engagement metrics for each course</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Course</TableHead>
                  <TableHead>Students</TableHead>
                  <TableHead>Completion Rate</TableHead>
                  <TableHead>Avg. Time Spent</TableHead>
                  <TableHead>Forum Activity</TableHead>
                  <TableHead>Last Accessed</TableHead>
                  <TableHead>Trend</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {courseEngagement.map((course, index) => (
                  <motion.tr
                    key={course.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: index * 0.1 }}
                    className="hover:bg-gray-50"
                  >
                    <TableCell>
                      <div className="font-medium text-gray-900">{course.title}</div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center">
                        <Users className="h-4 w-4 mr-1 text-gray-400" />
                        {course.students}
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center space-x-2">
                        <div className="w-16 bg-gray-200 rounded-full h-2">
                          <div
                            className="bg-green-600 h-2 rounded-full"
                            style={{ width: `${course.completionRate}%` }}
                          ></div>
                        </div>
                        <span className="text-sm text-gray-600">{course.completionRate}%</span>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center">
                        <Clock className="h-4 w-4 mr-1 text-gray-400" />
                        {course.avgTimeSpent}
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center">
                        <MessageSquare className="h-4 w-4 mr-1 text-gray-400" />
                        {course.forumActivity} posts
                      </div>
                    </TableCell>
                    <TableCell className="text-sm text-gray-500">
                      {new Date(course.lastAccessed).toLocaleDateString()}
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center">{getTrendIcon(course.trend)}</div>
                    </TableCell>
                  </motion.tr>
                ))}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>

      {/* Student Activity */}
      <Card>
        <CardHeader>
          <CardTitle className="font-poppins">Recent Student Activity</CardTitle>
          <CardDescription>Individual student engagement and progress</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Student</TableHead>
                  <TableHead>Course</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Completion</TableHead>
                  <TableHead>Time Spent</TableHead>
                  <TableHead>Forum Posts</TableHead>
                  <TableHead>Last Active</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {studentActivity.map((student, index) => (
                  <motion.tr
                    key={student.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: index * 0.1 }}
                    className="hover:bg-gray-50"
                  >
                    <TableCell>
                      <div className="font-medium text-gray-900">{student.name}</div>
                    </TableCell>
                    <TableCell>
                      <div className="text-sm text-gray-600">{student.course}</div>
                    </TableCell>
                    <TableCell>{getStatusBadge(student.status)}</TableCell>
                    <TableCell>
                      <div className="flex items-center space-x-2">
                        <div className="w-16 bg-gray-200 rounded-full h-2">
                          <div
                            className="bg-blue-600 h-2 rounded-full"
                            style={{ width: `${student.completionRate}%` }}
                          ></div>
                        </div>
                        <span className="text-sm text-gray-600">{student.completionRate}%</span>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center">
                        <Clock className="h-4 w-4 mr-1 text-gray-400" />
                        {student.timeSpent}
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center">
                        <MessageSquare className="h-4 w-4 mr-1 text-gray-400" />
                        {student.forumPosts}
                      </div>
                    </TableCell>
                    <TableCell className="text-sm text-gray-500">{student.lastActive}</TableCell>
                  </motion.tr>
                ))}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

//END OF app\instructor\analytics\engagement\page.tsx

//START OF app\instructor\financial\loading.tsx
export default function Loading() {
  return null
}

//END OF app\instructor\financial\loading.tsx

//START OF app\instructor\financial\page.tsx
"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import {
  DollarSign,
  TrendingUp,
  CreditCard,
  AlertCircle,
  CheckCircle,
  Clock,
  Download,
  Search,
  MoreHorizontal,
  Eye,
  Send,
  FileText,
} from "lucide-react"
import { motion } from "framer-motion"

// Mock financial data
const financialStats = {
  totalRevenue: 45750,
  monthlyRevenue: 12450,
  pendingPayments: 3200,
  overduePayments: 850,
  totalStudents: 156,
  paidStudents: 142,
}

const transactions = [
  {
    id: "txn-001",
    studentName: "Emma Johnson",
    amount: 450,
    status: "completed",
    date: "2024-03-12",
    method: "Credit Card",
    course: "ICT Fundamentals",
    invoiceId: "INV-2024-001",
  },
  {
    id: "txn-002",
    studentName: "Michael Chen",
    amount: 380,
    status: "completed",
    date: "2024-03-11",
    method: "Bank Transfer",
    course: "Advanced Mathematics",
    invoiceId: "INV-2024-002",
  },
  {
    id: "txn-003",
    studentName: "Sarah Williams",
    amount: 450,
    status: "pending",
    date: "2024-03-10",
    method: "Credit Card",
    course: "ICT Fundamentals",
    invoiceId: "INV-2024-003",
  },
  {
    id: "txn-004",
    studentName: "David Brown",
    amount: 380,
    status: "overdue",
    date: "2024-02-28",
    method: "Bank Transfer",
    course: "Statistics",
    invoiceId: "INV-2024-004",
  },
  {
    id: "txn-005",
    studentName: "Lisa Wilson",
    amount: 450,
    status: "completed",
    date: "2024-03-09",
    method: "Credit Card",
    course: "Web Development",
    invoiceId: "INV-2024-005",
  },
]

export default function FinancialPage() {
  const [searchTerm, setSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState("all")
  const [dateFilter, setDateFilter] = useState("all")

  const filteredTransactions = transactions.filter((transaction) => {
    const matchesSearch =
      transaction.studentName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      transaction.course.toLowerCase().includes(searchTerm.toLowerCase()) ||
      transaction.invoiceId.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesStatus = statusFilter === "all" || transaction.status === statusFilter

    return matchesSearch && matchesStatus
  })

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "completed":
        return (
          <Badge className="bg-green-100 text-green-800">
            <CheckCircle className="w-3 h-3 mr-1" />
            Completed
          </Badge>
        )
      case "pending":
        return (
          <Badge className="bg-yellow-100 text-yellow-800">
            <Clock className="w-3 h-3 mr-1" />
            Pending
          </Badge>
        )
      case "overdue":
        return (
          <Badge className="bg-red-100 text-red-800">
            <AlertCircle className="w-3 h-3 mr-1" />
            Overdue
          </Badge>
        )
      default:
        return <Badge variant="secondary">{status}</Badge>
    }
  }

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-3xl font-bold font-poppins text-gray-900">Financial Management</h1>
          <p className="text-gray-600 mt-2">Monitor payments, invoices, and revenue</p>
        </div>
        <div className="mt-4 sm:mt-0 flex space-x-3">
          <Button variant="outline">
            <Download className="h-4 w-4 mr-2" />
            Export Report
          </Button>
          <Button className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700">
            <FileText className="h-4 w-4 mr-2" />
            Generate Invoice
          </Button>
        </div>
      </div>

      {/* Financial Stats */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.1 }}
        >
          <Card className="bg-gradient-to-br from-green-600 to-emerald-600 text-white border-0">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-green-100 text-sm font-medium">Total Revenue</p>
                  <p className="text-3xl font-bold">${financialStats.totalRevenue.toLocaleString()}</p>
                  <p className="text-green-100 text-sm">All time</p>
                </div>
                <DollarSign className="h-12 w-12 text-green-200" />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <Card className="bg-gradient-to-br from-blue-600 to-indigo-600 text-white border-0">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-blue-100 text-sm font-medium">Monthly Revenue</p>
                  <p className="text-3xl font-bold">${financialStats.monthlyRevenue.toLocaleString()}</p>
                  <p className="text-blue-100 text-sm">+15% from last month</p>
                </div>
                <TrendingUp className="h-12 w-12 text-blue-200" />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.3 }}
        >
          <Card className="bg-gradient-to-br from-yellow-600 to-orange-600 text-white border-0">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-yellow-100 text-sm font-medium">Pending Payments</p>
                  <p className="text-3xl font-bold">${financialStats.pendingPayments.toLocaleString()}</p>
                  <p className="text-yellow-100 text-sm">Awaiting payment</p>
                </div>
                <Clock className="h-12 w-12 text-yellow-200" />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.4 }}
        >
          <Card className="bg-gradient-to-br from-red-600 to-pink-600 text-white border-0">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-red-100 text-sm font-medium">Overdue Payments</p>
                  <p className="text-3xl font-bold">${financialStats.overduePayments.toLocaleString()}</p>
                  <p className="text-red-100 text-sm">Requires attention</p>
                </div>
                <AlertCircle className="h-12 w-12 text-red-200" />
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>

      {/* Payment Status Overview */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <Card>
          <CardHeader>
            <CardTitle className="font-poppins">Payment Status Overview</CardTitle>
            <CardDescription>Current payment status breakdown</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex items-center justify-between p-4 bg-green-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <CheckCircle className="h-8 w-8 text-green-600" />
                  <div>
                    <p className="font-semibold text-green-900">Paid Students</p>
                    <p className="text-sm text-green-700">Current payments up to date</p>
                  </div>
                </div>
                <div className="text-right">
                  <p className="text-2xl font-bold text-green-600">{financialStats.paidStudents}</p>
                  <p className="text-sm text-green-600">
                    {Math.round((financialStats.paidStudents / financialStats.totalStudents) * 100)}%
                  </p>
                </div>
              </div>

              <div className="flex items-center justify-between p-4 bg-yellow-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <Clock className="h-8 w-8 text-yellow-600" />
                  <div>
                    <p className="font-semibold text-yellow-900">Pending Payments</p>
                    <p className="text-sm text-yellow-700">Awaiting payment processing</p>
                  </div>
                </div>
                <div className="text-right">
                  <p className="text-2xl font-bold text-yellow-600">8</p>
                  <p className="text-sm text-yellow-600">5%</p>
                </div>
              </div>

              <div className="flex items-center justify-between p-4 bg-red-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <AlertCircle className="h-8 w-8 text-red-600" />
                  <div>
                    <p className="font-semibold text-red-900">Overdue Payments</p>
                    <p className="text-sm text-red-700">Requires immediate attention</p>
                  </div>
                </div>
                <div className="text-right">
                  <p className="text-2xl font-bold text-red-600">6</p>
                  <p className="text-sm text-red-600">4%</p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="font-poppins">Quick Actions</CardTitle>
            <CardDescription>Common financial management tasks</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 gap-4">
              <Button className="justify-start h-auto p-4 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700">
                <FileText className="h-5 w-5 mr-3" />
                <div className="text-left">
                  <p className="font-semibold">Generate Monthly Report</p>
                  <p className="text-sm opacity-90">Create comprehensive financial report</p>
                </div>
              </Button>

              <Button variant="outline" className="justify-start h-auto p-4 border-green-200 hover:bg-green-50">
                <Send className="h-5 w-5 mr-3 text-green-600" />
                <div className="text-left">
                  <p className="font-semibold text-green-900">Send Payment Reminders</p>
                  <p className="text-sm text-green-700">Notify students with pending payments</p>
                </div>
              </Button>

              <Button variant="outline" className="justify-start h-auto p-4 border-purple-200 hover:bg-purple-50">
                <CreditCard className="h-5 w-5 mr-3 text-purple-600" />
                <div className="text-left">
                  <p className="font-semibold text-purple-900">Process Bulk Payments</p>
                  <p className="text-sm text-purple-700">Handle multiple payment processing</p>
                </div>
              </Button>

              <Button variant="outline" className="justify-start h-auto p-4 border-orange-200 hover:bg-orange-50">
                <AlertCircle className="h-5 w-5 mr-3 text-orange-600" />
                <div className="text-left">
                  <p className="font-semibold text-orange-900">Review Overdue Accounts</p>
                  <p className="text-sm text-orange-700">Manage accounts requiring attention</p>
                </div>
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Transaction History */}
      <Card>
        <CardHeader>
          <CardTitle className="font-poppins">Transaction History</CardTitle>
          <CardDescription>Recent payment transactions and invoices</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col sm:flex-row gap-4 mb-6">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <Input
                  placeholder="Search transactions..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-full sm:w-[180px]">
                <SelectValue placeholder="Filter by status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="completed">Completed</SelectItem>
                <SelectItem value="pending">Pending</SelectItem>
                <SelectItem value="overdue">Overdue</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Student</TableHead>
                  <TableHead>Course</TableHead>
                  <TableHead>Amount</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Method</TableHead>
                  <TableHead>Date</TableHead>
                  <TableHead>Invoice</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredTransactions.map((transaction, index) => (
                  <motion.tr
                    key={transaction.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: index * 0.1 }}
                    className="hover:bg-gray-50"
                  >
                    <TableCell>
                      <div className="font-medium text-gray-900">{transaction.studentName}</div>
                    </TableCell>
                    <TableCell>
                      <div className="text-sm text-gray-600">{transaction.course}</div>
                    </TableCell>
                    <TableCell>
                      <div className="font-semibold text-gray-900">${transaction.amount}</div>
                    </TableCell>
                    <TableCell>{getStatusBadge(transaction.status)}</TableCell>
                    <TableCell>
                      <div className="flex items-center text-sm text-gray-600">
                        <CreditCard className="h-4 w-4 mr-1" />
                        {transaction.method}
                      </div>
                    </TableCell>
                    <TableCell className="text-sm text-gray-500">
                      {new Date(transaction.date).toLocaleDateString()}
                    </TableCell>
                    <TableCell>
                      <Badge variant="outline" className="text-xs">
                        {transaction.invoiceId}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right">
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" className="h-8 w-8 p-0">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem>
                            <Eye className="mr-2 h-4 w-4" />
                            View Details
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            <FileText className="mr-2 h-4 w-4" />
                            Download Invoice
                          </DropdownMenuItem>
                          {transaction.status === "pending" && (
                            <DropdownMenuItem>
                              <Send className="mr-2 h-4 w-4" />
                              Send Reminder
                            </DropdownMenuItem>
                          )}
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </motion.tr>
                ))}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

//END OF app\instructor\financial\page.tsx

//START OF app\instructor\layout.tsx
"use client"

import type React from "react"

import { PortalSidebar } from "@/components/portal-sidebar"
import { useRequireAuth } from "@/hooks/use-auth"
import {
  LayoutDashboard,
  BookOpen,
  Users,
  UserCheck,
  Megaphone,
  DollarSign,
  BarChart3,
  Settings,
  Shield,
} from "lucide-react"

const navigation = [
  {
    title: "Overview",
    items: [
      {
        title: "Admin Dashboard",
        href: "/instructor",
        icon: LayoutDashboard,
      },
    ],
  },
  {
    title: "Management",
    items: [
      {
        title: "Course Management",
        href: "/instructor/courses",
        icon: BookOpen,
      },
      {
        title: "User Management",
        href: "/instructor/users",
        icon: Users,
      },
      {
        title: "TA Management",
        href: "/instructor/tas",
        icon: UserCheck,
      },
    ],
  },
  {
    title: "Communication",
    items: [
      {
        title: "Announcement Management",
        href: "/instructor/announcements",
        icon: Megaphone,
      },
    ],
  },
  {
    title: "Business",
    items: [
      {
        title: "Financial Management",
        href: "/instructor/financial",
        icon: DollarSign,
      },
      {
        title: "Analytics & Reporting",
        href: "/instructor/analytics",
        icon: BarChart3,
      },
    ],
  },
  {
    title: "System",
    items: [
      {
        title: "Platform Settings",
        href: "/instructor/settings",
        icon: Settings,
      },
    ],
  },
]

const colorScheme = {
  primary: "from-blue-600",
  secondary: "to-indigo-700",
  accent: "blue-500",
  gradient: "from-blue-600 to-indigo-700",
}

export default function InstructorLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const { user, loading } = useRequireAuth(["instructor"])

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  if (!user) {
    return null
  }

  return (
    <div className="flex h-screen bg-gray-50">
      <PortalSidebar
        title="Instructor Portal"
        subtitle="Admin Dashboard"
        icon={Shield}
        navigation={navigation}
        colorScheme={colorScheme}
      />
      <main className="flex-1 overflow-y-auto lg:ml-0">
        <div className="p-8">{children}</div>
      </main>
    </div>
  )
}

//END OF app\instructor\layout.tsx

//START OF app\instructor\page.tsx
"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import {
  Users,
  BookOpen,
  DollarSign,
  TrendingUp,
  Calendar,
  Plus,
  UserPlus,
  Megaphone,
  Eye,
  Clock,
  CheckCircle,
} from "lucide-react"
import { motion } from "framer-motion"
import Link from "next/link"

// Mock data for the dashboard
const dashboardStats = {
  totalStudents: 156,
  totalCourses: 8,
  monthlyRevenue: 12450,
  engagementRate: 87,
  newStudentsThisMonth: 23,
  activeDiscussions: 34,
}

const recentActivity = [
  {
    id: 1,
    type: "enrollment",
    user: "Emma Johnson",
    action: "enrolled in ICT Fundamentals",
    time: "2 hours ago",
    avatar: "/placeholder.svg?height=32&width=32",
  },
  {
    id: 2,
    type: "completion",
    user: "Michael Chen",
    action: "completed Module 3 - Web Development",
    time: "4 hours ago",
    avatar: "/placeholder.svg?height=32&width=32",
  },
  {
    id: 3,
    type: "question",
    user: "Sarah Williams",
    action: "posted a question in Mathematics Forum",
    time: "6 hours ago",
    avatar: "/placeholder.svg?height=32&width=32",
  },
  {
    id: 4,
    type: "payment",
    user: "David Brown",
    action: "completed payment for Q1 tuition",
    time: "1 day ago",
    avatar: "/placeholder.svg?height=32&width=32",
  },
  {
    id: 5,
    type: "assignment",
    user: "Alex Smith (TA)",
    action: "graded 15 assignments",
    time: "1 day ago",
    avatar: "/placeholder.svg?height=32&width=32",
  },
]

const upcomingSessions = [
  {
    id: 1,
    title: "ICT Q&A Session",
    time: "Today, 3:00 PM",
    participants: 12,
    type: "Q&A",
  },
  {
    id: 2,
    title: "Mathematics Workshop",
    time: "Tomorrow, 10:00 AM",
    participants: 8,
    type: "Workshop",
  },
  {
    id: 3,
    title: "Web Development Lab",
    time: "Friday, 2:00 PM",
    participants: 15,
    type: "Lab",
  },
]

const quickActions = [
  {
    title: "Create Announcement",
    description: "Send updates to students and parents",
    icon: Megaphone,
    href: "/instructor/announcements/create",
    color: "from-blue-600 to-indigo-600",
  },
  {
    title: "Add Student",
    description: "Enroll new students in courses",
    icon: UserPlus,
    href: "/instructor/users/create",
    color: "from-green-600 to-emerald-600",
  },
  {
    title: "Create Course",
    description: "Set up new course content",
    icon: Plus,
    href: "/instructor/courses/create",
    color: "from-purple-600 to-pink-600",
  },
]

export default function InstructorDashboard() {
  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-3xl font-bold font-poppins text-gray-900">Admin Dashboard</h1>
          <p className="text-gray-600 mt-2">Welcome back! Here's what's happening with your platform.</p>
        </div>
        <div className="mt-4 sm:mt-0">
          <Badge variant="secondary" className="bg-green-100 text-green-800">
            <CheckCircle className="w-3 h-3 mr-1" />
            All Systems Operational
          </Badge>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.1 }}
        >
          <Card className="bg-gradient-to-br from-blue-600 to-indigo-600 text-white border-0">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-blue-100 text-sm font-medium">Total Students</p>
                  <p className="text-3xl font-bold">{dashboardStats.totalStudents}</p>
                  <p className="text-blue-100 text-sm">+{dashboardStats.newStudentsThisMonth} this month</p>
                </div>
                <Users className="h-12 w-12 text-blue-200" />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <Card className="bg-gradient-to-br from-green-600 to-emerald-600 text-white border-0">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-green-100 text-sm font-medium">Active Courses</p>
                  <p className="text-3xl font-bold">{dashboardStats.totalCourses}</p>
                  <p className="text-green-100 text-sm">All courses running</p>
                </div>
                <BookOpen className="h-12 w-12 text-green-200" />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.3 }}
        >
          <Card className="bg-gradient-to-br from-purple-600 to-pink-600 text-white border-0">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-purple-100 text-sm font-medium">Monthly Revenue</p>
                  <p className="text-3xl font-bold">${dashboardStats.monthlyRevenue.toLocaleString()}</p>
                  <p className="text-purple-100 text-sm">+12% from last month</p>
                </div>
                <DollarSign className="h-12 w-12 text-purple-200" />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.4 }}
        >
          <Card className="bg-gradient-to-br from-orange-600 to-red-600 text-white border-0">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-orange-100 text-sm font-medium">Engagement Rate</p>
                  <p className="text-3xl font-bold">{dashboardStats.engagementRate}%</p>
                  <p className="text-orange-100 text-sm">+5% from last week</p>
                </div>
                <TrendingUp className="h-12 w-12 text-orange-200" />
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>

      {/* Quick Actions */}
      <Card>
        <CardHeader>
          <CardTitle className="font-poppins">Quick Actions</CardTitle>
          <CardDescription>Frequently used administrative tasks</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {quickActions.map((action, index) => (
              <motion.div
                key={action.title}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.5 + index * 0.1 }}
              >
                <Link href={action.href}>
                  <Card className="cursor-pointer hover:shadow-lg transition-all duration-200 border-2 hover:border-blue-200">
                    <CardContent className="p-6">
                      <div className="flex items-center space-x-4">
                        <div
                          className={`w-12 h-12 rounded-xl bg-gradient-to-br ${action.color} flex items-center justify-center`}
                        >
                          <action.icon className="h-6 w-6 text-white" />
                        </div>
                        <div>
                          <h3 className="font-semibold text-gray-900">{action.title}</h3>
                          <p className="text-sm text-gray-600">{action.description}</p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </Link>
              </motion.div>
            ))}
          </div>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Recent Activity */}
        <Card>
          <CardHeader>
            <CardTitle className="font-poppins">Recent Activity</CardTitle>
            <CardDescription>Latest platform activity and user interactions</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {recentActivity.map((activity, index) => (
                <motion.div
                  key={activity.id}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.5, delay: 0.6 + index * 0.1 }}
                  className="flex items-center space-x-4 p-3 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  <Avatar className="h-10 w-10">
                    <AvatarImage src={activity.avatar || "/placeholder.svg"} />
                    <AvatarFallback className="bg-gradient-to-br from-blue-600 to-indigo-600 text-white text-sm">
                      {activity.user
                        .split(" ")
                        .map((n) => n[0])
                        .join("")}
                    </AvatarFallback>
                  </Avatar>
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium text-gray-900">
                      <span className="font-semibold">{activity.user}</span> {activity.action}
                    </p>
                    <p className="text-xs text-gray-500 flex items-center">
                      <Clock className="h-3 w-3 mr-1" />
                      {activity.time}
                    </p>
                  </div>
                  <Badge
                    variant="secondary"
                    className={`text-xs ${
                      activity.type === "enrollment"
                        ? "bg-green-100 text-green-800"
                        : activity.type === "completion"
                          ? "bg-blue-100 text-blue-800"
                          : activity.type === "question"
                            ? "bg-yellow-100 text-yellow-800"
                            : activity.type === "payment"
                              ? "bg-purple-100 text-purple-800"
                              : "bg-gray-100 text-gray-800"
                    }`}
                  >
                    {activity.type}
                  </Badge>
                </motion.div>
              ))}
            </div>
            <div className="mt-4 pt-4 border-t">
              <Link href="/instructor/analytics/engagement">
                <Button variant="outline" className="w-full">
                  <Eye className="h-4 w-4 mr-2" />
                  View All Activity
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>

        {/* Upcoming Sessions */}
        <Card>
          <CardHeader>
            <CardTitle className="font-poppins">Upcoming Sessions</CardTitle>
            <CardDescription>Scheduled classes and Q&A sessions</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {upcomingSessions.map((session, index) => (
                <motion.div
                  key={session.id}
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.5, delay: 0.8 + index * 0.1 }}
                  className="flex items-center justify-between p-4 rounded-lg border border-gray-200 hover:border-blue-300 transition-colors"
                >
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-gradient-to-br from-blue-600 to-indigo-600 rounded-lg flex items-center justify-center">
                      <Calendar className="h-5 w-5 text-white" />
                    </div>
                    <div>
                      <h4 className="font-semibold text-gray-900">{session.title}</h4>
                      <p className="text-sm text-gray-600">{session.time}</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <Badge variant="outline" className="mb-1">
                      {session.type}
                    </Badge>
                    <p className="text-xs text-gray-500">{session.participants} participants</p>
                  </div>
                </motion.div>
              ))}
            </div>
            <div className="mt-4 pt-4 border-t">
              <Link href="/instructor/schedule">
                <Button variant="outline" className="w-full">
                  <Calendar className="h-4 w-4 mr-2" />
                  View Full Schedule
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

//END OF app\instructor\page.tsx

//START OF app\instructor\settings\page.tsx
"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Switch } from "@/components/ui/switch"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Globe, Bell, Shield, Mail, Database, Save, RefreshCw, AlertTriangle } from "lucide-react"
import { motion } from "framer-motion"

export default function SettingsPage() {
  const [settings, setSettings] = useState({
    // General Settings
    siteName: "EduTech Academy",
    siteDescription: "ICT & Mathematics Tutoring Program",
    contactEmail: "admin@edutech.academy",
    supportEmail: "support@edutech.academy",
    timezone: "UTC-5",
    language: "en",

    // Notification Settings
    emailNotifications: true,
    smsNotifications: false,
    pushNotifications: true,
    weeklyReports: true,
    paymentAlerts: true,

    // Security Settings
    twoFactorAuth: false,
    sessionTimeout: 24,
    passwordExpiry: 90,
    loginAttempts: 5,

    // Course Settings
    autoEnrollment: false,
    courseApproval: true,
    maxStudentsPerCourse: 50,
    allowGuestAccess: false,

    // Payment Settings
    currency: "USD",
    paymentGateway: "stripe",
    autoInvoicing: true,
    lateFeePercentage: 5,
  })

  const handleSettingChange = (key: string, value: any) => {
    setSettings((prev) => ({ ...prev, [key]: value }))
  }

  const handleSave = () => {
    // Handle save logic here
    console.log("Saving settings:", settings)
  }

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-3xl font-bold font-poppins text-gray-900">Platform Settings</h1>
          <p className="text-gray-600 mt-2">Configure general application settings and preferences</p>
        </div>
        <div className="mt-4 sm:mt-0 flex space-x-3">
          <Button variant="outline">
            <RefreshCw className="h-4 w-4 mr-2" />
            Reset to Defaults
          </Button>
          <Button
            onClick={handleSave}
            className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700"
          >
            <Save className="h-4 w-4 mr-2" />
            Save Changes
          </Button>
        </div>
      </div>

      <Tabs defaultValue="general" className="space-y-6">
        <TabsList className="grid w-full grid-cols-2 lg:grid-cols-5">
          <TabsTrigger value="general">General</TabsTrigger>
          <TabsTrigger value="notifications">Notifications</TabsTrigger>
          <TabsTrigger value="security">Security</TabsTrigger>
          <TabsTrigger value="courses">Courses</TabsTrigger>
          <TabsTrigger value="payments">Payments</TabsTrigger>
        </TabsList>

        <TabsContent value="general" className="space-y-6">
          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center font-poppins">
                  <Globe className="h-5 w-5 mr-2" />
                  General Settings
                </CardTitle>
                <CardDescription>Basic platform configuration and information</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="siteName">Site Name</Label>
                    <Input
                      id="siteName"
                      value={settings.siteName}
                      onChange={(e) => handleSettingChange("siteName", e.target.value)}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="contactEmail">Contact Email</Label>
                    <Input
                      id="contactEmail"
                      type="email"
                      value={settings.contactEmail}
                      onChange={(e) => handleSettingChange("contactEmail", e.target.value)}
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="siteDescription">Site Description</Label>
                  <Textarea
                    id="siteDescription"
                    value={settings.siteDescription}
                    onChange={(e) => handleSettingChange("siteDescription", e.target.value)}
                    rows={3}
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="timezone">Timezone</Label>
                    <Select value={settings.timezone} onValueChange={(value) => handleSettingChange("timezone", value)}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="UTC-5">UTC-5 (Eastern)</SelectItem>
                        <SelectItem value="UTC-6">UTC-6 (Central)</SelectItem>
                        <SelectItem value="UTC-7">UTC-7 (Mountain)</SelectItem>
                        <SelectItem value="UTC-8">UTC-8 (Pacific)</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="language">Default Language</Label>
                    <Select value={settings.language} onValueChange={(value) => handleSettingChange("language", value)}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="en">English</SelectItem>
                        <SelectItem value="es">Spanish</SelectItem>
                        <SelectItem value="fr">French</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </TabsContent>

        <TabsContent value="notifications" className="space-y-6">
          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center font-poppins">
                  <Bell className="h-5 w-5 mr-2" />
                  Notification Settings
                </CardTitle>
                <CardDescription>Configure how and when notifications are sent</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Email Notifications</Label>
                      <p className="text-sm text-gray-500">Receive notifications via email</p>
                    </div>
                    <Switch
                      checked={settings.emailNotifications}
                      onCheckedChange={(checked) => handleSettingChange("emailNotifications", checked)}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>SMS Notifications</Label>
                      <p className="text-sm text-gray-500">Receive notifications via SMS</p>
                    </div>
                    <Switch
                      checked={settings.smsNotifications}
                      onCheckedChange={(checked) => handleSettingChange("smsNotifications", checked)}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Push Notifications</Label>
                      <p className="text-sm text-gray-500">Receive browser push notifications</p>
                    </div>
                    <Switch
                      checked={settings.pushNotifications}
                      onCheckedChange={(checked) => handleSettingChange("pushNotifications", checked)}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Weekly Reports</Label>
                      <p className="text-sm text-gray-500">Receive weekly analytics reports</p>
                    </div>
                    <Switch
                      checked={settings.weeklyReports}
                      onCheckedChange={(checked) => handleSettingChange("weeklyReports", checked)}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Payment Alerts</Label>
                      <p className="text-sm text-gray-500">Get notified about payment activities</p>
                    </div>
                    <Switch
                      checked={settings.paymentAlerts}
                      onCheckedChange={(checked) => handleSettingChange("paymentAlerts", checked)}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </TabsContent>

        <TabsContent value="security" className="space-y-6">
          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center font-poppins">
                  <Shield className="h-5 w-5 mr-2" />
                  Security Settings
                </CardTitle>
                <CardDescription>Configure security policies and authentication</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Two-Factor Authentication</Label>
                      <p className="text-sm text-gray-500">Require 2FA for all admin accounts</p>
                    </div>
                    <Switch
                      checked={settings.twoFactorAuth}
                      onCheckedChange={(checked) => handleSettingChange("twoFactorAuth", checked)}
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <Label htmlFor="sessionTimeout">Session Timeout (hours)</Label>
                      <Input
                        id="sessionTimeout"
                        type="number"
                        value={settings.sessionTimeout}
                        onChange={(e) => handleSettingChange("sessionTimeout", Number.parseInt(e.target.value))}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="passwordExpiry">Password Expiry (days)</Label>
                      <Input
                        id="passwordExpiry"
                        type="number"
                        value={settings.passwordExpiry}
                        onChange={(e) => handleSettingChange("passwordExpiry", Number.parseInt(e.target.value))}
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="loginAttempts">Max Login Attempts</Label>
                    <Input
                      id="loginAttempts"
                      type="number"
                      value={settings.loginAttempts}
                      onChange={(e) => handleSettingChange("loginAttempts", Number.parseInt(e.target.value))}
                      className="w-full md:w-48"
                    />
                    <p className="text-sm text-gray-500">Number of failed attempts before account lockout</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </TabsContent>

        <TabsContent value="courses" className="space-y-6">
          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center font-poppins">
                  <Database className="h-5 w-5 mr-2" />
                  Course Settings
                </CardTitle>
                <CardDescription>Configure course management and enrollment policies</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Auto Enrollment</Label>
                      <p className="text-sm text-gray-500">Automatically enroll students in prerequisite courses</p>
                    </div>
                    <Switch
                      checked={settings.autoEnrollment}
                      onCheckedChange={(checked) => handleSettingChange("autoEnrollment", checked)}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Course Approval Required</Label>
                      <p className="text-sm text-gray-500">Require admin approval for new courses</p>
                    </div>
                    <Switch
                      checked={settings.courseApproval}
                      onCheckedChange={(checked) => handleSettingChange("courseApproval", checked)}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Allow Guest Access</Label>
                      <p className="text-sm text-gray-500">Allow non-registered users to view course previews</p>
                    </div>
                    <Switch
                      checked={settings.allowGuestAccess}
                      onCheckedChange={(checked) => handleSettingChange("allowGuestAccess", checked)}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="maxStudents">Max Students Per Course</Label>
                    <Input
                      id="maxStudents"
                      type="number"
                      value={settings.maxStudentsPerCourse}
                      onChange={(e) => handleSettingChange("maxStudentsPerCourse", Number.parseInt(e.target.value))}
                      className="w-full md:w-48"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </TabsContent>

        <TabsContent value="payments" className="space-y-6">
          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center font-poppins">
                  <Mail className="h-5 w-5 mr-2" />
                  Payment Settings
                </CardTitle>
                <CardDescription>Configure payment processing and billing options</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="currency">Default Currency</Label>
                    <Select value={settings.currency} onValueChange={(value) => handleSettingChange("currency", value)}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="USD">USD - US Dollar</SelectItem>
                        <SelectItem value="EUR">EUR - Euro</SelectItem>
                        <SelectItem value="GBP">GBP - British Pound</SelectItem>
                        <SelectItem value="CAD">CAD - Canadian Dollar</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="paymentGateway">Payment Gateway</Label>
                    <Select
                      value={settings.paymentGateway}
                      onValueChange={(value) => handleSettingChange("paymentGateway", value)}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="stripe">Stripe</SelectItem>
                        <SelectItem value="paypal">PayPal</SelectItem>
                        <SelectItem value="square">Square</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Auto Invoicing</Label>
                      <p className="text-sm text-gray-500">Automatically generate and send invoices</p>
                    </div>
                    <Switch
                      checked={settings.autoInvoicing}
                      onCheckedChange={(checked) => handleSettingChange("autoInvoicing", checked)}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="lateFee">Late Fee Percentage</Label>
                    <Input
                      id="lateFee"
                      type="number"
                      value={settings.lateFeePercentage}
                      onChange={(e) => handleSettingChange("lateFeePercentage", Number.parseInt(e.target.value))}
                      className="w-full md:w-48"
                    />
                    <p className="text-sm text-gray-500">Percentage charged for overdue payments</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </TabsContent>
      </Tabs>

      {/* Warning Card */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        <Card className="border-orange-200 bg-orange-50">
          <CardContent className="p-6">
            <div className="flex items-start space-x-3">
              <AlertTriangle className="h-5 w-5 text-orange-600 mt-0.5" />
              <div>
                <h3 className="font-semibold text-orange-900">Important Notice</h3>
                <p className="text-sm text-orange-800 mt-1">
                  Changes to security and payment settings may affect all users. Please review carefully before saving.
                  Some changes may require system restart to take effect.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </motion.div>
    </div>
  )
}

//END OF app\instructor\settings\page.tsx

//START OF app\instructor\users\loading.tsx
export default function Loading() {
  return null
}

//END OF app\instructor\users\loading.tsx

//START OF app\instructor\users\page.tsx
"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import {
  Users,
  UserPlus,
  MoreHorizontal,
  Edit,
  Eye,
  Trash2,
  Search,
  Download,
  Mail,
  CheckCircle,
  XCircle,
} from "lucide-react"
import { motion } from "framer-motion"
import Link from "next/link"

// Mock user data
const users = [
  {
    id: "user-001",
    name: "Emma Johnson",
    email: "emma.johnson@example.com",
    role: "student",
    status: "active",
    enrolledCourses: 3,
    joinDate: "2024-01-15",
    lastLogin: "2024-03-12",
    phone: "+1 (555) 123-4567",
    avatar: "/placeholder.svg?height=40&width=40",
  },
  {
    id: "user-002",
    name: "Sarah Johnson",
    email: "parent.test@example.com",
    role: "parent",
    status: "active",
    enrolledCourses: 0,
    joinDate: "2024-01-15",
    lastLogin: "2024-03-11",
    phone: "+1 (555) 123-4567",
    avatar: "/placeholder.svg?height=40&width=40",
  },
  {
    id: "user-003",
    name: "Michael Chen",
    email: "michael.chen@example.com",
    role: "student",
    status: "active",
    enrolledCourses: 2,
    joinDate: "2024-02-01",
    lastLogin: "2024-03-12",
    phone: "+1 (555) 234-5678",
    avatar: "/placeholder.svg?height=40&width=40",
  },
  {
    id: "user-004",
    name: "Alex Smith",
    email: "ta.test@example.com",
    role: "ta",
    status: "active",
    enrolledCourses: 0,
    joinDate: "2024-01-10",
    lastLogin: "2024-03-12",
    phone: "+1 (555) 345-6789",
    avatar: "/placeholder.svg?height=40&width=40",
  },
  {
    id: "user-005",
    name: "David Brown",
    email: "david.brown@example.com",
    role: "student",
    status: "inactive",
    enrolledCourses: 1,
    joinDate: "2023-12-15",
    lastLogin: "2024-02-28",
    phone: "+1 (555) 456-7890",
    avatar: "/placeholder.svg?height=40&width=40",
  },
  {
    id: "user-006",
    name: "Lisa Wilson",
    email: "lisa.wilson@example.com",
    role: "parent",
    status: "active",
    enrolledCourses: 0,
    joinDate: "2024-02-10",
    lastLogin: "2024-03-10",
    phone: "+1 (555) 567-8901",
    avatar: "/placeholder.svg?height=40&width=40",
  },
]

export default function UsersPage() {
  const [searchTerm, setSearchTerm] = useState("")
  const [roleFilter, setRoleFilter] = useState("all")
  const [statusFilter, setStatusFilter] = useState("all")

  const filteredUsers = users.filter((user) => {
    const matchesSearch =
      user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.email.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesRole = roleFilter === "all" || user.role === roleFilter
    const matchesStatus = statusFilter === "all" || user.status === statusFilter

    return matchesSearch && matchesRole && matchesStatus
  })

  const getRoleBadge = (role: string) => {
    switch (role) {
      case "student":
        return <Badge className="bg-blue-100 text-blue-800">Student</Badge>
      case "parent":
        return <Badge className="bg-green-100 text-green-800">Parent</Badge>
      case "ta":
        return <Badge className="bg-purple-100 text-purple-800">TA</Badge>
      case "instructor":
        return <Badge className="bg-orange-100 text-orange-800">Instructor</Badge>
      default:
        return <Badge variant="secondary">{role}</Badge>
    }
  }

  const getStatusBadge = (status: string) => {
    return status === "active" ? (
      <Badge className="bg-green-100 text-green-800">
        <CheckCircle className="w-3 h-3 mr-1" />
        Active
      </Badge>
    ) : (
      <Badge className="bg-red-100 text-red-800">
        <XCircle className="w-3 h-3 mr-1" />
        Inactive
      </Badge>
    )
  }

  const userStats = {
    total: users.length,
    students: users.filter((u) => u.role === "student").length,
    parents: users.filter((u) => u.role === "parent").length,
    tas: users.filter((u) => u.role === "ta").length,
    active: users.filter((u) => u.status === "active").length,
  }

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-3xl font-bold font-poppins text-gray-900">User Management</h1>
          <p className="text-gray-600 mt-2">Manage all users, roles, and permissions</p>
        </div>
        <div className="mt-4 sm:mt-0 flex space-x-3">
          <Button variant="outline">
            <Download className="h-4 w-4 mr-2" />
            Export Users
          </Button>
          <Link href="/instructor/users/create">
            <Button className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700">
              <UserPlus className="h-4 w-4 mr-2" />
              Add User
            </Button>
          </Link>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.1 }}
        >
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Total Users</p>
                  <p className="text-2xl font-bold text-gray-900">{userStats.total}</p>
                </div>
                <Users className="h-8 w-8 text-blue-600" />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Students</p>
                  <p className="text-2xl font-bold text-blue-600">{userStats.students}</p>
                </div>
                <div className="h-8 w-8 bg-blue-100 rounded-full flex items-center justify-center">
                  <div className="h-4 w-4 bg-blue-600 rounded-full"></div>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.3 }}
        >
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Parents</p>
                  <p className="text-2xl font-bold text-green-600">{userStats.parents}</p>
                </div>
                <div className="h-8 w-8 bg-green-100 rounded-full flex items-center justify-center">
                  <div className="h-4 w-4 bg-green-600 rounded-full"></div>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.4 }}
        >
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">TAs</p>
                  <p className="text-2xl font-bold text-purple-600">{userStats.tas}</p>
                </div>
                <div className="h-8 w-8 bg-purple-100 rounded-full flex items-center justify-center">
                  <div className="h-4 w-4 bg-purple-600 rounded-full"></div>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.5 }}
        >
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Active</p>
                  <p className="text-2xl font-bold text-green-600">{userStats.active}</p>
                </div>
                <CheckCircle className="h-8 w-8 text-green-600" />
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>

      {/* Users Table */}
      <Card>
        <CardHeader>
          <CardTitle className="font-poppins">All Users</CardTitle>
          <CardDescription>View and manage all platform users</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col sm:flex-row gap-4 mb-6">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <Input
                  placeholder="Search users..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            <Select value={roleFilter} onValueChange={setRoleFilter}>
              <SelectTrigger className="w-full sm:w-[180px]">
                <SelectValue placeholder="Filter by role" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Roles</SelectItem>
                <SelectItem value="student">Students</SelectItem>
                <SelectItem value="parent">Parents</SelectItem>
                <SelectItem value="ta">TAs</SelectItem>
                <SelectItem value="instructor">Instructors</SelectItem>
              </SelectContent>
            </Select>
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-full sm:w-[180px]">
                <SelectValue placeholder="Filter by status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="active">Active</SelectItem>
                <SelectItem value="inactive">Inactive</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>User</TableHead>
                  <TableHead>Role</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Courses</TableHead>
                  <TableHead>Join Date</TableHead>
                  <TableHead>Last Login</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredUsers.map((user, index) => (
                  <motion.tr
                    key={user.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: index * 0.1 }}
                    className="hover:bg-gray-50"
                  >
                    <TableCell>
                      <div className="flex items-center space-x-3">
                        <Avatar className="h-10 w-10">
                          <AvatarImage src={user.avatar || "/placeholder.svg"} />
                          <AvatarFallback className="bg-gradient-to-br from-blue-600 to-indigo-600 text-white">
                            {user.name
                              .split(" ")
                              .map((n) => n[0])
                              .join("")}
                          </AvatarFallback>
                        </Avatar>
                        <div>
                          <div className="font-medium text-gray-900">{user.name}</div>
                          <div className="text-sm text-gray-500 flex items-center">
                            <Mail className="h-3 w-3 mr-1" />
                            {user.email}
                          </div>
                        </div>
                      </div>
                    </TableCell>
                    <TableCell>{getRoleBadge(user.role)}</TableCell>
                    <TableCell>{getStatusBadge(user.status)}</TableCell>
                    <TableCell>
                      {user.role === "student" ? (
                        <span className="text-sm text-gray-600">{user.enrolledCourses} courses</span>
                      ) : (
                        <span className="text-sm text-gray-400">N/A</span>
                      )}
                    </TableCell>
                    <TableCell className="text-sm text-gray-500">
                      {new Date(user.joinDate).toLocaleDateString()}
                    </TableCell>
                    <TableCell className="text-sm text-gray-500">
                      {new Date(user.lastLogin).toLocaleDateString()}
                    </TableCell>
                    <TableCell className="text-right">
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" className="h-8 w-8 p-0">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem>
                            <Eye className="mr-2 h-4 w-4" />
                            View Profile
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            <Edit className="mr-2 h-4 w-4" />
                            Edit User
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            <Mail className="mr-2 h-4 w-4" />
                            Send Message
                          </DropdownMenuItem>
                          {user.status === "active" ? (
                            <DropdownMenuItem className="text-orange-600">
                              <XCircle className="mr-2 h-4 w-4" />
                              Deactivate
                            </DropdownMenuItem>
                          ) : (
                            <DropdownMenuItem className="text-green-600">
                              <CheckCircle className="mr-2 h-4 w-4" />
                              Activate
                            </DropdownMenuItem>
                          )}
                          <DropdownMenuItem className="text-red-600">
                            <Trash2 className="mr-2 h-4 w-4" />
                            Delete User
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </motion.tr>
                ))}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

//END OF app\instructor\users\page.tsx

//START OF app\layout.tsx
import type React from "react"
import type { Metadata } from "next"
import { Inter, Poppins } from "next/font/google"
import "./globals.css"
import { AuthProvider } from "@/hooks/use-auth"
import { ClientLayoutWrapper } from "./client-layout-wrapper"

const inter = Inter({ subsets: ["latin"], variable: "--font-inter" })
const poppins = Poppins({
  subsets: ["latin"],
  weight: ["300", "400", "500", "600", "700"],
  variable: "--font-poppins",
})

export const metadata: Metadata = {
  title: "EduTech Academy - ICT & Mathematics Tutoring Program",
  description:
    "Transform your understanding of ICT and Mathematics with our comprehensive online tutoring program. Expert instruction, interactive learning, and personalized support.",
  keywords: "ICT tutoring, Mathematics tutoring, online education, IG courses, programming, web development",
    generator: 'v0.dev'
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={`${inter.variable} ${poppins.variable}`}>
      <body className="font-inter antialiased">
        <AuthProvider>
          <ClientLayoutWrapper>{children}</ClientLayoutWrapper>
        </AuthProvider>
      </body>
    </html>
  )
}

//END OF app\layout.tsx

//START OF app\login\page.tsx
"use client"

import type React from "react"
import { useState } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Eye, EyeOff, GraduationCap, User, Users, UserCheck, Shield, AlertCircle, CheckCircle } from "lucide-react"
import { motion, AnimatePresence } from "framer-motion"
import { FloatingElements } from "@/components/floating-elements"
import { useAuth } from "@/hooks/use-auth"
import type { UserRole } from "@/lib/auth"

export default function LoginPage() {
  const { login, isLoading } = useAuth()
  const [showPassword, setShowPassword] = useState(false)
  const [formData, setFormData] = useState({
    email: "",
    password: "",
    userType: "" as UserRole | "",
  })
  const [error, setError] = useState("")
  const [isSubmitting, setIsSubmitting] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError("")

    if (!formData.email || !formData.password || !formData.userType) {
      setError("Please fill in all fields.")
      return
    }

    setIsSubmitting(true)

    try {
      const result = await login({
        email: formData.email,
        password: formData.password,
        userType: formData.userType as UserRole,
      })

      if (!result.success) {
        setError(result.error || "Login failed. Please try again.")
      }
      // Success case is handled by the login function (redirect)
    } catch (error) {
      console.error("Login submission error:", error)
      setError("An unexpected error occurred. Please try again.")
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleInputChange = (field: string, value: string) => {
    setFormData((prev) => ({ ...prev, [field]: value }))
    if (error) setError("") // Clear error when user starts typing
  }

  const userTypes = [
    {
      value: "student",
      label: "Student",
      icon: User,
      color: "from-blue-500 to-cyan-500",
      description: "Access your personalized dashboard, course materials, and progress tracking",
    },
    {
      value: "parent",
      label: "Parent",
      icon: Users,
      color: "from-[var(--color-gossamer-500)] to-[var(--color-gossamer-600)]",
      description: "View your child's progress, upcoming sessions, and manage payments",
    },
    {
      value: "ta",
      label: "Teaching Assistant",
      icon: UserCheck,
      color: "from-purple-500 to-pink-500",
      description: "Access student groups, moderate discussions, and assist with courses",
    },
    {
      value: "instructor",
      label: "Instructor",
      icon: Shield,
      color: "from-orange-500 to-red-500",
      description: "Comprehensive platform management and student oversight",
    },
  ]

  const selectedUserType = userTypes.find((type) => type.value === formData.userType)

  // Quick login buttons for testing
  const testAccounts = [
    { email: "parent.test@example.com", userType: "parent", label: "Test Parent" },
    { email: "emma.johnson@example.com", userType: "student", label: "Test Student" },
    { email: "ta.test@example.com", userType: "ta", label: "Test TA" },
    { email: "instructor.test@example.com", userType: "instructor", label: "Test Instructor" },
  ]

  const quickLogin = (email: string, userType: UserRole) => {
    setFormData({
      email,
      password: "P@sswOrd123",
      userType,
    })
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-[var(--color-gossamer-50)] via-[var(--color-gossamer-100)] to-cyan-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 pt-28 relative overflow-hidden">
      <FloatingElements />

      <motion.div
        className="max-w-md w-full space-y-8 relative z-10"
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        {/* Header */}
        <motion.div
          className="text-center"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
        >
          <motion.div
            className="flex justify-center mb-6"
            whileHover={{ scale: 1.05 }}
            transition={{ type: "spring", stiffness: 400, damping: 10 }}
          >
            <div className="p-4 bg-gradient-to-br from-[var(--color-gossamer-500)] to-[var(--color-gossamer-600)] rounded-2xl shadow-xl">
              <GraduationCap className="h-12 w-12 text-white" />
            </div>
          </motion.div>
          <h2 className="text-3xl font-poppins font-bold text-gray-900">Welcome Back</h2>
          <p className="mt-2 text-gray-600">Sign in to access your learning dashboard</p>
        </motion.div>

        {/* Login Form */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.4 }}
        >
          <Card className="shadow-2xl border-0 bg-white/80 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="font-poppins">Sign In</CardTitle>
              <CardDescription>Enter your credentials to access the platform</CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit} className="space-y-6">
                {/* Error Alert */}
                <AnimatePresence>
                  {error && (
                    <motion.div
                      initial={{ opacity: 0, y: -10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      transition={{ duration: 0.3 }}
                    >
                      <Alert className="border-red-200 bg-red-50">
                        <AlertCircle className="h-4 w-4 text-red-600" />
                        <AlertDescription className="text-red-800">{error}</AlertDescription>
                      </Alert>
                    </motion.div>
                  )}
                </AnimatePresence>

                {/* User Type Selection */}
                <div className="space-y-2">
                  <Label htmlFor="userType">I am a...</Label>
                  <Select
                    value={formData.userType}
                    onValueChange={(value) => handleInputChange("userType", value)}
                    required
                  >
                    <SelectTrigger className="h-12">
                      <SelectValue placeholder="Select your role" />
                    </SelectTrigger>
                    <SelectContent>
                      {userTypes.map((type) => (
                        <SelectItem key={type.value} value={type.value}>
                          <div className="flex items-center space-x-2">
                            <type.icon className="h-4 w-4" />
                            <span>{type.label}</span>
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Email */}
                <div className="space-y-2">
                  <Label htmlFor="email">Email Address</Label>
                  <motion.div whileFocus={{ scale: 1.02 }} transition={{ type: "spring", stiffness: 300, damping: 10 }}>
                    <Input
                      id="email"
                      type="email"
                      value={formData.email}
                      onChange={(e) => handleInputChange("email", e.target.value)}
                      placeholder="Enter your email"
                      className="h-12"
                      required
                      disabled={isSubmitting}
                    />
                  </motion.div>
                </div>

                {/* Password */}
                <div className="space-y-2">
                  <Label htmlFor="password">Password</Label>
                  <motion.div
                    className="relative"
                    whileFocus={{ scale: 1.02 }}
                    transition={{ type: "spring", stiffness: 300, damping: 10 }}
                  >
                    <Input
                      id="password"
                      type={showPassword ? "text" : "password"}
                      value={formData.password}
                      onChange={(e) => handleInputChange("password", e.target.value)}
                      placeholder="Enter your password"
                      className="h-12 pr-12"
                      required
                      disabled={isSubmitting}
                    />
                    <motion.button
                      type="button"
                      className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                      onClick={() => setShowPassword(!showPassword)}
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.9 }}
                      disabled={isSubmitting}
                    >
                      <AnimatePresence mode="wait">
                        {showPassword ? (
                          <motion.div
                            key="hide"
                            initial={{ opacity: 0, rotate: -90 }}
                            animate={{ opacity: 1, rotate: 0 }}
                            exit={{ opacity: 0, rotate: 90 }}
                            transition={{ duration: 0.2 }}
                          >
                            <EyeOff className="h-4 w-4 text-gray-400" />
                          </motion.div>
                        ) : (
                          <motion.div
                            key="show"
                            initial={{ opacity: 0, rotate: 90 }}
                            animate={{ opacity: 1, rotate: 0 }}
                            exit={{ opacity: 0, rotate: -90 }}
                            transition={{ duration: 0.2 }}
                          >
                            <Eye className="h-4 w-4 text-gray-400" />
                          </motion.div>
                        )}
                      </AnimatePresence>
                    </motion.button>
                  </motion.div>
                </div>

                {/* Remember Me & Forgot Password */}
                <div className="flex items-center justify-between">
                  <motion.div className="flex items-center" whileHover={{ scale: 1.02 }}>
                    <input
                      id="remember-me"
                      name="remember-me"
                      type="checkbox"
                      className="h-4 w-4 text-[var(--color-gossamer-600)] focus:ring-[var(--color-gossamer-500)] border-gray-300 rounded"
                      disabled={isSubmitting}
                    />
                    <Label htmlFor="remember-me" className="ml-2 text-sm text-gray-900 cursor-pointer">
                      Remember me
                    </Label>
                  </motion.div>
                  <Link
                    href="/forgot-password"
                    className="text-sm text-[var(--color-gossamer-600)] hover:text-[var(--color-gossamer-500)] transition-colors"
                  >
                    Forgot password?
                  </Link>
                </div>

                {/* Submit Button */}
                <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                  <Button
                    type="submit"
                    className="w-full h-12 bg-gradient-to-r from-[var(--color-gossamer-600)] to-[var(--color-gossamer-700)] hover:from-[var(--color-gossamer-700)] hover:to-[var(--color-gossamer-800)] shadow-lg"
                    disabled={isSubmitting || isLoading}
                  >
                    <AnimatePresence mode="wait">
                      {isSubmitting ? (
                        <motion.div
                          key="loading"
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          exit={{ opacity: 0 }}
                          className="flex items-center"
                        >
                          <motion.div
                            className="w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2"
                            animate={{ rotate: 360 }}
                            transition={{ duration: 1, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
                          />
                          Signing in...
                        </motion.div>
                      ) : (
                        <motion.span
                          key="signin"
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          exit={{ opacity: 0 }}
                        >
                          Sign In
                        </motion.span>
                      )}
                    </AnimatePresence>
                  </Button>
                </motion.div>
              </form>

              {/* Quick Login for Testing */}
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.4, delay: 0.8 }}
                className="mt-6"
              >
                <div className="text-center mb-3">
                  <span className="text-xs text-gray-500">Quick Login (Testing)</span>
                </div>
                <div className="grid grid-cols-2 gap-2">
                  {testAccounts.map((account) => (
                    <Button
                      key={account.email}
                      variant="outline"
                      size="sm"
                      onClick={() => quickLogin(account.email, account.userType as UserRole)}
                      disabled={isSubmitting}
                      className="text-xs"
                    >
                      {account.label}
                    </Button>
                  ))}
                </div>
              </motion.div>

              {/* Demo Alert */}
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.4, delay: 1.0 }}
              >
                <Alert className="mt-6 border-[var(--color-gossamer-200)] bg-[var(--color-gossamer-50)]">
                  <CheckCircle className="h-4 w-4 text-[var(--color-gossamer-600)]" />
                  <AlertDescription className="text-[var(--color-gossamer-800)]">
                    <strong>Test Credentials:</strong> Use the following test accounts with password "P@sswOrd123":
                    <ul className="mt-2 list-disc pl-5 text-xs">
                      <li>
                        <strong>Parent:</strong> parent.test@example.com
                      </li>
                      <li>
                        <strong>Student:</strong> emma.johnson@example.com
                      </li>
                      <li>
                        <strong>TA:</strong> ta.test@example.com
                      </li>
                      <li>
                        <strong>Instructor:</strong> instructor.test@example.com
                      </li>
                    </ul>
                  </AlertDescription>
                </Alert>
              </motion.div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Additional Links */}
        <motion.div
          className="text-center"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.6, delay: 0.6 }}
        >
          <p className="text-sm text-gray-600">
            New to our platform?{" "}
            <Link
              href="/contact"
              className="text-[var(--color-gossamer-600)] hover:text-[var(--color-gossamer-500)] font-medium transition-colors"
            >
              Contact us for enrollment
            </Link>
          </p>
        </motion.div>

        {/* Role-specific Information */}
        <AnimatePresence>
          {selectedUserType && (
            <motion.div
              initial={{ opacity: 0, y: 20, scale: 0.95 }}
              animate={{ opacity: 1, y: 0, scale: 1 }}
              exit={{ opacity: 0, y: -20, scale: 0.95 }}
              transition={{ duration: 0.3 }}
            >
              <Card className="bg-white/80 backdrop-blur-sm border-[var(--color-gossamer-200)] relative overflow-hidden">
                <div className={`absolute inset-0 bg-gradient-to-br ${selectedUserType.color} opacity-5`} />
                <CardContent className="pt-6 relative z-10">
                  <div className="flex items-start space-x-4">
                    <motion.div
                      className={`p-3 rounded-xl bg-gradient-to-br ${selectedUserType.color} shadow-lg`}
                      whileHover={{ scale: 1.1, rotate: 5 }}
                      transition={{ type: "spring", stiffness: 400, damping: 10 }}
                    >
                      <selectedUserType.icon className="h-6 w-6 text-white" />
                    </motion.div>
                    <div>
                      <h3 className="font-semibold text-gray-900 mb-1">{selectedUserType.label} Access</h3>
                      <p className="text-sm text-gray-600">{selectedUserType.description}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          )}
        </AnimatePresence>
      </motion.div>
    </div>
  )
}

//END OF app\login\page.tsx

//START OF app\page.tsx
"use client"

import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { CheckCircle, Users, Video, MessageSquare, BarChart3, Clock, ArrowRight, Sparkles } from "lucide-react"
import { motion, useScroll, useTransform } from "framer-motion"
import { AnimatedCounter } from "@/components/animated-counter"
import { FloatingElements } from "@/components/floating-elements"
import { useRef } from "react"

export default function HomePage() {
  const heroRef = useRef(null)
  const { scrollYProgress } = useScroll({
    target: heroRef,
    offset: ["start start", "end start"],
  })

  const y = useTransform(scrollYProgress, [0, 1], ["0%", "50%"])
  const opacity = useTransform(scrollYProgress, [0, 1], [1, 0])

  const features = [
    {
      icon: Video,
      title: "Pre-recorded Lectures",
      description: "Access comprehensive video lectures and practical tutorials anytime",
      color: "from-blue-500 to-cyan-500",
    },
    {
      icon: MessageSquare,
      title: "Discussion Forums",
      description: "Collaborate with peers and get support from teaching assistants",
      color: "from-purple-500 to-pink-500",
    },
    {
      icon: Users,
      title: "Live Q&A Sessions",
      description: "Join interactive sessions with instructors and fellow students",
      color: "from-[var(--color-gossamer-500)] to-[var(--color-gossamer-600)]",
    },
    {
      icon: BarChart3,
      title: "Progress Tracking",
      description: "Monitor your learning journey with detailed progress analytics",
      color: "from-orange-500 to-red-500",
    },
    {
      icon: Clock,
      title: "Flexible Learning",
      description: "Study at your own pace with 24/7 access to course materials",
      color: "from-indigo-500 to-purple-500",
    },
    {
      icon: CheckCircle,
      title: "Expert Support",
      description: "Get guidance from experienced instructors and teaching assistants",
      color: "from-green-500 to-[var(--color-gossamer-500)]",
    },
  ]

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.3,
      },
    },
  }

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.5 },
    },
  }

  return (
    <div className="min-h-screen pt-16">
      {/* Hero Section */}
      <section
        ref={heroRef}
        className="relative bg-gradient-to-br from-[var(--color-gossamer-50)] via-[var(--color-gossamer-100)] to-cyan-50 py-20 overflow-hidden"
      >
        <FloatingElements />

        <motion.div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10" style={{ y, opacity }}>
          <motion.div className="text-center" variants={containerVariants} initial="hidden" animate="visible">
            <motion.div
              variants={itemVariants}
              className="inline-flex items-center px-4 py-2 bg-[var(--color-gossamer-100)] rounded-full text-[var(--color-gossamer-800)] text-sm font-medium mb-6"
            >
              <Sparkles className="w-4 h-4 mr-2" />
              Transform Your Learning Journey
            </motion.div>

            <motion.h1
              className="text-4xl md:text-6xl lg:text-7xl font-poppins font-bold text-gray-900 mb-6"
              variants={itemVariants}
            >
              Excel in{" "}
              <span className="bg-gradient-to-r from-[var(--color-gossamer-600)] via-[var(--color-gossamer-700)] to-cyan-600 bg-clip-text text-transparent">
                ICT & Mathematics
              </span>
              <br />
              <motion.span
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.8, duration: 0.6 }}
              >
                with Expert Guidance
              </motion.span>
            </motion.h1>

            <motion.p
              className="text-xl md:text-2xl text-gray-600 mb-8 max-w-4xl mx-auto leading-relaxed"
              variants={itemVariants}
            >
              Join our comprehensive online tutoring program designed for IG students. Access pre-recorded lectures,
              live Q&A sessions, and a supportive learning community all in one integrated digital campus.
            </motion.p>

            <motion.div className="flex flex-col sm:flex-row gap-6 justify-center items-center" variants={itemVariants}>
              <Link href="/login">
                <motion.div whileHover={{ scale: 1.05, y: -2 }} whileTap={{ scale: 0.95 }} className="group">
                  <Button
                    size="lg"
                    className="bg-gradient-to-r from-[var(--color-gossamer-600)] to-[var(--color-gossamer-700)] hover:from-[var(--color-gossamer-700)] hover:to-[var(--color-gossamer-800)] text-lg px-8 py-4 shadow-xl hover:shadow-2xl transition-all duration-300"
                  >
                    <motion.span className="flex items-center" whileHover={{ x: 5 }}>
                      Enroll Now
                      <ArrowRight className="ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform" />
                    </motion.span>
                  </Button>
                </motion.div>
              </Link>

              <Link href="/about">
                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                  <Button
                    size="lg"
                    variant="outline"
                    className="text-lg px-8 py-4 border-2 border-[var(--color-gossamer-300)] hover:bg-[var(--color-gossamer-50)] hover:border-[var(--color-gossamer-400)]"
                  >
                    Learn More
                  </Button>
                </motion.div>
              </Link>
            </motion.div>

            {/* Stats */}
            <motion.div
              className="grid grid-cols-2 md:grid-cols-4 gap-8 mt-16 max-w-4xl mx-auto"
              variants={containerVariants}
              initial="hidden"
              whileInView="visible"
              viewport={{ once: true, margin: "-100px" }}
            >
              {[
                { number: 500, suffix: "+", label: "Students Taught" },
                { number: 95, suffix: "%", label: "Success Rate" },
                { number: 10, suffix: "+", label: "Years Experience" },
                { number: 24, suffix: "/7", label: "Platform Access" },
              ].map((stat, index) => (
                <motion.div key={index} className="text-center" variants={itemVariants} whileHover={{ scale: 1.05 }}>
                  <div className="text-3xl md:text-4xl font-bold text-[var(--color-gossamer-600)] mb-2">
                    <AnimatedCounter end={stat.number} suffix={stat.suffix} />
                  </div>
                  <div className="text-gray-600 font-medium">{stat.label}</div>
                </motion.div>
              ))}
            </motion.div>
          </motion.div>
        </motion.div>

        {/* Simplified background elements */}
        <div className="absolute inset-0 overflow-hidden">
          <motion.div
            className="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-[var(--color-gossamer-200)]/30 to-[var(--color-gossamer-300)]/30 rounded-full blur-3xl"
            animate={{
              scale: [1, 1.2, 1],
            }}
            transition={{
              duration: 20,
              repeat: Number.POSITIVE_INFINITY,
              ease: "linear",
            }}
          />
          <motion.div
            className="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-cyan-200/30 to-blue-200/30 rounded-full blur-3xl"
            animate={{
              scale: [1.2, 1, 1.2],
            }}
            transition={{
              duration: 25,
              repeat: Number.POSITIVE_INFINITY,
              ease: "linear",
            }}
          />
        </div>
      </section>

      {/* Course Offerings */}
      <section className="py-20 bg-white relative overflow-hidden">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            className="text-center mb-16"
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
          >
            <h2 className="text-3xl md:text-5xl font-poppins font-bold text-gray-900 mb-4">Course Offerings</h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              Comprehensive curriculum designed to help you master ICT and Mathematics concepts
            </p>
          </motion.div>

          <div className="grid md:grid-cols-2 gap-8 max-w-6xl mx-auto">
            {[
              {
                title: "ICT Course",
                description: "Master Information and Communication Technology fundamentals",
                features: [
                  "Programming fundamentals and practical applications",
                  "Database design and management",
                  "Web development and digital literacy",
                  "Hands-on practical tutorials",
                ],
                gradient: "from-blue-500 to-cyan-500",
                href: "/courses#ict",
              },
              {
                title: "Mathematics Course",
                description: "Build strong mathematical foundations for academic success",
                features: [
                  "Algebra and advanced mathematical concepts",
                  "Geometry and trigonometry",
                  "Statistics and probability",
                  "Problem-solving techniques",
                ],
                gradient: "from-purple-500 to-pink-500",
                href: "/courses#mathematics",
              },
            ].map((course, index) => (
              <motion.div
                key={course.title}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.6, delay: index * 0.2 }}
                whileHover={{ y: -10 }}
                className="group"
              >
                <Card className="border-2 hover:border-[var(--color-gossamer-200)] transition-all duration-300 h-full relative overflow-hidden">
                  <div
                    className={`absolute inset-0 bg-gradient-to-br ${course.gradient} opacity-0 group-hover:opacity-5 transition-opacity duration-300`}
                  />

                  <CardHeader className="relative z-10">
                    <CardTitle className="text-2xl text-[var(--color-gossamer-600)] font-poppins">
                      {course.title}
                    </CardTitle>
                    <CardDescription className="text-lg">{course.description}</CardDescription>
                  </CardHeader>

                  <CardContent className="relative z-10">
                    <ul className="space-y-3 mb-6">
                      {course.features.map((feature, featureIndex) => (
                        <motion.li
                          key={featureIndex}
                          className="flex items-center space-x-3"
                          initial={{ opacity: 0, x: -20 }}
                          whileInView={{ opacity: 1, x: 0 }}
                          viewport={{ once: true }}
                          transition={{ duration: 0.4, delay: index * 0.2 + featureIndex * 0.1 }}
                        >
                          <CheckCircle className="h-5 w-5 text-[var(--color-gossamer-500)] flex-shrink-0" />
                          <span>{feature}</span>
                        </motion.li>
                      ))}
                    </ul>

                    <Link href={course.href}>
                      <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                        <Button
                          variant="outline"
                          className="w-full group-hover:bg-[var(--color-gossamer-50)] group-hover:border-[var(--color-gossamer-300)] transition-colors"
                        >
                          Learn More
                          <ArrowRight className="ml-2 h-4 w-4 group-hover:translate-x-1 transition-transform" />
                        </Button>
                      </motion.div>
                    </Link>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-20 bg-gradient-to-br from-gray-50 to-[var(--color-gossamer-50)] relative">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            className="text-center mb-16"
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
          >
            <h2 className="text-3xl md:text-5xl font-poppins font-bold text-gray-900 mb-4">Why Choose Our Program?</h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              Experience a comprehensive digital learning environment designed for your success
            </p>
          </motion.div>

          <motion.div
            className="grid md:grid-cols-2 lg:grid-cols-3 gap-8"
            variants={containerVariants}
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, margin: "-100px" }}
          >
            {features.map((feature, index) => (
              <motion.div key={index} variants={itemVariants} whileHover={{ y: -10, scale: 1.02 }} className="group">
                <Card className="text-center hover:shadow-xl transition-all duration-300 h-full relative overflow-hidden">
                  <div
                    className={`absolute inset-0 bg-gradient-to-br ${feature.color} opacity-0 group-hover:opacity-5 transition-opacity duration-300`}
                  />

                  <CardHeader className="relative z-10">
                    <motion.div
                      className={`mx-auto w-16 h-16 bg-gradient-to-br ${feature.color} rounded-2xl flex items-center justify-center mb-4 shadow-lg`}
                      whileHover={{ rotate: 5, scale: 1.1 }}
                      transition={{ type: "spring", stiffness: 400, damping: 10 }}
                    >
                      <feature.icon className="h-8 w-8 text-white" />
                    </motion.div>
                    <CardTitle className="text-xl font-poppins">{feature.title}</CardTitle>
                  </CardHeader>

                  <CardContent className="relative z-10">
                    <p className="text-gray-600">{feature.description}</p>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </motion.div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-gradient-to-r from-[var(--color-gossamer-600)] via-[var(--color-gossamer-700)] to-cyan-600 relative overflow-hidden">
        <div className="absolute inset-0 bg-black/10" />
        <FloatingElements />

        <motion.div
          className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center relative z-10"
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.6 }}
        >
          <motion.h2
            className="text-3xl md:text-5xl font-poppins font-bold text-white mb-4"
            initial={{ opacity: 0, scale: 0.9 }}
            whileInView={{ opacity: 1, scale: 1 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6, delay: 0.2 }}
          >
            Ready to Start Your Learning Journey?
          </motion.h2>

          <motion.p
            className="text-xl text-[var(--color-gossamer-100)] mb-8 max-w-3xl mx-auto"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6, delay: 0.4 }}
          >
            Join hundreds of students who have already transformed their understanding of ICT and Mathematics
          </motion.p>

          <motion.div
            className="flex flex-col sm:flex-row gap-6 justify-center"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6, delay: 0.6 }}
          >
            <Link href="/login">
              <motion.div whileHover={{ scale: 1.05, y: -2 }} whileTap={{ scale: 0.95 }}>
                <Button
                  size="lg"
                  variant="secondary"
                  className="text-lg px-8 py-4 bg-white text-[var(--color-gossamer-600)] hover:bg-gray-100 shadow-xl"
                >
                  <motion.span className="flex items-center" whileHover={{ x: 5 }}>
                    Enroll Today
                    <ArrowRight className="ml-2 h-5 w-5" />
                  </motion.span>
                </Button>
              </motion.div>
            </Link>

            <Link href="/contact">
              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                <Button
                  size="lg"
                  variant="outline"
                  className="text-lg px-8 py-4 text-white border-white hover:bg-white hover:text-[var(--color-gossamer-600)] transition-colors"
                >
                  Contact Us
                </Button>
              </motion.div>
            </Link>
          </motion.div>
        </motion.div>
      </section>
    </div>
  )
}

//END OF app\page.tsx

//START OF app\parent\announcements\loading.tsx
export default function Loading() {
  return null
}

//END OF app\parent\announcements\loading.tsx

//START OF app\parent\announcements\page.tsx
// app/parent/announcements/page.tsx
"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Bell, Search, Filter, Calendar, AlertCircle, Info, CheckCircle, Clock, User } from "lucide-react"
import { motion, AnimatePresence } from "framer-motion"

export default function AnnouncementsPage() {
  const [searchTerm, setSearchTerm] = useState("")
  const [filterPriority, setFilterPriority] = useState("all")
  const [filterCategory, setFilterCategory] = useState("all")

  const mockAnnouncements = [
    {
      id: 1,
      title: "Term 2 Assessment Schedule Released",
      content:
        "We are pleased to announce that the assessment schedule for Term 2 has been finalized and is now available. Please review the dates carefully and ensure your child is prepared for upcoming evaluations. The schedule includes mid-term assessments, project deadlines, and final examinations for both ICT and Mathematics courses.",
      date: "2024-01-15",
      time: "09:30 AM",
      priority: "high",
      category: "academic",
      author: "Dr. Sarah Johnson",
      read: false,
    },
    {
      id: 2,
      title: "Parent-Teacher Conference Invitations",
      content:
        "We invite all parents to schedule one-on-one sessions with instructors to discuss your child's progress, strengths, and areas for improvement. These conferences provide valuable insights into your child's learning journey and offer opportunities to address any concerns or questions you may have.",
      date: "2024-01-12",
      time: "02:15 PM",
      priority: "medium",
      category: "events",
      author: "Academic Coordinator",
      read: true,
    },
    {
      id: 3,
      title: "Platform Maintenance Notice",
      content:
        "Our learning platform will undergo scheduled maintenance this weekend from 2:00 AM to 4:00 AM EST on Saturday. During this time, the platform may be temporarily unavailable. We apologize for any inconvenience and appreciate your understanding as we work to improve our services.",
      date: "2024-01-10",
      time: "04:45 PM",
      priority: "low",
      category: "technical",
      author: "IT Support Team",
      read: true,
    },
    {
      id: 4,
      title: "New Study Resources Available",
      content:
        "We've added new interactive study materials and practice exercises to both ICT and Mathematics courses. These resources include video tutorials, interactive quizzes, and downloadable worksheets designed to enhance your child's learning experience and provide additional practice opportunities.",
      date: "2024-01-08",
      time: "11:20 AM",
      priority: "medium",
      category: "academic",
      author: "Curriculum Team",
      read: true,
    },
  ]

  const filteredAnnouncements = mockAnnouncements.filter((announcement) => {
    const matchesSearch =
      announcement.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      announcement.content.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesPriority = filterPriority === "all" || announcement.priority === filterPriority
    const matchesCategory = filterCategory === "all" || announcement.category === filterCategory

    return matchesSearch && matchesPriority && matchesCategory
  })

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case "high":
        return <AlertCircle className="h-4 w-4 text-red-500" />
      case "medium":
        return <Info className="h-4 w-4 text-yellow-500" />
      case "low":
        return <CheckCircle className="h-4 w-4 text-blue-500" />
      default:
        return <Bell className="h-4 w-4 text-gray-500" />
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "high":
        return "bg-red-100 text-red-800 border-red-200"
      case "medium":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "low":
        return "bg-blue-100 text-blue-800 border-blue-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const getCategoryColor = (category: string) => {
    switch (category) {
      case "academic":
        return "bg-emerald-100 text-emerald-800"
      case "events":
        return "bg-purple-100 text-purple-800"
      case "technical":
        return "bg-orange-100 text-orange-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.2,
      },
    },
  }

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.5 },
    },
  }

  return (
    <motion.div className="space-y-8" variants={containerVariants} initial="hidden" animate="visible">
      {/* Header */}
      <motion.div variants={itemVariants}>
        <div className="bg-gradient-to-r from-purple-500 to-pink-500 rounded-2xl p-6 text-white">
          <h1 className="text-3xl font-poppins font-bold mb-2 flex items-center">
            <Bell className="h-8 w-8 mr-3" />
            Announcements
          </h1>
          <p className="text-purple-100 text-lg">Stay updated with important communications and program updates</p>
        </div>
      </motion.div>

      {/* Filters */}
      <motion.div variants={itemVariants}>
        <Card>
          <CardHeader>
            <CardTitle className="text-lg font-poppins flex items-center">
              <Filter className="h-5 w-5 mr-2 text-emerald-600" />
              Filter Announcements
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700">Search</label>
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <Input placeholder="Search announcements..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="pl-10"/>
                </div>
              </div>
              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700">Priority</label>
                <Select value={filterPriority} onValueChange={setFilterPriority}>
                  <SelectTrigger><SelectValue placeholder="All priorities" /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Priorities</SelectItem>
                    <SelectItem value="high">High Priority</SelectItem>
                    <SelectItem value="medium">Medium Priority</SelectItem>
                    <SelectItem value="low">Low Priority</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700">Category</label>
                <Select value={filterCategory} onValueChange={setFilterCategory}>
                  <SelectTrigger><SelectValue placeholder="All categories" /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Categories</SelectItem>
                    <SelectItem value="academic">Academic</SelectItem>
                    <SelectItem value="events">Events</SelectItem>
                    <SelectItem value="technical">Technical</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
        </Card>
      </motion.div>

      {/* Announcements List */}
      <motion.div variants={itemVariants}>
        <div className="space-y-6">
          <AnimatePresence>
            {filteredAnnouncements.map((announcement, index) => (
              <motion.div key={announcement.id} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -20 }} transition={{ duration: 0.3, delay: index * 0.1 }} whileHover={{ y: -2, scale: 1.01 }}>
                <Card className={`${!announcement.read ? "border-emerald-200 bg-emerald-50/30" : ""} hover:shadow-lg transition-all duration-300`}>
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center space-x-3 mb-2">
                          {getPriorityIcon(announcement.priority)}
                          <CardTitle className="text-lg font-poppins">{announcement.title}</CardTitle>
                          {!announcement.read && (<motion.div initial={{ scale: 0 }} animate={{ scale: 1 }} className="w-2 h-2 bg-emerald-500 rounded-full"/>)}
                        </div>
                        <div className="flex items-center space-x-4 text-sm text-gray-500">
                          <div className="flex items-center space-x-1"><Calendar className="h-4 w-4" /><span>{announcement.date}</span></div>
                          <div className="flex items-center space-x-1"><Clock className="h-4 w-4" /><span>{announcement.time}</span></div>
                          <div className="flex items-center space-x-1"><User className="h-4 w-4" /><span>{announcement.author}</span></div>
                        </div>
                      </div>
                      <div className="flex flex-col items-end space-y-2">
                        <Badge variant="outline" className={getPriorityColor(announcement.priority)}>{announcement.priority}</Badge>
                        <Badge variant="secondary" className={getCategoryColor(announcement.category)}>{announcement.category}</Badge>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-700 leading-relaxed mb-4">{announcement.content}</p>
                    <div className="flex items-center justify-between pt-4 border-t border-gray-100">
                      <div className="text-xs text-gray-500">{announcement.read ? "Read" : "New"}</div>
                      {!announcement.read && <Button variant="outline" size="sm">Mark as Read</Button>}
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </AnimatePresence>
          {filteredAnnouncements.length === 0 && (
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="text-center py-12">
              <Bell className="h-12 w-12 text-gray-300 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No announcements found</h3>
              <p className="text-gray-500">Try adjusting your search terms or filters to find what you're looking for.</p>
            </motion.div>
          )}
        </div>
      </motion.div>
    </motion.div>
  )
}
//END OF app\parent\announcements\page.tsx

//START OF app\parent\attendance\loading.tsx
export default function Loading() {
  return null
}
//END OF app\parent\attendance\loading.tsx

//START OF app\parent\attendance\page.tsx
// NEW FILE: app/parent/attendance/page.tsx
"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Calendar } from "@/components/ui/calendar"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { CalendarCheck, User, Check, X, AlertTriangle } from "lucide-react"
import { motion } from "framer-motion"
import { AnimatedCounter } from "@/components/animated-counter"

export default function AttendancePage() {
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date())
  const [currentChild, setCurrentChild] = useState("Emma Johnson")

  const mockAttendance = {
    "Emma Johnson": {
      summary: {
        present: 125,
        excused: 3,
        unexcused: 1,
        tardy: 2,
        totalDays: 131,
      },
      events: [
        { date: "2024-03-12", status: "unexcused", period: "Period 2", course: "Mathematics" },
        { date: "2024-03-05", status: "tardy", period: "Period 1", course: "ICT Course" },
        { date: "2024-02-28", status: "excused", period: "Full Day", course: "N/A" },
        { date: "2024-02-27", status: "excused", period: "Full Day", course: "N/A" },
        { date: "2024-02-15", status: "tardy", period: "Period 4", course: "Mathematics" },
        { date: "2024-02-01", status: "excused", period: "Period 1-2", course: "ICT Course" },
      ],
    },
  }

  const attendanceData = mockAttendance[currentChild as keyof typeof mockAttendance]

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "present":
        return (
          <Badge className="bg-green-100 text-green-800">
            <Check className="w-3 h-3 mr-1" />
            Present
          </Badge>
        )
      case "excused":
        return (
          <Badge className="bg-blue-100 text-blue-800">
            <Check className="w-3 h-3 mr-1" />
            Excused
          </Badge>
        )
      case "unexcused":
        return (
          <Badge className="bg-red-100 text-red-800">
            <X className="w-3 h-3 mr-1" />
            Unexcused
          </Badge>
        )
      case "tardy":
        return (
          <Badge className="bg-yellow-100 text-yellow-800">
            <AlertTriangle className="w-3 h-3 mr-1" />
            Tardy
          </Badge>
        )
      default:
        return <Badge variant="secondary">{status}</Badge>
    }
  }

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  }

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.5 },
    },
  }

  return (
    <motion.div className="space-y-8" variants={containerVariants} initial="hidden" animate="visible">
      {/* Header */}
      <motion.div variants={itemVariants}>
        <div className="bg-gradient-to-r from-orange-500 to-red-500 rounded-2xl p-6 text-white">
          <h1 className="text-3xl font-poppins font-bold mb-2 flex items-center">
            <CalendarCheck className="h-8 w-8 mr-3" />
            Attendance Record
          </h1>
          <p className="text-orange-100 text-lg">
            Viewing attendance for <span className="font-semibold">{currentChild}</span>
          </p>
        </div>
      </motion.div>

      {/* Summary */}
      <motion.div variants={itemVariants}>
        <Card>
          <CardHeader>
            <CardTitle className="text-xl font-poppins">Attendance Summary</CardTitle>
            <CardDescription>Overview of attendance for the current school year</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
              {[
                { label: "Days Present", value: attendanceData.summary.present, color: "text-green-600" },
                { label: "Excused Absences", value: attendanceData.summary.excused, color: "text-blue-600" },
                { label: "Unexcused Absences", value: attendanceData.summary.unexcused, color: "text-red-600" },
                { label: "Tardies", value: attendanceData.summary.tardy, color: "text-yellow-700" },
              ].map((stat) => (
                <div key={stat.label} className="text-center p-4 bg-gray-50 rounded-lg">
                  <p className="text-3xl font-bold">
                    <AnimatedCounter end={stat.value} />
                  </p>
                  <p className={`text-sm font-medium ${stat.color}`}>{stat.label}</p>
                </div>
              ))}
            </div>
            <div className="mt-6 text-center">
              <p className="text-sm text-gray-600">
                Attendance Rate:{" "}
                <span className="font-bold text-emerald-600">
                  {Math.round(
                    ((attendanceData.summary.present + attendanceData.summary.excused) / attendanceData.summary.totalDays) *
                      100,
                  )}
                  %
                </span>
              </p>
            </div>
          </CardContent>
        </Card>
      </motion.div>

      {/* Main Content */}
      <motion.div variants={itemVariants}>
        <Tabs defaultValue="list" className="space-y-6">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="list">List View</TabsTrigger>
            <TabsTrigger value="calendar">Calendar View</TabsTrigger>
          </TabsList>
          <TabsContent value="list">
            <Card>
              <CardHeader>
                <CardTitle>Attendance Events</CardTitle>
                <CardDescription>Detailed log of all absences and tardies</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="rounded-md border">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Date</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Period/Time</TableHead>
                        <TableHead>Course</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {attendanceData.events.map((event, index) => (
                        <TableRow key={index}>
                          <TableCell>{new Date(event.date).toLocaleDateString()}</TableCell>
                          <TableCell>{getStatusBadge(event.status)}</TableCell>
                          <TableCell>{event.period}</TableCell>
                          <TableCell>{event.course}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          <TabsContent value="calendar">
            <Card>
              <CardHeader>
                <CardTitle>Calendar View</CardTitle>
                <CardDescription>Visualize attendance patterns over the month</CardDescription>
              </CardHeader>
              <CardContent className="flex justify-center">
                <Calendar
                  mode="single"
                  selected={selectedDate}
                  onSelect={setSelectedDate}
                  className="rounded-md border"
                  modifiers={{
                    unexcused: new Date("2024-03-12"),
                    tardy: [new Date("2024-03-05"), new Date("2024-02-15")],
                    excused: [new Date("2024-02-28"), new Date("2024-02-27"), new Date("2024-02-01")],
                  }}
                  modifiersClassNames={{
                    unexcused: "bg-red-200 text-red-900",
                    tardy: "bg-yellow-200 text-yellow-900",
                    excused: "bg-blue-200 text-blue-900",
                  }}
                />
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </motion.div>
    </motion.div>
  )
}
//END OF app\parent\attendance\page.tsx

//START OF app\parent\billing\page.tsx
// app/parent/billing/page.tsx
"use client"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  CreditCard,
  Download,
  Calendar,
  DollarSign,
  CheckCircle,
  Clock,
  AlertCircle,
  Receipt,
  Shield,
} from "lucide-react"
import { motion } from "framer-motion"

export default function BillingPage() {
  const mockData = {
    nextPaymentDue: {
      date: "2024-02-01",
      amount: 450,
      description: "February 2024 Tuition",
    },
    paymentHistory: [
      {
        id: "INV-2024-001",
        date: "2024-01-01",
        amount: 450,
        description: "January 2024 Tuition",
        status: "paid",
        method: "Credit Card",
        downloadUrl: "#",
      },
      {
        id: "INV-2023-012",
        date: "2023-12-01",
        amount: 450,
        description: "December 2023 Tuition",
        status: "paid",
        method: "Credit Card",
        downloadUrl: "#",
      },
      {
        id: "INV-2023-011",
        date: "2023-11-01",
        amount: 450,
        description: "November 2023 Tuition",
        status: "paid",
        method: "Bank Transfer",
        downloadUrl: "#",
      },
    ],
    upcomingPayments: [
      {
        date: "2024-02-01",
        amount: 450,
        description: "February 2024 Tuition",
        status: "scheduled",
      },
      {
        date: "2024-03-01",
        amount: 450,
        description: "March 2024 Tuition",
        status: "pending",
      },
    ],
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "paid":
        return "bg-green-100 text-green-800 border-green-200"
      case "pending":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "overdue":
        return "bg-red-100 text-red-800 border-red-200"
      case "scheduled":
        return "bg-blue-100 text-blue-800 border-blue-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "paid":
        return <CheckCircle className="h-4 w-4" />
      case "pending":
        return <Clock className="h-4 w-4" />
      case "overdue":
        return <AlertCircle className="h-4 w-4" />
      case "scheduled":
        return <Calendar className="h-4 w-4" />
      default:
        return <Receipt className="h-4 w-4" />
    }
  }

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.2,
      },
    },
  }

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.5 },
    },
  }

  return (
    <motion.div className="space-y-8" variants={containerVariants} initial="hidden" animate="visible">
      {/* Header */}
      <motion.div variants={itemVariants}>
        <div className="bg-gradient-to-r from-green-500 to-emerald-500 rounded-2xl p-6 text-white">
          <h1 className="text-3xl font-poppins font-bold mb-2 flex items-center">
            <CreditCard className="h-8 w-8 mr-3" />
            Billing & Payments
          </h1>
          <p className="text-green-100 text-lg">Manage your tuition payments and billing information</p>
        </div>
      </motion.div>

      {/* Next Payment Due */}
      <motion.div variants={itemVariants}>
        <Card className="bg-purple-50 border-purple-200">
          <CardContent className="p-6 flex flex-col sm:flex-row items-center justify-center text-center sm:text-left sm:justify-between gap-4">
            <div className="flex items-center gap-4">
              <Calendar className="h-10 w-10 text-purple-600 flex-shrink-0" />
              <div>
                <h3 className="font-semibold text-purple-800">Next Payment Due</h3>
                <p className="text-lg font-medium text-purple-900">{mockData.nextPaymentDue.description}</p>
              </div>
            </div>
            <div className="text-center sm:text-right">
              <p className="text-2xl font-bold text-purple-900">${mockData.nextPaymentDue.amount}</p>
              <p className="text-sm text-purple-600">on {mockData.nextPaymentDue.date}</p>
            </div>
          </CardContent>
        </Card>
      </motion.div>

      {/* Main Content Tabs */}
      <motion.div variants={itemVariants}>
        <Tabs defaultValue="overview" className="space-y-6">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="history">Payment History</TabsTrigger>
            <TabsTrigger value="make-payment">Make Payment</TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg font-poppins">Upcoming Payments</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {mockData.upcomingPayments.map((payment, index) => (
                    <motion.div key={index} className="flex items-center justify-between p-4 rounded-xl bg-gray-50" initial={{ opacity: 0, x: -20 }} animate={{ opacity: 1, x: 0 }} transition={{ duration: 0.3, delay: index * 0.1 }}>
                      <div className="flex items-center space-x-4">
                        <div className="p-2 bg-white rounded-lg shadow-sm">{getStatusIcon(payment.status)}</div>
                        <div>
                          <h4 className="font-medium text-gray-900">{payment.description}</h4>
                          <p className="text-sm text-gray-500">{payment.date}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <p className="font-semibold text-gray-900">${payment.amount}</p>
                        <Badge variant="outline" className={getStatusColor(payment.status)}>{payment.status}</Badge>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="history" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg font-poppins">Payment History</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {mockData.paymentHistory.map((payment, index) => (
                    <motion.div key={payment.id} className="flex items-center justify-between p-4 rounded-xl border" initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3, delay: index * 0.1 }}>
                      <div className="flex items-center space-x-4">
                        <div className="p-2 bg-green-100 rounded-lg"><Receipt className="h-5 w-5 text-green-600" /></div>
                        <div>
                          <h4 className="font-medium text-gray-900">{payment.description}</h4>
                          <div className="flex items-center space-x-4 text-sm text-gray-500">
                            <span>Invoice: {payment.id}</span><span>‚Ä¢</span><span>{payment.date}</span>
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-4">
                        <div className="text-right">
                          <p className="font-semibold text-gray-900">${payment.amount}</p>
                          <Badge variant="outline" className={getStatusColor(payment.status)}>{payment.status}</Badge>
                        </div>
                        <Button variant="ghost" size="sm"><Download className="h-4 w-4" /></Button>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="make-payment" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg font-poppins">Make a Payment</CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="amount">Payment Amount</Label>
                      <Input id="amount" type="number" placeholder="450.00" defaultValue="450.00" className="text-lg" />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="description">Payment Description</Label>
                      <Input id="description" placeholder="February 2024 Tuition" defaultValue="February 2024 Tuition"/>
                    </div>
                  </div>
                  <div className="bg-gray-50 rounded-xl p-6">
                    <h3 className="font-semibold text-gray-900 mb-4">Payment Summary</h3>
                    <div className="space-y-3">
                      <div className="flex justify-between"><span className="text-gray-600">Tuition Amount:</span><span className="font-medium">$450.00</span></div>
                      <div className="flex justify-between"><span className="text-gray-600">Processing Fee:</span><span className="font-medium">$0.00</span></div>
                      <div className="border-t pt-3"><div className="flex justify-between"><span className="font-semibold">Total:</span><span className="font-bold text-lg">$450.00</span></div></div>
                    </div>
                  </div>
                </div>
                <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                  <Button className="w-full h-12 bg-gradient-to-r from-emerald-600 to-teal-600 hover:from-emerald-700 hover:to-teal-700 text-lg">
                    <Shield className="h-5 w-5 mr-2" />
                    Process Secure Payment
                  </Button>
                </motion.div>
                <div className="text-center text-sm text-gray-500">
                  <Shield className="h-4 w-4 inline mr-1" />
                  Your payment information is encrypted and secure
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </motion.div>
    </motion.div>
  )
}
//END OF app\parent\billing\page.tsx

//START OF app\parent\layout.tsx
// app/parent/layout.tsx
"use client"

import type React from "react"

import { PortalSidebar } from "@/components/portal-sidebar"
import { useRequireAuth } from "@/hooks/use-auth"
import { LayoutDashboard, TrendingUp, Megaphone, CreditCard, Heart, Calendar } from "lucide-react"

const navigation = [
  {
    title: "Overview",
    items: [
      {
        title: "Dashboard",
        href: "/parent",
        icon: LayoutDashboard,
      },
    ],
  },
  {
    title: "Monitoring",
    items: [
      {
        title: "Progress Reports",
        href: "/parent/progress",
        icon: TrendingUp,
      },
      {
        title: "Attendance",
        href: "/parent/attendance",
        icon: Calendar,
      },
      {
        title: "Announcements",
        href: "/parent/announcements",
        icon: Megaphone,
      },
    ],
  },
  {
    title: "Account",
    items: [
      {
        title: "Billing",
        href: "/parent/billing",
        icon: CreditCard,
      },
    ],
  },
]

const colorScheme = {
  primary: "from-emerald-500",
  secondary: "to-teal-600",
  accent: "emerald-400",
  gradient: "from-emerald-500 to-teal-600",
}

export default function ParentLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const { user, isLoading } = useRequireAuth(["parent"])

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-600"></div>
      </div>
    )
  }

  if (!user) {
    return null
  }

  return (
    <div className="flex h-screen bg-gray-50">
      <PortalSidebar
        title="Parent Portal"
        subtitle="Family Dashboard"
        icon={Heart}
        navigation={navigation}
        colorScheme={colorScheme}
      />
      <main className="flex-1 overflow-y-auto lg:ml-0">
        <div className="p-8">{children}</div>
      </main>
    </div>
  )
}
//END OF app\parent\layout.tsx

//START OF app\parent\page.tsx
// app/parent/page.tsx
"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  Bell,
  CheckCircle,
  TrendingUp,
  BookOpen,
  CalendarCheck,
  FileText,
  AlertTriangle,
  ArrowRight,
} from "lucide-react"
import { motion } from "framer-motion"
import Link from "next/link"
import { AnimatedCounter } from "@/components/animated-counter"

export default function ParentDashboard() {
  const [currentChild, setCurrentChild] = useState("Emma Johnson")
  const children = ["Emma Johnson", "Liam Johnson"] // Mock data for multiple children

  const mockData = {
    "Emma Johnson": {
      keyMetrics: {
        overallGrade: 88,
        attendanceRate: 98,
        upcomingDeadlines: 3,
      },
      courses: [
        { name: "ICT Course", grade: 92, trend: "up" },
        { name: "Mathematics Course", grade: 85, trend: "stable" },
      ],
      upcoming: [
        { type: "Assignment", title: "Web Portfolio Project", due: "3 days" },
        { type: "Exam", title: "Calculus Mid-term", due: "5 days" },
        { type: "Quiz", title: "Network Security Quiz", due: "6 days" },
      ],
      attendanceAlerts: [{ type: "Unexcused Absence", date: "Yesterday" }],
      recentAnnouncements: [
        { id: 1, title: "Term 2 Assessment Schedule Released", priority: "high" },
        { id: 2, title: "Parent-Teacher Conference Invitations", priority: "medium" },
      ],
    },
    // Mock data for a second child
    "Liam Johnson": {
      keyMetrics: {
        overallGrade: 91,
        attendanceRate: 100,
        upcomingDeadlines: 2,
      },
      courses: [
        { name: "Intro to Programming", grade: 94, trend: "up" },
        { name: "Algebra II", grade: 88, trend: "up" },
      ],
      upcoming: [
        { type: "Project", title: "Python Game Final Project", due: "1 week" },
        { type: "Test", title: "Algebra Chapter 5 Test", due: "2 weeks" },
      ],
      attendanceAlerts: [],
      recentAnnouncements: [{ id: 1, title: "School Robotics Club Sign-ups", priority: "low" }],
    },
  }

  const selectedChildData = mockData[currentChild as keyof typeof mockData]

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { staggerChildren: 0.1 },
    },
  }

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
  }

  const getTrendIcon = (trend: string) => {
    if (trend === "up") return <TrendingUp className="h-4 w-4 text-green-500" />
    if (trend === "down") return <TrendingUp className="h-4 w-4 text-red-500 rotate-180" />
    return <div className="h-1 w-4 bg-gray-400 rounded-full" />
  }

  return (
    <motion.div className="space-y-8" variants={containerVariants} initial="hidden" animate="visible">
      {/* Header & Child Switcher */}
      <motion.div variants={itemVariants}>
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
          <div>
            <h1 className="text-3xl font-poppins font-bold text-gray-900">Parent Dashboard</h1>
            <p className="text-gray-600 mt-2">
              Viewing dashboard for <span className="font-semibold">{currentChild}</span>
            </p>
          </div>
          <div className="mt-4 sm:mt-0">
            <Select value={currentChild} onValueChange={setCurrentChild}>
              <SelectTrigger className="w-full sm:w-[200px]">
                <SelectValue placeholder="Select a child" />
              </SelectTrigger>
              <SelectContent>
                {children.map((child) => (
                  <SelectItem key={child} value={child}>
                    {child}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
      </motion.div>

      {/* Key Metrics */}
      <motion.div variants={itemVariants} className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {[
          {
            title: "Overall Grade",
            value: selectedChildData.keyMetrics.overallGrade,
            suffix: "%",
            icon: TrendingUp,
            color: "from-emerald-500 to-teal-500",
          },
          {
            title: "Attendance Rate",
            value: selectedChildData.keyMetrics.attendanceRate,
            suffix: "%",
            icon: CalendarCheck,
            color: "from-blue-500 to-cyan-500",
          },
          {
            title: "Upcoming Deadlines",
            value: selectedChildData.keyMetrics.upcomingDeadlines,
            icon: FileText,
            color: "from-purple-500 to-pink-500",
          },
        ].map((stat) => (
          <Card key={stat.title}>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">{stat.title}</p>
                  <div className="text-3xl font-bold text-gray-900 mt-1">
                    <AnimatedCounter end={stat.value} suffix={stat.suffix} />
                  </div>
                </div>
                <div className={`p-3 rounded-xl bg-gradient-to-br ${stat.color}`}>
                  <stat.icon className="h-6 w-6 text-white" />
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </motion.div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div className="lg:col-span-2 space-y-8">
          {/* Course Overview */}
          <motion.div variants={itemVariants}>
            <Card>
              <CardHeader>
                <CardTitle>Course Overview</CardTitle>
                <CardDescription>Summary of {currentChild}'s current courses.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {selectedChildData.courses.map((course) => (
                  <div key={course.name} className="flex items-center justify-between p-4 border rounded-lg">
                    <div className="flex items-center space-x-3">
                      <div className="p-2 bg-gray-100 rounded-lg">
                        <BookOpen className="h-5 w-5 text-gray-600" />
                      </div>
                      <div>
                        <h4 className="font-medium text-gray-900">{course.name}</h4>
                        <div className="flex items-center text-sm text-gray-500">
                          Current Grade: <span className="font-semibold text-gray-700 ml-1">{course.grade}%</span>
                          <span className="ml-2">{getTrendIcon(course.trend)}</span>
                        </div>
                      </div>
                    </div>
                    <Link href="/parent/progress">
                      <Button variant="outline" size="sm">
                        View Progress <ArrowRight className="ml-2 h-4 w-4" />
                      </Button>
                    </Link>
                  </div>
                ))}
              </CardContent>
            </Card>
          </motion.div>

          {/* Upcoming Work */}
          <motion.div variants={itemVariants}>
            <Card>
              <CardHeader>
                <CardTitle>Upcoming Deadlines (Next 7 Days)</CardTitle>
                <CardDescription>Upcoming assignments, quizzes, and exams.</CardDescription>
              </CardHeader>
              <CardContent>
                {selectedChildData.upcoming.length > 0 ? (
                  <ul className="space-y-3">
                    {selectedChildData.upcoming.map((item) => (
                      <li key={item.title} className="flex items-center justify-between">
                        <div className="flex items-center space-x-2">
                          <Badge variant="outline">{item.type}</Badge>
                          <span className="font-medium">{item.title}</span>
                        </div>
                        <span className="text-sm text-gray-600">Due in {item.due}</span>
                      </li>
                    ))}
                  </ul>
                ) : (
                  <p className="text-sm text-gray-500">No deadlines in the next week.</p>
                )}
              </CardContent>
            </Card>
          </motion.div>
        </div>

        <div className="space-y-8">
          {/* Attendance Alerts */}
          <motion.div variants={itemVariants}>
            <Card>
              <CardHeader>
                <CardTitle>Attendance Alerts</CardTitle>
              </CardHeader>
              <CardContent>
                {selectedChildData.attendanceAlerts.length > 0 ? (
                  <ul className="space-y-3">
                    {selectedChildData.attendanceAlerts.map((alert, index) => (
                      <li key={index} className="flex items-center space-x-3 text-red-600">
                        <AlertTriangle className="h-5 w-5" />
                        <div>
                          <p className="font-semibold">{alert.type}</p>
                          <p className="text-sm">{alert.date}</p>
                        </div>
                      </li>
                    ))}
                  </ul>
                ) : (
                  <div className="flex items-center space-x-3 text-green-600">
                    <CheckCircle className="h-5 w-5" />
                    <p>No attendance issues.</p>
                  </div>
                )}
                <Link href="/parent/attendance" className="mt-4 block">
                  <Button variant="outline" className="w-full">
                    View Full Record
                  </Button>
                </Link>
              </CardContent>
            </Card>
          </motion.div>

          {/* Recent Announcements */}
          <motion.div variants={itemVariants}>
            <Card>
              <CardHeader>
                <CardTitle>Recent Announcements</CardTitle>
              </CardHeader>
              <CardContent>
                {selectedChildData.recentAnnouncements.length > 0 ? (
                  <ul className="space-y-3">
                    {selectedChildData.recentAnnouncements.map((ann) => (
                      <li key={ann.id} className="flex items-start space-x-3">
                        <div className="mt-1">
                          <Bell className="h-4 w-4 text-gray-500" />
                        </div>
                        <p className="text-sm font-medium">{ann.title}</p>
                      </li>
                    ))}
                  </ul>
                ) : (
                  <p className="text-sm text-gray-500">No new announcements.</p>
                )}
                <Link href="/parent/announcements" className="mt-4 block">
                  <Button variant="outline" className="w-full">
                    View All
                  </Button>
                </Link>
              </CardContent>
            </Card>
          </motion.div>
        </div>
      </div>
    </motion.div>
  )
}
//END OF app\parent\page.tsx

//START OF app\parent\profile\page.tsx
"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { User, Mail, Phone, MapPin, Calendar, Edit, Save, X, Camera, Shield, Bell, GraduationCap } from "lucide-react"
import { motion } from "framer-motion"

export default function ProfilePage() {
  const [isEditing, setIsEditing] = useState(false)
  const [profileData, setProfileData] = useState({
    firstName: "Sarah",
    lastName: "Johnson",
    email: "parent.test@example.com",
    phone: "+1 (555) 123-4567",
    address: "123 Main Street",
    city: "Springfield",
    state: "IL",
    zipCode: "62701",
    emergencyContact: "John Johnson",
    emergencyPhone: "+1 (555) 987-6543",
    relationship: "Spouse",
    bio: "Dedicated parent committed to supporting my child's educational journey. I believe in the importance of technology and mathematics education for future success.",
  })

  const childInfo = {
    name: "Emma Johnson",
    studentId: "STU-2024-001",
    grade: "10th Grade",
    enrollmentDate: "2024-01-08",
    courses: ["ICT Course", "Mathematics Course"],
    emergencyContact: "Sarah Johnson",
    medicalInfo: "No known allergies",
  }

  const handleInputChange = (field: string, value: string) => {
    setProfileData((prev) => ({ ...prev, [field]: value }))
  }

  const handleSave = () => {
    setIsEditing(false)
    // Here you would typically save to backend
    console.log("Saving profile data:", profileData)
  }

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.2,
      },
    },
  }

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.5 },
    },
  }

  return (
    <motion.div className="space-y-8" variants={containerVariants} initial="hidden" animate="visible">
      {/* Header */}
      <motion.div variants={itemVariants}>
        <div className="bg-gradient-to-r from-indigo-500 to-purple-500 rounded-2xl p-6 text-white">
          <h1 className="text-3xl font-poppins font-bold mb-2 flex items-center">
            <User className="h-8 w-8 mr-3" />
            My Profile
          </h1>
          <p className="text-indigo-100 text-lg">Manage your personal information and account settings</p>
        </div>
      </motion.div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Profile Card */}
        <motion.div variants={itemVariants} className="lg:col-span-1">
          <Card>
            <CardHeader className="text-center">
              <div className="relative mx-auto">
                <Avatar className="h-24 w-24 mx-auto">
                  <AvatarImage src="/placeholder.svg?height=96&width=96" alt="Profile" />
                  <AvatarFallback className="bg-emerald-100 text-emerald-700 text-2xl">
                    {profileData.firstName[0]}
                    {profileData.lastName[0]}
                  </AvatarFallback>
                </Avatar>
                <motion.button
                  className="absolute bottom-0 right-0 p-2 bg-emerald-500 text-white rounded-full shadow-lg hover:bg-emerald-600 transition-colors"
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                >
                  <Camera className="h-4 w-4" />
                </motion.button>
              </div>
              <CardTitle className="text-xl font-poppins mt-4">
                {profileData.firstName} {profileData.lastName}
              </CardTitle>
              <CardDescription>Parent Account</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="text-center">
                <Badge variant="secondary" className="bg-emerald-100 text-emerald-800">
                  Active Parent
                </Badge>
              </div>
              <div className="space-y-3 text-sm">
                <div className="flex items-center space-x-2">
                  <Mail className="h-4 w-4 text-gray-400" />
                  <span className="text-gray-600">{profileData.email}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Phone className="h-4 w-4 text-gray-400" />
                  <span className="text-gray-600">{profileData.phone}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <MapPin className="h-4 w-4 text-gray-400" />
                  <span className="text-gray-600">
                    {profileData.city}, {profileData.state}
                  </span>
                </div>
                <div className="flex items-center space-x-2">
                  <Calendar className="h-4 w-4 text-gray-400" />
                  <span className="text-gray-600">Member since Jan 2024</span>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Child Information Card */}
          <Card className="mt-6">
            <CardHeader>
              <CardTitle className="text-lg font-poppins flex items-center">
                <GraduationCap className="h-5 w-5 mr-2 text-emerald-600" />
                Child Information
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h4 className="font-medium text-gray-900">{childInfo.name}</h4>
                <p className="text-sm text-gray-500">Student ID: {childInfo.studentId}</p>
              </div>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">Grade:</span>
                  <span className="font-medium">{childInfo.grade}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Enrolled:</span>
                  <span className="font-medium">{childInfo.enrollmentDate}</span>
                </div>
                <div>
                  <span className="text-gray-600">Courses:</span>
                  <div className="mt-1 space-y-1">
                    {childInfo.courses.map((course, index) => (
                      <Badge key={index} variant="outline" className="mr-1">
                        {course}
                      </Badge>
                    ))}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Main Content */}
        <motion.div variants={itemVariants} className="lg:col-span-2">
          <Tabs defaultValue="personal" className="space-y-6">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="personal">Personal Info</TabsTrigger>
              <TabsTrigger value="emergency">Emergency Contact</TabsTrigger>
              <TabsTrigger value="preferences">Preferences</TabsTrigger>
            </TabsList>

            <TabsContent value="personal" className="space-y-6">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between">
                  <div>
                    <CardTitle className="text-lg font-poppins">Personal Information</CardTitle>
                    <CardDescription>Update your personal details and contact information</CardDescription>
                  </div>
                  <div className="flex space-x-2">
                    {isEditing ? (
                      <>
                        <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                          <Button variant="outline" size="sm" onClick={() => setIsEditing(false)}>
                            <X className="h-4 w-4 mr-2" />
                            Cancel
                          </Button>
                        </motion.div>
                        <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                          <Button size="sm" onClick={handleSave}>
                            <Save className="h-4 w-4 mr-2" />
                            Save
                          </Button>
                        </motion.div>
                      </>
                    ) : (
                      <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                        <Button variant="outline" size="sm" onClick={() => setIsEditing(true)}>
                          <Edit className="h-4 w-4 mr-2" />
                          Edit
                        </Button>
                      </motion.div>
                    )}
                  </div>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="firstName">First Name</Label>
                      <Input
                        id="firstName"
                        value={profileData.firstName}
                        onChange={(e) => handleInputChange("firstName", e.target.value)}
                        disabled={!isEditing}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="lastName">Last Name</Label>
                      <Input
                        id="lastName"
                        value={profileData.lastName}
                        onChange={(e) => handleInputChange("lastName", e.target.value)}
                        disabled={!isEditing}
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="email">Email Address</Label>
                      <Input
                        id="email"
                        type="email"
                        value={profileData.email}
                        onChange={(e) => handleInputChange("email", e.target.value)}
                        disabled={!isEditing}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="phone">Phone Number</Label>
                      <Input
                        id="phone"
                        value={profileData.phone}
                        onChange={(e) => handleInputChange("phone", e.target.value)}
                        disabled={!isEditing}
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="address">Address</Label>
                    <Input
                      id="address"
                      value={profileData.address}
                      onChange={(e) => handleInputChange("address", e.target.value)}
                      disabled={!isEditing}
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="city">City</Label>
                      <Input
                        id="city"
                        value={profileData.city}
                        onChange={(e) => handleInputChange("city", e.target.value)}
                        disabled={!isEditing}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="state">State</Label>
                      <Input
                        id="state"
                        value={profileData.state}
                        onChange={(e) => handleInputChange("state", e.target.value)}
                        disabled={!isEditing}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="zipCode">ZIP Code</Label>
                      <Input
                        id="zipCode"
                        value={profileData.zipCode}
                        onChange={(e) => handleInputChange("zipCode", e.target.value)}
                        disabled={!isEditing}
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="bio">Bio</Label>
                    <Textarea
                      id="bio"
                      value={profileData.bio}
                      onChange={(e) => handleInputChange("bio", e.target.value)}
                      disabled={!isEditing}
                      rows={4}
                      placeholder="Tell us a bit about yourself..."
                    />
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="emergency" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg font-poppins flex items-center">
                    <Shield className="h-5 w-5 mr-2 text-emerald-600" />
                    Emergency Contact Information
                  </CardTitle>
                  <CardDescription>Provide emergency contact details for your child's safety</CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="emergencyContact">Emergency Contact Name</Label>
                      <Input
                        id="emergencyContact"
                        value={profileData.emergencyContact}
                        onChange={(e) => handleInputChange("emergencyContact", e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="emergencyPhone">Emergency Phone</Label>
                      <Input
                        id="emergencyPhone"
                        value={profileData.emergencyPhone}
                        onChange={(e) => handleInputChange("emergencyPhone", e.target.value)}
                      />
                    </div>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="relationship">Relationship to Child</Label>
                    <Input
                      id="relationship"
                      value={profileData.relationship}
                      onChange={(e) => handleInputChange("relationship", e.target.value)}
                    />
                  </div>
                  <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                    <Button className="bg-gradient-to-r from-emerald-600 to-teal-600">Update Emergency Contact</Button>
                  </motion.div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="preferences" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg font-poppins flex items-center">
                    <Bell className="h-5 w-5 mr-2 text-emerald-600" />
                    Notification Preferences
                  </CardTitle>
                  <CardDescription>
                    Choose how you'd like to receive updates about your child's progress
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="space-y-4">
                    {[
                      { id: "progress", label: "Progress Reports", description: "Weekly progress updates" },
                      { id: "announcements", label: "Announcements", description: "Important program updates" },
                      { id: "billing", label: "Billing Notifications", description: "Payment reminders and receipts" },
                      {
                        id: "events",
                        label: "Events & Meetings",
                        description: "Parent-teacher conferences and events",
                      },
                    ].map((pref, index) => (
                      <motion.div
                        key={pref.id}
                        className="flex items-center justify-between p-4 rounded-xl bg-gray-50"
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.3, delay: index * 0.1 }}
                      >
                        <div>
                          <h4 className="font-medium text-gray-900">{pref.label}</h4>
                          <p className="text-sm text-gray-500">{pref.description}</p>
                        </div>
                        <div className="flex space-x-2">
                          <Button variant="outline" size="sm">
                            Email
                          </Button>
                          <Button variant="outline" size="sm">
                            SMS
                          </Button>
                        </div>
                      </motion.div>
                    ))}
                  </div>
                  <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                    <Button className="bg-gradient-to-r from-emerald-600 to-teal-600">Save Preferences</Button>
                  </motion.div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </motion.div>
      </div>
    </motion.div>
  )
}

//END OF app\parent\profile\page.tsx

//START OF app\parent\progress\page.tsx
// app/parent/progress/page.tsx
"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  TrendingUp,
  BookOpen,
  CheckCircle,
  XCircle,
  Clock,
  Download,
  BarChart3,
  FileText,
  Percent,
} from "lucide-react"
import { motion } from "framer-motion"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Button } from "@/components/ui/button"

export default function ChildProgressPage() {
  const mockData = {
    courses: [
      {
        id: "ict",
        name: "ICT Course",
        overallGrade: 92,
        gradeTrend: "up",
        gradeBreakdown: [
          { category: "Homework", weight: 20, score: 95 },
          { category: "Quizzes", weight: 30, score: 88 },
          { category: "Mid-term Exam", weight: 20, score: 90 },
          { category: "Final Project", weight: 30, score: 94 },
        ],
        assignments: [
          { id: 1, title: "HTML Basics", status: "graded", grade: "95/100" },
          { id: 2, title: "CSS Styling", status: "graded", grade: "92/100" },
          { id: 3, title: "JS Fundamentals", status: "on time", grade: "Pending" },
          { id: 4, title: "Web Portfolio Project", status: "missing", grade: "0/100" },
        ],
        assessments: [
          { id: 1, title: "Networking Quiz", score: 85, total: 100, classAvg: 78 },
          { id: 2, title: "Mid-term Exam", score: 90, total: 100, classAvg: 82 },
        ],
      },
      {
        id: "math",
        name: "Mathematics Course",
        overallGrade: 85,
        gradeTrend: "stable",
        gradeBreakdown: [
          { category: "Homework", weight: 30, score: 88 },
          { category: "Quizzes", weight: 40, score: 82 },
          { category: "Final Exam", weight: 30, score: 87 },
        ],
        assignments: [
          { id: 1, title: "Algebra Problem Set", status: "graded", grade: "88/100" },
          { id: 2, title: "Geometry Proofs", status: "graded", grade: "90/100" },
          { id: 3, title: "Calculus Derivatives", status: "on time", grade: "Pending" },
        ],
        assessments: [
          { id: 1, title: "Trigonometry Quiz", score: 80, total: 100, classAvg: 75 },
          { id: 2, title: "Statistics Test", score: 84, total: 100, classAvg: 80 },
        ],
      },
    ],
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "graded":
      case "on time":
        return <CheckCircle className="h-4 w-4 text-green-500" />
      case "missing":
        return <XCircle className="h-4 w-4 text-red-500" />
      case "late":
        return <Clock className="h-4 w-4 text-yellow-500" />
      default:
        return null
    }
  }

  const TrendGraph = () => (
    <div className="h-20 w-full bg-gray-50 rounded-lg flex items-end p-2">
      <div className="w-full h-full flex items-end space-x-2">
        {[4, 5, 5, 6, 7, 8, 7, 9].map((height, i) => (
          <div key={i} className="w-full bg-emerald-200 rounded-t-sm" style={{ height: `${height * 10}%` }}></div>
        ))}
      </div>
    </div>
  )

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { staggerChildren: 0.1 } },
  }

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
  }

  return (
    <motion.div className="space-y-8" variants={containerVariants} initial="hidden" animate="visible">
      {/* Header */}
      <motion.div variants={itemVariants}>
        <div className="bg-gradient-to-r from-blue-500 to-purple-500 rounded-2xl p-6 text-white">
          <h1 className="text-3xl font-poppins font-bold mb-2">Academic Progress</h1>
          <p className="text-blue-100 text-lg">Detailed view of grades, assignments, and reports for Emma Johnson</p>
        </div>
      </motion.div>

      <Tabs defaultValue="ict" className="space-y-6">
        <TabsList className="grid w-full grid-cols-2">
          {mockData.courses.map((course) => (
            <TabsTrigger key={course.id} value={course.id}>
              {course.name}
            </TabsTrigger>
          ))}
        </TabsList>

        {mockData.courses.map((course) => (
          <TabsContent key={course.id} value={course.id} className="space-y-6">
            {/* Grade Overview */}
            <motion.div variants={itemVariants}>
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <TrendingUp className="h-5 w-5 mr-2 text-emerald-600" />
                    Overall Grade & Trend
                  </CardTitle>
                </CardHeader>
                <CardContent className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="flex flex-col items-center justify-center p-6 bg-gray-50 rounded-xl">
                    <p className="text-6xl font-bold text-emerald-600">{course.overallGrade}</p>
                    <p className="text-lg font-medium text-gray-700">Overall Grade</p>
                  </div>
                  <div className="md:col-span-2">
                    <p className="font-medium mb-2">Performance Trend (Semester)</p>
                    <TrendGraph />
                  </div>
                </CardContent>
              </Card>
            </motion.div>

            {/* Grade Breakdown */}
            <motion.div variants={itemVariants}>
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Percent className="h-5 w-5 mr-2 text-emerald-600" />
                    Grade Breakdown
                  </CardTitle>
                  <CardDescription>How the overall grade is calculated.</CardDescription>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-4">
                    {course.gradeBreakdown.map((item) => (
                      <li key={item.category}>
                        <div className="flex justify-between text-sm mb-1">
                          <span className="font-medium">
                            {item.category} ({item.weight}%)
                          </span>
                          <span className="text-gray-600">Avg. Score: {item.score}%</span>
                        </div>
                        <Progress value={item.score} />
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            </motion.div>

            {/* Assignments & Assessments */}
            <motion.div variants={itemVariants}>
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <BookOpen className="h-5 w-5 mr-2 text-emerald-600" />
                    Assignments & Assessments
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <h3 className="font-semibold mb-2">Assignments</h3>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Title</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Grade</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {course.assignments.map((item) => (
                        <TableRow key={item.id}>
                          <TableCell>{item.title}</TableCell>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              {getStatusIcon(item.status)}
                              <span className="capitalize">{item.status}</span>
                            </div>
                          </TableCell>
                          <TableCell>{item.grade}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>

                  <h3 className="font-semibold mt-6 mb-2">Assessments</h3>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Title</TableHead>
                        <TableHead>Score</TableHead>
                        <TableHead>Class Average</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {course.assessments.map((item) => (
                        <TableRow key={item.id}>
                          <TableCell>{item.title}</TableCell>
                          <TableCell>
                            {item.score}/{item.total} ({Math.round((item.score / item.total) * 100)}%)
                          </TableCell>
                          <TableCell>{item.classAvg}%</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            </motion.div>

            {/* Official Reports */}
            <motion.div variants={itemVariants}>
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <FileText className="h-5 w-5 mr-2 text-emerald-600" />
                    Official Reports
                  </CardTitle>
                  <CardDescription>Download official academic documents.</CardDescription>
                </CardHeader>
                <CardContent className="flex flex-col sm:flex-row gap-4">
                  <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                    <Button variant="outline" className="w-full">
                      <Download className="mr-2 h-4 w-4" />
                      Download Term 1 Report Card (PDF)
                    </Button>
                  </motion.div>
                  <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                    <Button variant="outline" className="w-full">
                      <Download className="mr-2 h-4 w-4" />
                      Download Mid-Term Progress Report (PDF)
                    </Button>
                  </motion.div>
                </CardContent>
              </Card>
            </motion.div>
          </TabsContent>
        ))}
      </Tabs>
    </motion.div>
  )
}
//END OF app\parent\progress\page.tsx

//START OF app\parent\settings\page.tsx
// app/parent/settings/page.tsx
"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Switch } from "@/components/ui/switch"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Settings, Shield, Eye, EyeOff, Key, Bell, Globe, CheckCircle, Percent } from "lucide-react"
import { motion, AnimatePresence } from "framer-motion"

export default function SettingsPage() {
  const [showCurrentPassword, setShowCurrentPassword] = useState(false)
  const [showNewPassword, setShowNewPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  const [passwordData, setPasswordData] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: "",
  })
  const [isChangingPassword, setIsChangingPassword] = useState(false)
  const [passwordChangeSuccess, setPasswordChangeSuccess] = useState(false)

  const [notificationPreferences, setNotificationPreferences] = useState({
    gradeThreshold: 80,
    gradeAlerts: true,
    attendanceAlerts: true,
    weeklySummary: false,
  })

  const [preferences, setPreferences] = useState({
    language: "en",
    autoLogout: true,
  })

  const handlePasswordChange = async () => {
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      alert("New passwords don't match!")
      return
    }

    setIsChangingPassword(true)

    // Simulate API call
    setTimeout(() => {
      setIsChangingPassword(false)
      setPasswordChangeSuccess(true)
      setPasswordData({
        currentPassword: "",
        newPassword: "",
        confirmPassword: "",
      })

      // Hide success message after 3 seconds
      setTimeout(() => setPasswordChangeSuccess(false), 3000)
    }, 1000)
  }

  const handlePreferenceChange = (key: string, value: any) => {
    setPreferences((prev) => ({ ...prev, [key]: value }))
  }

  const handleNotificationChange = (key: string, value: any) => {
    setNotificationPreferences((prev) => ({ ...prev, [key]: value }))
  }

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.2,
      },
    },
  }

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.5 },
    },
  }

  return (
    <motion.div className="space-y-8" variants={containerVariants} initial="hidden" animate="visible">
      {/* Header */}
      <motion.div variants={itemVariants}>
        <div className="bg-gradient-to-r from-gray-700 to-gray-900 rounded-2xl p-6 text-white">
          <h1 className="text-3xl font-poppins font-bold mb-2 flex items-center">
            <Settings className="h-8 w-8 mr-3" />
            Account Settings
          </h1>
          <p className="text-gray-300 text-lg">Manage your account security and preferences</p>
        </div>
      </motion.div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div className="space-y-8">
          {/* Notification Preferences */}
          <motion.div variants={itemVariants}>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg font-poppins flex items-center">
                  <Bell className="h-5 w-5 mr-2 text-emerald-600" />
                  Notification Preferences
                </CardTitle>
                <CardDescription>Customize how you receive alerts and updates.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="gradeAlerts">Grade Alerts</Label>
                    <p className="text-sm text-gray-500">Notify me if a grade drops below a threshold.</p>
                  </div>
                  <Switch
                    id="gradeAlerts"
                    checked={notificationPreferences.gradeAlerts}
                    onCheckedChange={(checked) => handleNotificationChange("gradeAlerts", checked)}
                  />
                </div>
                {notificationPreferences.gradeAlerts && (
                  <div className="space-y-2 pl-4 border-l-2 ml-2">
                    <Label htmlFor="gradeThreshold">Grade Threshold (%)</Label>
                    <div className="relative">
                      <Input
                        id="gradeThreshold"
                        type="number"
                        value={notificationPreferences.gradeThreshold}
                        onChange={(e) => handleNotificationChange("gradeThreshold", Number.parseInt(e.target.value))}
                        className="pl-8"
                      />
                      <Percent className="absolute left-2 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
                    </div>
                  </div>
                )}
                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="attendanceAlerts">Attendance Alerts</Label>
                    <p className="text-sm text-gray-500">Notify me for any unexcused absence or tardy.</p>
                  </div>
                  <Switch
                    id="attendanceAlerts"
                    checked={notificationPreferences.attendanceAlerts}
                    onCheckedChange={(checked) => handleNotificationChange("attendanceAlerts", checked)}
                  />
                </div>
                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="weeklySummary">Weekly Summary Email</Label>
                    <p className="text-sm text-gray-500">Receive a summary of your child's progress each week.</p>
                  </div>
                  <Switch
                    id="weeklySummary"
                    checked={notificationPreferences.weeklySummary}
                    onCheckedChange={(checked) => handleNotificationChange("weeklySummary", checked)}
                  />
                </div>
              </CardContent>
            </Card>
          </motion.div>

          {/* General Preferences */}
          <motion.div variants={itemVariants}>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg font-poppins flex items-center">
                  <Globe className="h-5 w-5 mr-2 text-emerald-600" />
                  Preferences
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="language">Language</Label>
                  <select
                    id="language"
                    className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                    value={preferences.language}
                    onChange={(e) => handlePreferenceChange("language", e.target.value)}
                  >
                    <option value="en">English</option>
                    <option value="es">Spanish</option>
                    <option value="fr">French</option>
                  </select>
                </div>
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium text-gray-900">Auto Logout</h4>
                    <p className="text-sm text-gray-500">Automatically log out after 30 minutes of inactivity</p>
                  </div>
                  <Switch
                    checked={preferences.autoLogout}
                    onCheckedChange={(checked) => handlePreferenceChange("autoLogout", checked)}
                  />
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </div>

        {/* Security Settings */}
        <div className="space-y-8">
          <motion.div variants={itemVariants}>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg font-poppins flex items-center">
                  <Shield className="h-5 w-5 mr-2 text-emerald-600" />
                  Security
                </CardTitle>
                <CardDescription>Manage your password and account security</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <AnimatePresence>
                  {passwordChangeSuccess && (
                    <motion.div
                      initial={{ opacity: 0, y: -10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                    >
                      <Alert className="border-green-200 bg-green-50">
                        <CheckCircle className="h-4 w-4 text-green-600" />
                        <AlertDescription className="text-green-800">Password changed successfully!</AlertDescription>
                      </Alert>
                    </motion.div>
                  )}
                </AnimatePresence>
                <h4 className="font-medium text-gray-900">Change Password</h4>
                <div className="space-y-2">
                  <Label htmlFor="currentPassword">Current Password</Label>
                  <div className="relative">
                    <Input id="currentPassword" type={showCurrentPassword ? "text" : "password"} value={passwordData.currentPassword} onChange={(e) => setPasswordData((prev) => ({ ...prev, currentPassword: e.target.value }))} placeholder="Enter current password" className="pr-10"/>
                    <motion.button type="button" className="absolute right-3 top-1/2 transform -translate-y-1/2" onClick={() => setShowCurrentPassword(!showCurrentPassword)} whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.9 }}>
                      {showCurrentPassword ? (<EyeOff className="h-4 w-4 text-gray-400" />) : (<Eye className="h-4 w-4 text-gray-400" />)}
                    </motion.button>
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="newPassword">New Password</Label>
                  <div className="relative">
                    <Input id="newPassword" type={showNewPassword ? "text" : "password"} value={passwordData.newPassword} onChange={(e) => setPasswordData((prev) => ({ ...prev, newPassword: e.target.value }))} placeholder="Enter new password" className="pr-10"/>
                    <motion.button type="button" className="absolute right-3 top-1/2 transform -translate-y-1/2" onClick={() => setShowNewPassword(!showNewPassword)} whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.9 }}>
                      {showNewPassword ? (<EyeOff className="h-4 w-4 text-gray-400" />) : (<Eye className="h-4 w-4 text-gray-400" />)}
                    </motion.button>
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="confirmPassword">Confirm New Password</Label>
                  <div className="relative">
                    <Input id="confirmPassword" type={showConfirmPassword ? "text" : "password"} value={passwordData.confirmPassword} onChange={(e) => setPasswordData((prev) => ({ ...prev, confirmPassword: e.target.value }))} placeholder="Confirm new password" className="pr-10"/>
                    <motion.button type="button" className="absolute right-3 top-1/2 transform -translate-y-1/2" onClick={() => setShowConfirmPassword(!showConfirmPassword)} whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.9 }}>
                      {showConfirmPassword ? (<EyeOff className="h-4 w-4 text-gray-400" />) : (<Eye className="h-4 w-4 text-gray-400" />)}
                    </motion.button>
                  </div>
                </div>
                <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                  <Button onClick={handlePasswordChange} disabled={isChangingPassword || !passwordData.currentPassword || !passwordData.newPassword || !passwordData.confirmPassword} className="w-full bg-gradient-to-r from-emerald-600 to-teal-600">
                    <AnimatePresence mode="wait">
                      {isChangingPassword ? (
                        <motion.div key="loading" initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="flex items-center">
                          <motion.div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2" animate={{ rotate: 360 }} transition={{ duration: 1, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}/>
                          Changing Password...
                        </motion.div>
                      ) : (
                        <motion.div key="change" initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="flex items-center">
                          <Key className="h-4 w-4 mr-2" />
                          Change Password
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </Button>
                </motion.div>
              </CardContent>
            </Card>
          </motion.div>
        </div>
      </div>
    </motion.div>
  )
}
//END OF app\parent\settings\page.tsx

//START OF app\student\announcements\loading.tsx
export default function Loading() {
  return null
}

//END OF app\student\announcements\loading.tsx

//START OF app\student\announcements\page.tsx
"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Bell, Search, Clock, BookOpen, AlertCircle, CheckCircle, Info } from "lucide-react"
import { useState } from "react"
import { motion } from "framer-motion"

// Mock data
const announcements = [
  {
    id: "1",
    title: "New ICT Module Released: Database Design Principles",
    content:
      "We're excited to announce the release of Module 10: Database Design Principles. This comprehensive module covers entity-relationship modeling, normalization techniques, and best practices for creating efficient database structures. The module includes both theoretical concepts and practical exercises to help you master database design. Access the module through your course dashboard and don't forget to join the discussion forum for any questions.",
    date: "2024-01-15T10:30:00Z",
    course: "ICT Fundamentals",
    priority: "high",
    type: "course_update",
    author: "Dr. Sarah Johnson",
    read: false,
  },
  {
    id: "2",
    title: "Math Assignment Due Reminder",
    content:
      "This is a friendly reminder that your calculus problem set is due this Friday, January 19th at 11:59 PM. The assignment covers integration techniques and applications that we've discussed in recent modules. If you're having trouble with any problems, please join our Math Lab Help session on Tuesday at 2:00 PM or post your questions in the forum.",
    date: "2024-01-14T14:15:00Z",
    course: "Advanced Mathematics",
    priority: "medium",
    type: "assignment",
    author: "Prof. Michael Chen",
    read: true,
  },
  {
    id: "3",
    title: "Physics Lab Session Rescheduled",
    content:
      "Due to technical maintenance in our virtual lab environment, this week's Physics lab session has been rescheduled from Wednesday 3:00 PM to Thursday 3:00 PM. The session will cover Newton's Laws practical applications and include interactive simulations. Please update your calendars accordingly and ensure you have the latest lab materials downloaded.",
    date: "2024-01-13T09:45:00Z",
    course: "Physics Fundamentals",
    priority: "low",
    type: "schedule_change",
    author: "Dr. Emily Rodriguez",
    read: true,
  },
  {
    id: "4",
    title: "Welcome to the New Semester!",
    content:
      "Welcome back, students! We're thrilled to start this new semester with you. This term brings exciting updates to our platform, including enhanced video quality, new interactive features, and improved discussion forums. We've also added more practice problems and real-world case studies to help you apply your learning. Don't forget to check your course schedules and mark important dates in your calendar.",
    date: "2024-01-10T08:00:00Z",
    course: "General",
    priority: "medium",
    type: "general",
    author: "Academic Team",
    read: true,
  },
  {
    id: "5",
    title: "System Maintenance Scheduled",
    content:
      "We will be performing scheduled system maintenance on Sunday, January 21st from 2:00 AM to 6:00 AM EST. During this time, the platform may be temporarily unavailable. We recommend downloading any materials you need in advance. All live sessions scheduled during this time have been moved to alternative time slots. Thank you for your patience as we work to improve our services.",
    date: "2024-01-12T16:20:00Z",
    course: "General",
    priority: "high",
    type: "maintenance",
    author: "Technical Team",
    read: false,
  },
]

export default function AnnouncementsPage() {
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedPriority, setSelectedPriority] = useState("all")
  const [selectedCourse, setSelectedCourse] = useState("all")

  const filteredAnnouncements = announcements.filter((announcement) => {
    const matchesSearch =
      announcement.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      announcement.content.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesPriority = selectedPriority === "all" || announcement.priority === selectedPriority
    const matchesCourse = selectedCourse === "all" || announcement.course === selectedCourse
    return matchesSearch && matchesPriority && matchesCourse
  })

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case "high":
        return <AlertCircle className="h-4 w-4" />
      case "medium":
        return <Info className="h-4 w-4" />
      case "low":
        return <CheckCircle className="h-4 w-4" />
      default:
        return <Info className="h-4 w-4" />
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "high":
        return "border-red-200 bg-red-50"
      case "medium":
        return "border-yellow-200 bg-yellow-50"
      case "low":
        return "border-green-200 bg-green-50"
      default:
        return "border-gray-200 bg-gray-50"
    }
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "course_update":
        return <BookOpen className="h-4 w-4" />
      case "assignment":
        return <Clock className="h-4 w-4" />
      case "schedule_change":
        return <Clock className="h-4 w-4" />
      case "maintenance":
        return <AlertCircle className="h-4 w-4" />
      default:
        return <Bell className="h-4 w-4" />
    }
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    const now = new Date()
    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60))

    if (diffInHours < 1) return "Just now"
    if (diffInHours < 24) return `${diffInHours} hours ago`
    if (diffInHours < 48) return "Yesterday"
    return date.toLocaleDateString()
  }

  const courses = ["all", ...Array.from(new Set(announcements.map((a) => a.course)))]

  return (
    <div className="space-y-6">
      {/* Header */}
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Announcements</h1>
            <p className="text-gray-600 mt-1">Stay updated with the latest news and updates</p>
          </div>
          <div className="text-right">
            <div className="text-2xl font-bold text-[var(--color-gossamer-600)]">
              {announcements.filter((a) => !a.read).length}
            </div>
            <div className="text-sm text-gray-500">Unread</div>
          </div>
        </div>
      </motion.div>

      {/* Filters */}
      <motion.div
        className="flex flex-col sm:flex-row gap-4"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.1 }}
      >
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
          <Input
            placeholder="Search announcements..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>

        <div className="flex gap-2">
          <select
            value={selectedPriority}
            onChange={(e) => setSelectedPriority(e.target.value)}
            className="px-3 py-2 border rounded-md text-sm"
          >
            <option value="all">All Priorities</option>
            <option value="high">High</option>
            <option value="medium">Medium</option>
            <option value="low">Low</option>
          </select>

          <select
            value={selectedCourse}
            onChange={(e) => setSelectedCourse(e.target.value)}
            className="px-3 py-2 border rounded-md text-sm"
          >
            {courses.map((course) => (
              <option key={course} value={course}>
                {course === "all" ? "All Courses" : course}
              </option>
            ))}
          </select>
        </div>
      </motion.div>

      {/* Announcements List - Removed tags and share buttons */}
      <motion.div
        className="space-y-4"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.2 }}
      >
        {filteredAnnouncements.map((announcement, index) => (
          <motion.div
            key={announcement.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.4, delay: index * 0.05 }}
          >
            <Card
              className={`${getPriorityColor(announcement.priority)} ${!announcement.read ? "ring-2 ring-[var(--color-gossamer-300)]" : ""}`}
            >
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex items-start space-x-3">
                    <div
                      className={`p-2 rounded-lg ${
                        announcement.priority === "high"
                          ? "bg-red-100 text-red-600"
                          : announcement.priority === "medium"
                            ? "bg-yellow-100 text-yellow-600"
                            : "bg-green-100 text-green-600"
                      }`}
                    >
                      {getTypeIcon(announcement.type)}
                    </div>
                    <div>
                      <CardTitle className="text-lg">{announcement.title}</CardTitle>
                      <CardDescription className="flex items-center mt-1">
                        <span>by {announcement.author}</span>
                        <span className="mx-2">‚Ä¢</span>
                        <span>{formatDate(announcement.date)}</span>
                      </CardDescription>
                    </div>
                  </div>

                  <div className="flex items-center space-x-2">
                    {!announcement.read && (
                      <Badge variant="default" className="bg-[var(--color-gossamer-600)]">
                        New
                      </Badge>
                    )}
                    <Badge
                      variant={
                        announcement.priority === "high"
                          ? "destructive"
                          : announcement.priority === "medium"
                            ? "default"
                            : "secondary"
                      }
                      className="flex items-center space-x-1"
                    >
                      {getPriorityIcon(announcement.priority)}
                      <span className="capitalize">{announcement.priority}</span>
                    </Badge>
                  </div>
                </div>
              </CardHeader>

              <CardContent>
                <p className="text-gray-700 mb-4">{announcement.content}</p>

                <div className="flex items-center justify-between">
                  <Badge variant="outline">{announcement.course}</Badge>
                  <div className="flex items-center space-x-2">
                    {!announcement.read && (
                      <Button variant="outline" size="sm">
                        Mark as Read
                      </Button>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        ))}
      </motion.div>

      {filteredAnnouncements.length === 0 && (
        <motion.div
          className="text-center py-12"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.6 }}
        >
          <Bell className="mx-auto h-12 w-12 text-gray-400 mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No announcements found</h3>
          <p className="text-gray-600">Try adjusting your search or filter criteria.</p>
        </motion.div>
      )}
    </div>
  )
}

//END OF app\student\announcements\page.tsx

//START OF app\student\billing\page.tsx
"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  CreditCard,
  Download,
  Calendar,
  DollarSign,
  CheckCircle,
  AlertCircle,
  Clock,
  Receipt,
  Plus,
} from "lucide-react"
import { motion } from "framer-motion"

// Mock data
const billingInfo = {
  currentPlan: "Premium Student Plan",
  monthlyFee: 149.99,
  nextBilling: "2024-02-15",
  status: "active",
  paymentMethod: {
    type: "card",
    last4: "4242",
    brand: "Visa",
    expiryMonth: 12,
    expiryYear: 2025,
  },
}

const paymentHistory = [
  {
    id: "inv_001",
    date: "2024-01-15",
    amount: 149.99,
    status: "paid",
    description: "Premium Student Plan - January 2024",
    downloadUrl: "#",
  },
  {
    id: "inv_002",
    date: "2023-12-15",
    amount: 149.99,
    status: "paid",
    description: "Premium Student Plan - December 2023",
    downloadUrl: "#",
  },
  {
    id: "inv_003",
    date: "2023-11-15",
    amount: 149.99,
    status: "paid",
    description: "Premium Student Plan - November 2023",
    downloadUrl: "#",
  },
  {
    id: "inv_004",
    date: "2023-10-15",
    amount: 149.99,
    status: "paid",
    description: "Premium Student Plan - October 2023",
    downloadUrl: "#",
  },
]

const plans = [
  {
    name: "Basic Plan",
    price: 99.99,
    features: ["Access to 2 courses", "Basic video lectures", "Email support", "Monthly progress reports"],
    current: false,
  },
  {
    name: "Premium Student Plan",
    price: 149.99,
    features: [
      "Access to all courses",
      "HD video lectures",
      "Live Q&A sessions",
      "Priority support",
      "Weekly progress reports",
      "Discussion forum access",
      "Downloadable resources",
    ],
    current: true,
    popular: true,
  },
  {
    name: "Advanced Plan",
    price: 199.99,
    features: [
      "Everything in Premium",
      "1-on-1 tutoring sessions",
      "Custom study plans",
      "Advanced analytics",
      "Certificate programs",
    ],
    current: false,
  },
]

export default function StudentBillingPage() {
  const getStatusColor = (status: string) => {
    switch (status) {
      case "paid":
        return "text-green-600 bg-green-100"
      case "pending":
        return "text-yellow-600 bg-yellow-100"
      case "failed":
        return "text-red-600 bg-red-100"
      default:
        return "text-gray-600 bg-gray-100"
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "paid":
        return <CheckCircle className="h-4 w-4" />
      case "pending":
        return <Clock className="h-4 w-4" />
      case "failed":
        return <AlertCircle className="h-4 w-4" />
      default:
        return <Clock className="h-4 w-4" />
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Billing & Payments</h1>
            <p className="text-gray-600 mt-1">Manage your subscription and payment history</p>
          </div>
        </div>
      </motion.div>

      {/* Current Plan Overview */}
      <motion.div
        className="grid grid-cols-1 md:grid-cols-3 gap-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.1 }}
      >
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <CreditCard className="h-8 w-8 text-[var(--color-gossamer-600)]" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Current Plan</p>
                <p className="text-xl font-bold">{billingInfo.currentPlan}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <DollarSign className="h-8 w-8 text-green-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Monthly Fee</p>
                <p className="text-xl font-bold">${billingInfo.monthlyFee}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <Calendar className="h-8 w-8 text-blue-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Next Billing</p>
                <p className="text-xl font-bold">{new Date(billingInfo.nextBilling).toLocaleDateString()}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </motion.div>

      {/* Billing Tabs */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.2 }}
      >
        <Tabs defaultValue="overview" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="history">Payment History</TabsTrigger>
            <TabsTrigger value="plans">Plans</TabsTrigger>
            <TabsTrigger value="payment-methods">Payment Methods</TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Current Subscription */}
              <Card>
                <CardHeader>
                  <CardTitle>Current Subscription</CardTitle>
                  <CardDescription>Your active plan details</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="font-medium">{billingInfo.currentPlan}</span>
                    <Badge className="bg-[var(--color-gossamer-100)] text-[var(--color-gossamer-800)]">Active</Badge>
                  </div>

                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Monthly Fee</span>
                      <span className="font-medium">${billingInfo.monthlyFee}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Next Billing Date</span>
                      <span className="font-medium">{new Date(billingInfo.nextBilling).toLocaleDateString()}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Status</span>
                      <span className="font-medium capitalize">{billingInfo.status}</span>
                    </div>
                  </div>

                  <div className="pt-4 border-t space-y-2">
                    <Button variant="outline" className="w-full">
                      Change Plan
                    </Button>
                    <Button variant="outline" className="w-full text-red-600 hover:text-red-700">
                      Cancel Subscription
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* Payment Method */}
              <Card>
                <CardHeader>
                  <CardTitle>Payment Method</CardTitle>
                  <CardDescription>Your default payment method</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex items-center space-x-4 p-4 border rounded-lg">
                    <CreditCard className="h-8 w-8 text-gray-400" />
                    <div>
                      <p className="font-medium">
                        {billingInfo.paymentMethod.brand} ending in {billingInfo.paymentMethod.last4}
                      </p>
                      <p className="text-sm text-gray-600">
                        Expires {billingInfo.paymentMethod.expiryMonth}/{billingInfo.paymentMethod.expiryYear}
                      </p>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Button variant="outline" className="w-full">
                      Update Payment Method
                    </Button>
                    <Button variant="outline" className="w-full">
                      <Plus className="mr-2 h-4 w-4" />
                      Add Payment Method
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Recent Invoices */}
            <Card>
              <CardHeader>
                <CardTitle>Recent Invoices</CardTitle>
                <CardDescription>Your latest payment history</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {paymentHistory.slice(0, 3).map((payment) => (
                    <div key={payment.id} className="flex items-center justify-between p-4 border rounded-lg">
                      <div className="flex items-center space-x-3">
                        <Receipt className="h-5 w-5 text-gray-400" />
                        <div>
                          <p className="font-medium">{payment.description}</p>
                          <p className="text-sm text-gray-600">{new Date(payment.date).toLocaleDateString()}</p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-3">
                        <Badge className={getStatusColor(payment.status)}>
                          {getStatusIcon(payment.status)}
                          <span className="ml-1 capitalize">{payment.status}</span>
                        </Badge>
                        <span className="font-medium">${payment.amount}</span>
                        <Button variant="outline" size="sm">
                          <Download className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
                <Button variant="outline" className="w-full mt-4">
                  View All Invoices
                </Button>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="history" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Payment History</CardTitle>
                <CardDescription>Complete history of your payments and invoices</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {paymentHistory.map((payment) => (
                    <div
                      key={payment.id}
                      className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors"
                    >
                      <div className="flex items-center space-x-4">
                        <Receipt className="h-5 w-5 text-gray-400" />
                        <div>
                          <p className="font-medium">{payment.description}</p>
                          <p className="text-sm text-gray-600">Invoice #{payment.id}</p>
                          <p className="text-sm text-gray-600">{new Date(payment.date).toLocaleDateString()}</p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-4">
                        <Badge className={getStatusColor(payment.status)}>
                          {getStatusIcon(payment.status)}
                          <span className="ml-1 capitalize">{payment.status}</span>
                        </Badge>
                        <span className="font-medium text-lg">${payment.amount}</span>
                        <Button variant="outline" size="sm">
                          <Download className="mr-2 h-4 w-4" />
                          Download
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="plans" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Available Plans</CardTitle>
                <CardDescription>Choose the plan that best fits your learning needs</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  {plans.map((plan) => (
                    <div
                      key={plan.name}
                      className={`relative p-6 border rounded-lg ${
                        plan.current ? "ring-2 ring-[var(--color-gossamer-500)] bg-[var(--color-gossamer-50)]" : ""
                      }`}
                    >
                      {plan.popular && (
                        <Badge className="absolute -top-2 left-1/2 transform -translate-x-1/2 bg-[var(--color-gossamer-600)]">
                          Most Popular
                        </Badge>
                      )}

                      <div className="text-center mb-4">
                        <h3 className="text-lg font-semibold">{plan.name}</h3>
                        <div className="mt-2">
                          <span className="text-3xl font-bold">${plan.price}</span>
                          <span className="text-gray-600">/month</span>
                        </div>
                      </div>

                      <ul className="space-y-2 mb-6">
                        {plan.features.map((feature, index) => (
                          <li key={index} className="flex items-center text-sm">
                            <CheckCircle className="h-4 w-4 text-green-500 mr-2" />
                            {feature}
                          </li>
                        ))}
                      </ul>

                      <Button
                        className={`w-full ${
                          plan.current ? "bg-[var(--color-gossamer-600)] hover:bg-[var(--color-gossamer-700)]" : ""
                        }`}
                        variant={plan.current ? "default" : "outline"}
                        disabled={plan.current}
                      >
                        {plan.current ? "Current Plan" : "Upgrade"}
                      </Button>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="payment-methods" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Payment Methods</CardTitle>
                <CardDescription>Manage your saved payment methods</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Current Payment Method */}
                <div className="flex items-center justify-between p-4 border rounded-lg bg-[var(--color-gossamer-50)]">
                  <div className="flex items-center space-x-4">
                    <CreditCard className="h-8 w-8 text-[var(--color-gossamer-600)]" />
                    <div>
                      <p className="font-medium">
                        {billingInfo.paymentMethod.brand} ending in {billingInfo.paymentMethod.last4}
                      </p>
                      <p className="text-sm text-gray-600">
                        Expires {billingInfo.paymentMethod.expiryMonth}/{billingInfo.paymentMethod.expiryYear}
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Badge className="bg-[var(--color-gossamer-100)] text-[var(--color-gossamer-800)]">Default</Badge>
                    <Button variant="outline" size="sm">
                      Edit
                    </Button>
                  </div>
                </div>

                {/* Add New Payment Method */}
                <div className="flex items-center justify-center p-8 border-2 border-dashed border-gray-300 rounded-lg">
                  <div className="text-center">
                    <Plus className="mx-auto h-8 w-8 text-gray-400 mb-2" />
                    <p className="text-gray-600 mb-4">Add a new payment method</p>
                    <Button>
                      <Plus className="mr-2 h-4 w-4" />
                      Add Payment Method
                    </Button>
                  </div>
                </div>

                {/* Billing Address */}
                <div className="pt-6 border-t">
                  <h3 className="font-semibold mb-4">Billing Address</h3>
                  <div className="p-4 border rounded-lg">
                    <p className="font-medium">Emma Johnson</p>
                    <p className="text-gray-600">456 Oak Street</p>
                    <p className="text-gray-600">Springfield, IL 62701</p>
                    <p className="text-gray-600">United States</p>
                    <Button variant="outline" size="sm" className="mt-3">
                      Edit Address
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </motion.div>
    </div>
  )
}

//END OF app\student\billing\page.tsx

//START OF app\student\forum\loading.tsx
export default function Loading() {
  return null
}

//END OF app\student\forum\loading.tsx

//START OF app\student\forum\page.tsx
"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { MessageSquare, Search, Plus, TrendingUp, Pin, ArrowRight } from "lucide-react"
import Link from "next/link"
import { useState } from "react"
import { motion } from "framer-motion"

// Mock data
const courseForums = [
  {
    id: "ict-101",
    name: "ICT Fundamentals Forum",
    description: "Discuss ICT concepts, ask questions, and share insights",
    totalTopics: 45,
    totalPosts: 234,
    lastActivity: "2 hours ago",
    color: "from-blue-500 to-cyan-500",
    participants: 28,
  },
  {
    id: "math-201",
    name: "Advanced Mathematics Forum",
    description: "Mathematical discussions, problem solving, and study groups",
    totalTopics: 67,
    totalPosts: 412,
    lastActivity: "1 hour ago",
    color: "from-[var(--color-gossamer-500)] to-[var(--color-gossamer-600)]",
    participants: 35,
  },
  {
    id: "physics-101",
    name: "Physics Fundamentals Forum",
    description: "Physics concepts, experiments, and theoretical discussions",
    totalTopics: 32,
    totalPosts: 189,
    lastActivity: "4 hours ago",
    color: "from-purple-500 to-pink-500",
    participants: 22,
  },
]

const recentTopics = [
  {
    id: "1",
    title: "Database Normalization Best Practices",
    author: "Emma Johnson",
    course: "ICT Fundamentals",
    replies: 12,
    lastReply: "30 minutes ago",
    isPinned: true,
    isHot: true,
  },
  {
    id: "2",
    title: "Calculus Integration Techniques Help",
    author: "Michael Chen",
    course: "Advanced Mathematics",
    replies: 8,
    lastReply: "1 hour ago",
    isPinned: false,
    isHot: true,
  },
  {
    id: "3",
    title: "Newton's Laws Practical Applications",
    author: "Sarah Wilson",
    course: "Physics Fundamentals",
    replies: 15,
    lastReply: "2 hours ago",
    isPinned: false,
    isHot: false,
  },
  {
    id: "4",
    title: "Network Security Fundamentals Discussion",
    author: "Alex Rodriguez",
    course: "ICT Fundamentals",
    replies: 6,
    lastReply: "3 hours ago",
    isPinned: false,
    isHot: false,
  },
]

export default function ForumHomePage() {
  const [searchTerm, setSearchTerm] = useState("")

  const filteredForums = courseForums.filter(
    (forum) =>
      forum.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      forum.description.toLowerCase().includes(searchTerm.toLowerCase()),
  )

  return (
    <div className="space-y-6">
      {/* Header */}
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Discussion Forum</h1>
            <p className="text-gray-600 mt-1">Connect with classmates and instructors</p>
          </div>
          <Button asChild>
            <Link href="/student/forum/create">
              <Plus className="mr-2 h-4 w-4" />
              New Topic
            </Link>
          </Button>
        </div>
      </motion.div>

      {/* Search */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.1 }}
      >
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
          <Input
            placeholder="Search forums and topics..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>
      </motion.div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Course Forums */}
        <motion.div
          className="lg:col-span-2 space-y-6"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
        >
          <Card>
            <CardHeader>
              <CardTitle>Course Forums</CardTitle>
              <CardDescription>Join discussions for your enrolled courses</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {filteredForums.map((forum, index) => (
                <motion.div
                  key={forum.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.4, delay: index * 0.1 }}
                  whileHover={{ scale: 1.02 }}
                >
                  <Card className="hover:shadow-md transition-shadow">
                    <CardContent className="p-6">
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex items-start space-x-4">
                          <div
                            className={`w-12 h-12 rounded-lg bg-gradient-to-br ${forum.color} flex items-center justify-center`}
                          >
                            <MessageSquare className="h-6 w-6 text-white" />
                          </div>
                          <div>
                            <h3 className="font-semibold text-lg">{forum.name}</h3>
                            <p className="text-gray-600 text-sm mt-1">{forum.description}</p>
                          </div>
                        </div>
                        <Button variant="outline" size="sm" asChild>
                          <Link href={`/student/forum/${forum.id}`}>
                            View Forum
                            <ArrowRight className="ml-2 h-4 w-4" />
                          </Link>
                        </Button>
                      </div>

                      <div className="grid grid-cols-4 gap-4 text-center">
                        <div>
                          <div className="text-lg font-bold text-[var(--color-gossamer-600)]">{forum.totalTopics}</div>
                          <div className="text-xs text-gray-600">Topics</div>
                        </div>
                        <div>
                          <div className="text-lg font-bold text-blue-600">{forum.totalPosts}</div>
                          <div className="text-xs text-gray-600">Posts</div>
                        </div>
                        <div>
                          <div className="text-lg font-bold text-purple-600">{forum.participants}</div>
                          <div className="text-xs text-gray-600">Members</div>
                        </div>
                        <div>
                          <div className="text-sm font-medium text-gray-900">{forum.lastActivity}</div>
                          <div className="text-xs text-gray-600">Last Activity</div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              ))}
            </CardContent>
          </Card>
        </motion.div>

        {/* Sidebar */}
        <motion.div
          className="space-y-6"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.3 }}
        >
          {/* Recent Topics */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <TrendingUp className="mr-2 h-5 w-5" />
                Recent Topics
              </CardTitle>
              <CardDescription>Latest discussions across all forums</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              {recentTopics.map((topic) => (
                <div key={topic.id} className="p-3 border rounded-lg hover:bg-gray-50 transition-colors">
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex items-center space-x-2">
                      {topic.isPinned && <Pin className="h-3 w-3 text-[var(--color-gossamer-600)]" />}
                      {topic.isHot && (
                        <Badge variant="destructive" className="text-xs">
                          Hot
                        </Badge>
                      )}
                    </div>
                  </div>
                  <h4 className="font-medium text-sm mb-1 line-clamp-2">{topic.title}</h4>
                  <div className="flex items-center justify-between text-xs text-gray-600">
                    <span>by {topic.author}</span>
                    <span>{topic.replies} replies</span>
                  </div>
                  <div className="flex items-center justify-between mt-2">
                    <Badge variant="outline" className="text-xs">
                      {topic.course}
                    </Badge>
                    <span className="text-xs text-gray-500">{topic.lastReply}</span>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Forum Stats */}
          <Card>
            <CardHeader>
              <CardTitle>Forum Statistics</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="text-center p-4 border rounded-lg">
                <div className="text-2xl font-bold text-[var(--color-gossamer-600)]">144</div>
                <div className="text-sm text-gray-600">Total Topics</div>
              </div>
              <div className="text-center p-4 border rounded-lg">
                <div className="text-2xl font-bold text-blue-600">835</div>
                <div className="text-sm text-gray-600">Total Posts</div>
              </div>
              <div className="text-center p-4 border rounded-lg">
                <div className="text-2xl font-bold text-purple-600">85</div>
                <div className="text-sm text-gray-600">Active Members</div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </div>
  )
}

//END OF app\student\forum\page.tsx

//START OF app\student\layout.tsx
"use client"

import type React from "react"

import { PortalSidebar } from "@/components/portal-sidebar"
import { useRequireAuth } from "@/hooks/use-auth"
import { BookOpen, Calendar, MessageSquare, GraduationCap } from "lucide-react"

const navigation = [
  {
    title: "Learning",
    items: [
      {
        title: "My Courses",
        href: "/student/courses",
        icon: BookOpen,
      },
      {
        title: "Schedule",
        href: "/student/schedule",
        icon: Calendar,
      },
    ],
  },
  {
    title: "Community",
    items: [
      {
        title: "Discussion Forum",
        href: "/student/forum",
        icon: MessageSquare,
      },
    ],
  },
]

const colorScheme = {
  primary: "from-gossamer-500",
  secondary: "to-gossamer-600",
  accent: "gossamer-400",
  gradient: "from-gossamer-500 to-gossamer-600",
}

export default function StudentLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const { user, loading } = useRequireAuth(["student"])

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gossamer-600"></div>
      </div>
    )
  }

  if (!user) {
    return null
  }

  return (
    <div className="flex h-screen bg-gray-50">
      <PortalSidebar
        title="Student Portal"
        subtitle="Learning Dashboard"
        icon={GraduationCap}
        navigation={navigation}
        colorScheme={colorScheme}
      />
      <main className="flex-1 overflow-y-auto lg:ml-0">
        <div className="p-8">{children}</div>
      </main>
    </div>
  )
}

//END OF app\student\layout.tsx

//START OF app\student\page.tsx
// app/student/page.tsx
"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { BookOpen, Calendar, Clock, MessageSquare, TrendingUp, Bell, ArrowRight } from "lucide-react"
import Link from "next/link"
import { useAuth } from "@/hooks/use-auth"
import { motion } from "framer-motion"

// Mock data
const enrolledCourses = [
  {
    id: "ict-101",
    name: "ICT Fundamentals",
    instructor: "Dr. Sarah Johnson",
    progress: 75,
    totalModules: 12,
    completedModules: 9,
    nextModule: "Database Design Principles",
    color: "from-blue-500 to-cyan-500",
  },
  {
    id: "math-201",
    name: "Advanced Mathematics",
    instructor: "Prof. Michael Chen",
    progress: 60,
    totalModules: 15,
    completedModules: 9,
    nextModule: "Calculus Applications",
    color: "from-[var(--color-gossamer-500)] to-[var(--color-gossamer-600)]",
  },
  {
    id: "physics-101",
    name: "Physics Fundamentals",
    instructor: "Dr. Emily Rodriguez",
    progress: 40,
    totalModules: 10,
    completedModules: 4,
    nextModule: "Newton's Laws of Motion",
    color: "from-purple-500 to-pink-500",
  },
]

const upcomingSessions = [
  {
    id: "1",
    title: "ICT Q&A Session",
    instructor: "Dr. Sarah Johnson",
    date: "Today",
    time: "3:00 PM",
    type: "Q&A",
    course: "ICT Fundamentals",
  },
  {
    id: "2",
    title: "Math Lab Help",
    instructor: "Alex Smith (TA)",
    date: "Tomorrow",
    time: "2:00 PM",
    type: "Lab Help",
    course: "Advanced Mathematics",
  },
]

const recentAnnouncements = [
  {
    id: "1",
    title: "New ICT Module Released",
    content: "Module 10: Database Design Principles is now available with practical exercises.",
    date: "2 hours ago",
    course: "ICT Fundamentals",
    priority: "high",
  },
  {
    id: "2",
    title: "Math Assignment Due Reminder",
    content: "Don't forget to submit your calculus problem set by Friday 11:59 PM.",
    date: "1 day ago",
    course: "Advanced Mathematics",
    priority: "medium",
  },
]

export default function StudentDashboard() {
  const { user } = useAuth()

  const firstName = user?.name?.split(" ")[0] || "Student"
  const totalProgress = Math.round(
    enrolledCourses.reduce((acc, course) => acc + course.progress, 0) / enrolledCourses.length,
  )

  return (
    <div className="space-y-6">
      {/* Welcome Header */}
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Welcome back, {firstName}! üëã</h1>
            <p className="text-gray-600 mt-1">Ready to continue your learning journey?</p>
          </div>
          <div className="text-right">
            <div className="text-2xl font-bold text-[var(--color-gossamer-600)]">{totalProgress}%</div>
            <div className="text-sm text-gray-500">Overall Progress</div>
          </div>
        </div>
      </motion.div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Enrolled Courses */}
        <motion.div
          className="lg:col-span-2"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
        >
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle>My Courses</CardTitle>
                <Button variant="outline" size="sm" asChild>
                  <Link href="/student/courses">
                    View All
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Link>
                </Button>
              </div>
              <CardDescription>Continue your learning journey</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {enrolledCourses.map((course) => (
                <motion.div
                  key={course.id}
                  className="p-4 border rounded-lg hover:shadow-md transition-shadow"
                  whileHover={{ scale: 1.02 }}
                  transition={{ type: "spring", stiffness: 300, damping: 20 }}
                >
                  <div className="flex items-start justify-between mb-3">
                    <div>
                      <h3 className="font-semibold text-gray-900">{course.name}</h3>
                      <p className="text-sm text-gray-600">{course.instructor}</p>
                    </div>
                    <Badge variant="secondary">{course.progress}%</Badge>
                  </div>

                  <div className="space-y-2">
                    <Progress value={course.progress} className="h-2" />
                    <div className="flex items-center justify-between text-sm text-gray-600">
                      <span>
                        {course.completedModules} of {course.totalModules} modules completed
                      </span>
                      <span>Next: {course.nextModule}</span>
                    </div>
                  </div>

                  <div className="flex items-center justify-between mt-4">
                    <Button variant="outline" size="sm" asChild>
                      <Link href={`/student/courses/${course.id}`}>
                        <BookOpen className="mr-2 h-4 w-4" />
                        Continue Learning
                      </Link>
                    </Button>
                    <Button variant="ghost" size="sm" asChild>
                      <Link href={`/student/forum/${course.id}`}>
                        <MessageSquare className="mr-2 h-4 w-4" />
                        Discussion
                      </Link>
                    </Button>
                  </div>
                </motion.div>
              ))}
            </CardContent>
          </Card>
        </motion.div>

        {/* Sidebar Content */}
        <motion.div
          className="space-y-6"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.3 }}
        >
          {/* Upcoming Sessions */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Calendar className="mr-2 h-5 w-5" />
                Upcoming Sessions
              </CardTitle>
              <CardDescription>Live Q&A and Lab Help sessions</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              {upcomingSessions.map((session) => (
                <div key={session.id} className="p-3 border rounded-lg">
                  <div className="flex items-start justify-between mb-2">
                    <div>
                      <h4 className="font-medium text-sm">{session.title}</h4>
                      <p className="text-xs text-gray-600">{session.instructor}</p>
                    </div>
                    <Badge variant={session.type === "Q&A" ? "default" : "secondary"} className="text-xs">
                      {session.type}
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center text-xs text-gray-600">
                      <Clock className="mr-1 h-3 w-3" />
                      {session.date} at {session.time}
                    </div>
                    <Button size="sm" variant="outline" className="h-7 text-xs">
                      Join
                    </Button>
                  </div>
                </div>
              ))}
              <Button variant="outline" size="sm" className="w-full" asChild>
                <Link href="/student/schedule">View Full Schedule</Link>
              </Button>
            </CardContent>
          </Card>

          {/* Recent Announcements */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Bell className="mr-2 h-5 w-5" />
                Recent Announcements
              </CardTitle>
              <CardDescription>Stay updated with the latest news</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              {recentAnnouncements.slice(0, 2).map((announcement) => (
                <div key={announcement.id} className="p-3 border rounded-lg">
                  <div className="flex items-start justify-between mb-2">
                    <h4 className="font-medium text-sm">{announcement.title}</h4>
                    <Badge
                      variant={
                        announcement.priority === "high"
                          ? "destructive"
                          : announcement.priority === "medium"
                            ? "default"
                            : "secondary"
                      }
                      className="text-xs"
                    >
                      {announcement.priority}
                    </Badge>
                  </div>
                  <p className="text-xs text-gray-600 mb-2">{announcement.content}</p>
                  <div className="flex items-center justify-between">
                    <span className="text-xs text-gray-500">{announcement.date}</span>
                    <span className="text-xs text-[var(--color-gossamer-600)]">{announcement.course}</span>
                  </div>
                </div>
              ))}
              <Button variant="outline" size="sm" className="w-full" asChild>
                <Link href="/student/announcements">View All Announcements</Link>
              </Button>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </div>
  )
}
//END OF app\student\page.tsx

//START OF app\student\profile\page.tsx
"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { User, Calendar, Edit, Save, X, Camera, Award, BookOpen, Clock, TrendingUp } from "lucide-react"
import { useState } from "react"
import { useAuth } from "@/hooks/use-auth"
import { motion } from "framer-motion"

// Mock data
const studentProfile = {
  id: "student-001",
  name: "Emma Johnson",
  email: "emma.johnson@example.com",
  phone: "+1 (555) 987-6543",
  address: "456 Oak Street, Springfield, IL 62701",
  dateOfBirth: "2005-03-15",
  enrollmentDate: "2024-01-01",
  studentId: "ST2024001",
  bio: "Passionate about technology and mathematics. Currently pursuing advanced studies in ICT and looking forward to a career in software development.",
  achievements: [
    { name: "Database Design Expert", date: "2024-01-10", course: "ICT Fundamentals" },
    { name: "Calculus Master", date: "2024-01-05", course: "Advanced Mathematics" },
    { name: "Perfect Attendance", date: "2024-01-01", course: "General" },
  ],
  stats: {
    totalCourses: 3,
    completedModules: 22,
    totalModules: 37,
    averageProgress: 68,
    studyHours: 45,
    forumPosts: 28,
  },
}

export default function StudentProfilePage() {
  const { user } = useAuth()
  const [isEditing, setIsEditing] = useState(false)
  const [formData, setFormData] = useState(studentProfile)

  const handleSave = () => {
    // In a real app, this would save to the backend
    setIsEditing(false)
    // Show success message
  }

  const handleCancel = () => {
    setFormData(studentProfile)
    setIsEditing(false)
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">My Profile</h1>
            <p className="text-gray-600 mt-1">Manage your personal information and view your progress</p>
          </div>
          <div className="flex items-center space-x-2">
            {isEditing ? (
              <>
                <Button variant="outline" onClick={handleCancel}>
                  <X className="mr-2 h-4 w-4" />
                  Cancel
                </Button>
                <Button onClick={handleSave}>
                  <Save className="mr-2 h-4 w-4" />
                  Save Changes
                </Button>
              </>
            ) : (
              <Button onClick={() => setIsEditing(true)}>
                <Edit className="mr-2 h-4 w-4" />
                Edit Profile
              </Button>
            )}
          </div>
        </div>
      </motion.div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Profile Information */}
        <motion.div
          className="lg:col-span-2 space-y-6"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.1 }}
        >
          {/* Basic Information */}
          <Card>
            <CardHeader>
              <CardTitle>Personal Information</CardTitle>
              <CardDescription>Your basic profile details</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Profile Picture */}
              <div className="flex items-center space-x-4">
                <div className="relative">
                  <Avatar className="h-20 w-20">
                    <AvatarImage src="/placeholder.svg?height=80&width=80" alt={formData.name} />
                    <AvatarFallback className="text-lg bg-[var(--color-gossamer-100)] text-[var(--color-gossamer-700)]">
                      {formData.name
                        .split(" ")
                        .map((n) => n[0])
                        .join("")}
                    </AvatarFallback>
                  </Avatar>
                  {isEditing && (
                    <Button
                      size="sm"
                      variant="outline"
                      className="absolute -bottom-2 -right-2 h-8 w-8 rounded-full p-0"
                    >
                      <Camera className="h-4 w-4" />
                    </Button>
                  )}
                </div>
                <div>
                  <h3 className="text-lg font-semibold">{formData.name}</h3>
                  <p className="text-gray-600">Student ID: {formData.studentId}</p>
                  <Badge variant="outline" className="mt-1">
                    Active Student
                  </Badge>
                </div>
              </div>

              {/* Form Fields */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="name">Full Name</Label>
                  <Input
                    id="name"
                    value={formData.name}
                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                    disabled={!isEditing}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="email">Email Address</Label>
                  <Input
                    id="email"
                    type="email"
                    value={formData.email}
                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                    disabled={!isEditing}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="phone">Phone Number</Label>
                  <Input
                    id="phone"
                    value={formData.phone}
                    onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                    disabled={!isEditing}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="dateOfBirth">Date of Birth</Label>
                  <Input
                    id="dateOfBirth"
                    type="date"
                    value={formData.dateOfBirth}
                    onChange={(e) => setFormData({ ...formData, dateOfBirth: e.target.value })}
                    disabled={!isEditing}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="address">Address</Label>
                <Input
                  id="address"
                  value={formData.address}
                  onChange={(e) => setFormData({ ...formData, address: e.target.value })}
                  disabled={!isEditing}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="bio">Bio</Label>
                <Textarea
                  id="bio"
                  value={formData.bio}
                  onChange={(e) => setFormData({ ...formData, bio: e.target.value })}
                  disabled={!isEditing}
                  rows={3}
                />
              </div>
            </CardContent>
          </Card>

          {/* Academic Information */}
          <Card>
            <CardHeader>
              <CardTitle>Academic Information</CardTitle>
              <CardDescription>Your enrollment and academic details</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="flex items-center space-x-3">
                  <Calendar className="h-5 w-5 text-[var(--color-gossamer-600)]" />
                  <div>
                    <p className="font-medium">Enrollment Date</p>
                    <p className="text-sm text-gray-600">{new Date(formData.enrollmentDate).toLocaleDateString()}</p>
                  </div>
                </div>

                <div className="flex items-center space-x-3">
                  <User className="h-5 w-5 text-[var(--color-gossamer-600)]" />
                  <div>
                    <p className="font-medium">Student ID</p>
                    <p className="text-sm text-gray-600">{formData.studentId}</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Sidebar */}
        <motion.div
          className="space-y-6"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
        >
          {/* Progress Overview */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <TrendingUp className="mr-2 h-5 w-5" />
                Progress Overview
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="text-center">
                <div className="text-3xl font-bold text-[var(--color-gossamer-600)]">
                  {studentProfile.stats.averageProgress}%
                </div>
                <div className="text-sm text-gray-600">Overall Progress</div>
              </div>

              <Progress value={studentProfile.stats.averageProgress} className="h-3" />

              <div className="grid grid-cols-2 gap-4 text-center">
                <div className="p-3 border rounded-lg">
                  <div className="text-lg font-bold text-blue-600">{studentProfile.stats.completedModules}</div>
                  <div className="text-xs text-gray-600">Completed</div>
                </div>
                <div className="p-3 border rounded-lg">
                  <div className="text-lg font-bold text-gray-600">{studentProfile.stats.totalModules}</div>
                  <div className="text-xs text-gray-600">Total Modules</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Learning Stats */}
          <Card>
            <CardHeader>
              <CardTitle>Learning Statistics</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <BookOpen className="h-4 w-4 text-[var(--color-gossamer-600)]" />
                  <span className="text-sm">Enrolled Courses</span>
                </div>
                <span className="font-bold">{studentProfile.stats.totalCourses}</span>
              </div>

              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Clock className="h-4 w-4 text-blue-600" />
                  <span className="text-sm">Study Hours</span>
                </div>
                <span className="font-bold">{studentProfile.stats.studyHours}h</span>
              </div>

              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <User className="h-4 w-4 text-purple-600" />
                  <span className="text-sm">Forum Posts</span>
                </div>
                <span className="font-bold">{studentProfile.stats.forumPosts}</span>
              </div>
            </CardContent>
          </Card>

          {/* Achievements */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Award className="mr-2 h-5 w-5" />
                Recent Achievements
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {studentProfile.achievements.map((achievement, index) => (
                <div key={index} className="flex items-start space-x-3 p-3 border rounded-lg">
                  <Award className="h-5 w-5 text-yellow-500 mt-0.5" />
                  <div>
                    <h4 className="font-medium text-sm">{achievement.name}</h4>
                    <p className="text-xs text-gray-600">{achievement.course}</p>
                    <p className="text-xs text-gray-500">{new Date(achievement.date).toLocaleDateString()}</p>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </div>
  )
}

//END OF app\student\profile\page.tsx

//START OF app\student\schedule\page.tsx
"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Calendar } from "@/components/ui/calendar"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { CalendarIcon, Clock, Video, Users, MapPin, Bell } from "lucide-react"
import { useState } from "react"
import { motion } from "framer-motion"

// Mock data
const upcomingSessions = [
  {
    id: "1",
    title: "ICT Q&A Session",
    instructor: "Dr. Sarah Johnson",
    course: "ICT Fundamentals",
    date: "2024-01-15",
    time: "15:00",
    duration: "60 min",
    type: "Q&A",
    location: "Virtual Room A",
    description: "Weekly Q&A session covering database design and network fundamentals",
    attendees: 24,
    maxAttendees: 30,
  },
  {
    id: "2",
    title: "Math Lab Help Session",
    instructor: "Alex Smith (TA)",
    course: "Advanced Mathematics",
    date: "2024-01-16",
    time: "14:00",
    duration: "90 min",
    type: "Lab Help",
    location: "Virtual Room B",
    description: "Hands-on help with calculus problems and integration techniques",
    attendees: 18,
    maxAttendees: 25,
  },
  {
    id: "3",
    title: "Physics Problem Solving",
    instructor: "Dr. Emily Rodriguez",
    course: "Physics Fundamentals",
    date: "2024-01-17",
    time: "16:00",
    duration: "75 min",
    type: "Q&A",
    location: "Virtual Room C",
    description: "Interactive session focusing on Newton's laws and practical applications",
    attendees: 15,
    maxAttendees: 20,
  },
  {
    id: "4",
    title: "ICT Practical Workshop",
    instructor: "Dr. Sarah Johnson",
    course: "ICT Fundamentals",
    date: "2024-01-18",
    time: "10:00",
    duration: "120 min",
    type: "Workshop",
    location: "Virtual Room A",
    description: "Hands-on database creation and management workshop",
    attendees: 20,
    maxAttendees: 25,
  },
  {
    id: "5",
    title: "Math Study Group",
    instructor: "Prof. Michael Chen",
    course: "Advanced Mathematics",
    date: "2024-01-19",
    time: "13:00",
    duration: "60 min",
    type: "Study Group",
    location: "Virtual Room D",
    description: "Collaborative problem-solving session with peer discussions",
    attendees: 12,
    maxAttendees: 15,
  },
]

const todaySessions = upcomingSessions.filter((session) => session.date === "2024-01-15")
const weekSessions = upcomingSessions.filter((session) => {
  const sessionDate = new Date(session.date)
  const today = new Date("2024-01-15")
  const weekFromNow = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000)
  return sessionDate >= today && sessionDate <= weekFromNow
})

export default function SchedulePage() {
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date("2024-01-15"))
  const [selectedView, setSelectedView] = useState("week")

  const getSessionsForDate = (date: Date) => {
    const dateString = date.toISOString().split("T")[0]
    return upcomingSessions.filter((session) => session.date === dateString)
  }

  const getTypeColor = (type: string) => {
    switch (type) {
      case "Q&A":
        return "bg-blue-100 text-blue-800"
      case "Lab Help":
        return "bg-[var(--color-gossamer-100)] text-[var(--color-gossamer-800)]"
      case "Workshop":
        return "bg-purple-100 text-purple-800"
      case "Study Group":
        return "bg-orange-100 text-orange-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Schedule & Calendar</h1>
            <p className="text-gray-600 mt-1">Manage your live sessions and study schedule</p>
          </div>
          <Button variant="outline">
            <Bell className="mr-2 h-4 w-4" />
            Notifications
          </Button>
        </div>
      </motion.div>

      {/* Quick Stats */}
      <motion.div
        className="grid grid-cols-1 md:grid-cols-4 gap-4"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.1 }}
      >
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <CalendarIcon className="h-8 w-8 text-[var(--color-gossamer-600)]" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Today's Sessions</p>
                <p className="text-2xl font-bold">{todaySessions.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <Clock className="h-8 w-8 text-blue-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">This Week</p>
                <p className="text-2xl font-bold">{weekSessions.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <Video className="h-8 w-8 text-purple-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Live Sessions</p>
                <p className="text-2xl font-bold">
                  {upcomingSessions.filter((s) => s.type === "Q&A" || s.type === "Workshop").length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <Users className="h-8 w-8 text-green-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Study Groups</p>
                <p className="text-2xl font-bold">{upcomingSessions.filter((s) => s.type === "Study Group").length}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </motion.div>

      {/* Calendar and Sessions */}
      <motion.div
        className="grid grid-cols-1 lg:grid-cols-3 gap-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.2 }}
      >
        {/* Calendar */}
        <Card>
          <CardHeader>
            <CardTitle>Calendar</CardTitle>
            <CardDescription>Select a date to view sessions</CardDescription>
          </CardHeader>
          <CardContent>
            <Calendar mode="single" selected={selectedDate} onSelect={setSelectedDate} className="rounded-md border" />
          </CardContent>
        </Card>

        {/* Sessions List */}
        <div className="lg:col-span-2">
          <Tabs value={selectedView} onValueChange={setSelectedView}>
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="today">Today</TabsTrigger>
              <TabsTrigger value="week">This Week</TabsTrigger>
              <TabsTrigger value="all">All Upcoming</TabsTrigger>
            </TabsList>

            <TabsContent value="today" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>Today's Sessions</CardTitle>
                  <CardDescription>Sessions scheduled for today</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {todaySessions.length > 0 ? (
                    todaySessions.map((session) => (
                      <motion.div
                        key={session.id}
                        className="p-4 border rounded-lg hover:shadow-md transition-shadow"
                        whileHover={{ scale: 1.02 }}
                      >
                        <div className="flex items-start justify-between mb-3">
                          <div>
                            <h3 className="font-semibold">{session.title}</h3>
                            <p className="text-sm text-gray-600">{session.instructor}</p>
                          </div>
                          <Badge className={getTypeColor(session.type)}>{session.type}</Badge>
                        </div>

                        <div className="grid grid-cols-2 gap-4 text-sm text-gray-600 mb-3">
                          <div className="flex items-center">
                            <Clock className="mr-1 h-4 w-4" />
                            {session.time} ({session.duration})
                          </div>
                          <div className="flex items-center">
                            <MapPin className="mr-1 h-4 w-4" />
                            {session.location}
                          </div>
                          <div className="flex items-center">
                            <Users className="mr-1 h-4 w-4" />
                            {session.attendees}/{session.maxAttendees} attending
                          </div>
                          <div className="flex items-center">
                            <Badge variant="outline">{session.course}</Badge>
                          </div>
                        </div>

                        <p className="text-sm text-gray-600 mb-3">{session.description}</p>

                        <div className="flex items-center justify-between">
                          <Button size="sm">
                            <Video className="mr-2 h-4 w-4" />
                            Join Session
                          </Button>
                          <Button variant="outline" size="sm">
                            Add to Calendar
                          </Button>
                        </div>
                      </motion.div>
                    ))
                  ) : (
                    <div className="text-center py-8">
                      <CalendarIcon className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                      <h3 className="text-lg font-medium text-gray-900 mb-2">No sessions today</h3>
                      <p className="text-gray-600">Enjoy your free time or catch up on course materials!</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="week" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>This Week's Sessions</CardTitle>
                  <CardDescription>All sessions for the next 7 days</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {weekSessions.map((session) => (
                    <motion.div
                      key={session.id}
                      className="p-4 border rounded-lg hover:shadow-md transition-shadow"
                      whileHover={{ scale: 1.02 }}
                    >
                      <div className="flex items-start justify-between mb-3">
                        <div>
                          <h3 className="font-semibold">{session.title}</h3>
                          <p className="text-sm text-gray-600">{session.instructor}</p>
                        </div>
                        <Badge className={getTypeColor(session.type)}>{session.type}</Badge>
                      </div>

                      <div className="grid grid-cols-2 gap-4 text-sm text-gray-600 mb-3">
                        <div className="flex items-center">
                          <CalendarIcon className="mr-1 h-4 w-4" />
                          {new Date(session.date).toLocaleDateString()}
                        </div>
                        <div className="flex items-center">
                          <Clock className="mr-1 h-4 w-4" />
                          {session.time} ({session.duration})
                        </div>
                        <div className="flex items-center">
                          <MapPin className="mr-1 h-4 w-4" />
                          {session.location}
                        </div>
                        <div className="flex items-center">
                          <Users className="mr-1 h-4 w-4" />
                          {session.attendees}/{session.maxAttendees}
                        </div>
                      </div>

                      <p className="text-sm text-gray-600 mb-3">{session.description}</p>
                      <Badge variant="outline" className="mb-3">
                        {session.course}
                      </Badge>

                      <div className="flex items-center justify-between">
                        <Button size="sm" variant="outline">
                          Set Reminder
                        </Button>
                        <Button size="sm">View Details</Button>
                      </div>
                    </motion.div>
                  ))}
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="all" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>All Upcoming Sessions</CardTitle>
                  <CardDescription>Complete list of scheduled sessions</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {upcomingSessions.map((session) => (
                    <motion.div
                      key={session.id}
                      className="p-4 border rounded-lg hover:shadow-md transition-shadow"
                      whileHover={{ scale: 1.02 }}
                    >
                      <div className="flex items-start justify-between mb-3">
                        <div>
                          <h3 className="font-semibold">{session.title}</h3>
                          <p className="text-sm text-gray-600">{session.instructor}</p>
                        </div>
                        <Badge className={getTypeColor(session.type)}>{session.type}</Badge>
                      </div>

                      <div className="grid grid-cols-2 gap-4 text-sm text-gray-600 mb-3">
                        <div className="flex items-center">
                          <CalendarIcon className="mr-1 h-4 w-4" />
                          {new Date(session.date).toLocaleDateString()}
                        </div>
                        <div className="flex items-center">
                          <Clock className="mr-1 h-4 w-4" />
                          {session.time} ({session.duration})
                        </div>
                        <div className="flex items-center">
                          <MapPin className="mr-1 h-4 w-4" />
                          {session.location}
                        </div>
                        <div className="flex items-center">
                          <Users className="mr-1 h-4 w-4" />
                          {session.attendees}/{session.maxAttendees}
                        </div>
                      </div>

                      <p className="text-sm text-gray-600 mb-3">{session.description}</p>
                      <Badge variant="outline" className="mb-3">
                        {session.course}
                      </Badge>

                      <div className="flex items-center justify-between">
                        <Button size="sm" variant="outline">
                          Set Reminder
                        </Button>
                        <Button size="sm">View Details</Button>
                      </div>
                    </motion.div>
                  ))}
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </motion.div>
    </div>
  )
}

//END OF app\student\schedule\page.tsx

//START OF app\student\settings\page.tsx
"use client"

import type React from "react"
import { useState } from "react"

const StudentSettingsPage = () => {
  const [accountPreferences, setAccountPreferences] = useState({
    language: "English",
    theme: "Light",
  })

  const [notificationSettings, setNotificationSettings] = useState({
    emailNotifications: true,
    pushNotifications: false,
  })

  const [privacySettings, setPrivacySettings] = useState({
    profileVisibility: "Public",
    dataSharing: false,
  })

  const handleAccountPreferencesChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setAccountPreferences({
      ...accountPreferences,
      [e.target.name]: e.target.value,
    })
  }

  const handleNotificationSettingsChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNotificationSettings({
      ...notificationSettings,
      [e.target.name]: e.target.checked,
    })
  }

  const handlePrivacySettingsChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setPrivacySettings({
      ...privacySettings,
      [e.target.name]: e.target.value,
    })
  }

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Student Settings</h1>

      {/* Account Preferences */}
      <div className="mb-6">
        <h2 className="text-xl font-semibold mb-2">Account Preferences</h2>
        <div className="mb-2">
          <label htmlFor="language" className="block text-gray-700 text-sm font-bold mb-2">
            Language:
          </label>
          <select
            id="language"
            name="language"
            value={accountPreferences.language}
            onChange={handleAccountPreferencesChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          >
            <option>English</option>
            <option>Spanish</option>
            <option>French</option>
          </select>
        </div>
        <div className="mb-2">
          <label htmlFor="theme" className="block text-gray-700 text-sm font-bold mb-2">
            Theme:
          </label>
          <select
            id="theme"
            name="theme"
            value={accountPreferences.theme}
            onChange={handleAccountPreferencesChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          >
            <option>Light</option>
            <option>Dark</option>
          </select>
        </div>
      </div>

      {/* Notification Settings */}
      <div className="mb-6">
        <h2 className="text-xl font-semibold mb-2">Notification Settings</h2>
        <div className="mb-2">
          <label htmlFor="emailNotifications" className="inline-flex items-center">
            <input
              type="checkbox"
              id="emailNotifications"
              name="emailNotifications"
              checked={notificationSettings.emailNotifications}
              onChange={handleNotificationSettingsChange}
              className="form-checkbox h-5 w-5 text-indigo-600"
            />
            <span className="ml-2 text-gray-700">Email Notifications</span>
          </label>
        </div>
        <div className="mb-2">
          <label htmlFor="pushNotifications" className="inline-flex items-center">
            <input
              type="checkbox"
              id="pushNotifications"
              name="pushNotifications"
              checked={notificationSettings.pushNotifications}
              onChange={handleNotificationSettingsChange}
              className="form-checkbox h-5 w-5 text-indigo-600"
            />
            <span className="ml-2 text-gray-700">Push Notifications</span>
          </label>
        </div>
      </div>

      {/* Privacy Settings */}
      <div className="mb-6">
        <h2 className="text-xl font-semibold mb-2">Privacy Settings</h2>
        <div className="mb-2">
          <label htmlFor="profileVisibility" className="block text-gray-700 text-sm font-bold mb-2">
            Profile Visibility:
          </label>
          <select
            id="profileVisibility"
            name="profileVisibility"
            value={privacySettings.profileVisibility}
            onChange={handlePrivacySettingsChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          >
            <option>Public</option>
            <option>Private</option>
            <option>Friends Only</option>
          </select>
        </div>
        <div className="mb-2">
          <label htmlFor="dataSharing" className="inline-flex items-center">
            <input
              type="checkbox"
              id="dataSharing"
              name="dataSharing"
              checked={privacySettings.dataSharing}
              onChange={handlePrivacySettingsChange}
              className="form-checkbox h-5 w-5 text-indigo-600"
            />
            <span className="ml-2 text-gray-700">Allow Data Sharing</span>
          </label>
        </div>
      </div>
    </div>
  )
}

export default StudentSettingsPage

//END OF app\student\settings\page.tsx

//START OF app\ta\forum\loading.tsx
export default function Loading() {
  return null
}

//END OF app\ta\forum\loading.tsx

//START OF app\ta\forum\page.tsx
"use client"

import { useRequireAuth } from "@/hooks/use-auth"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { MessageSquare, Search, Filter, Clock, User, Pin, Lock } from "lucide-react"
import Link from "next/link"
import { motion } from "framer-motion"
import { useState } from "react"

// Mock data for forum
const mockForumData = {
  courses: [
    {
      id: "ict-fundamentals",
      name: "ICT Fundamentals",
      totalTopics: 45,
      unansweredQuestions: 8,
      recentActivity: "2 hours ago",
    },
    {
      id: "mathematics",
      name: "Mathematics",
      totalTopics: 32,
      unansweredQuestions: 3,
      recentActivity: "4 hours ago",
    },
    {
      id: "ict-practical",
      name: "ICT Practical",
      totalTopics: 28,
      unansweredQuestions: 12,
      recentActivity: "1 hour ago",
    },
  ],
  recentQuestions: [
    {
      id: "q1",
      title: "Help with Python loops and iteration",
      course: "ICT Fundamentals",
      student: "Emma Johnson",
      timeAgo: "2 hours ago",
      priority: "high",
      replies: 0,
      status: "unanswered",
      isPinned: false,
      isLocked: false,
    },
    {
      id: "q2",
      title: "Algebra equation solving methods",
      course: "Mathematics",
      student: "Michael Chen",
      timeAgo: "4 hours ago",
      priority: "medium",
      replies: 3,
      status: "answered",
      isPinned: true,
      isLocked: false,
    },
    {
      id: "q3",
      title: "Database design best practices",
      course: "ICT Practical",
      student: "Sarah Wilson",
      timeAgo: "6 hours ago",
      priority: "low",
      replies: 5,
      status: "resolved",
      isPinned: false,
      isLocked: false,
    },
    {
      id: "q4",
      title: "JavaScript async/await confusion",
      course: "ICT Fundamentals",
      student: "David Brown",
      timeAgo: "8 hours ago",
      priority: "high",
      replies: 1,
      status: "answered",
      isPinned: false,
      isLocked: false,
    },
    {
      id: "q5",
      title: "Calculus integration problems",
      course: "Mathematics",
      student: "Lisa Garcia",
      timeAgo: "1 day ago",
      priority: "medium",
      replies: 7,
      status: "resolved",
      isPinned: false,
      isLocked: true,
    },
  ],
}

export default function TAForumPage() {
  const { user, isLoading } = useRequireAuth(["ta"])
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedCourse, setSelectedCourse] = useState("all")
  const [statusFilter, setStatusFilter] = useState("all")

  if (isLoading) {
    return <div>Loading...</div>
  }

  const filteredQuestions = mockForumData.recentQuestions.filter((question) => {
    const matchesSearch =
      question.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      question.student.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesCourse = selectedCourse === "all" || question.course === selectedCourse
    const matchesStatus = statusFilter === "all" || question.status === statusFilter

    return matchesSearch && matchesCourse && matchesStatus
  })

  const getStatusColor = (status: string) => {
    switch (status) {
      case "unanswered":
        return "destructive"
      case "answered":
        return "default"
      case "resolved":
        return "secondary"
      default:
        return "secondary"
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "high":
        return "destructive"
      case "medium":
        return "default"
      case "low":
        return "secondary"
      default:
        return "secondary"
    }
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-poppins font-bold text-gray-900">Discussion Forum</h1>
            <p className="text-gray-600 mt-1">Moderate discussions and help students with their questions.</p>
          </div>
          <Badge variant="secondary" className="bg-purple-100 text-purple-700">
            Moderator Access
          </Badge>
        </div>
      </motion.div>

      {/* Course Overview */}
      <motion.div
        className="grid grid-cols-1 md:grid-cols-3 gap-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.1 }}
      >
        {mockForumData.courses.map((course) => (
          <Card key={course.id} className="hover:shadow-lg transition-shadow">
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span className="text-lg">{course.name}</span>
                <MessageSquare className="h-5 w-5 text-purple-600" />
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">Total Topics</span>
                  <Badge variant="outline">{course.totalTopics}</Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">Unanswered</span>
                  <Badge variant={course.unansweredQuestions > 0 ? "destructive" : "secondary"}>
                    {course.unansweredQuestions}
                  </Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">Last Activity</span>
                  <span className="text-xs text-gray-500">{course.recentActivity}</span>
                </div>
                <Button asChild className="w-full mt-4" variant="outline">
                  <Link href={`/ta/forum/${course.id}`}>View Forum</Link>
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </motion.div>

      {/* Filters and Search */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Filter className="h-5 w-5" />
              Filter Questions
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                  <Input
                    placeholder="Search questions or students..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10"
                  />
                </div>
              </div>
              <Select value={selectedCourse} onValueChange={setSelectedCourse}>
                <SelectTrigger className="w-full md:w-48">
                  <SelectValue placeholder="Select course" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Courses</SelectItem>
                  {mockForumData.courses.map((course) => (
                    <SelectItem key={course.id} value={course.name}>
                      {course.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <Select value={statusFilter} onValueChange={setStatusFilter}>
                <SelectTrigger className="w-full md:w-48">
                  <SelectValue placeholder="Filter by status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Status</SelectItem>
                  <SelectItem value="unanswered">Unanswered</SelectItem>
                  <SelectItem value="answered">Answered</SelectItem>
                  <SelectItem value="resolved">Resolved</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>
      </motion.div>

      {/* Questions List */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.3 }}
      >
        <Card>
          <CardHeader>
            <CardTitle>Recent Questions</CardTitle>
            <CardDescription>
              {filteredQuestions.length} question{filteredQuestions.length !== 1 ? "s" : ""} found
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {filteredQuestions.map((question) => (
                <motion.div
                  key={question.id}
                  className="flex items-start justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors"
                  whileHover={{ scale: 1.01 }}
                  transition={{ type: "spring", stiffness: 300, damping: 20 }}
                >
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      {question.isPinned && <Pin className="h-4 w-4 text-purple-600" />}
                      {question.isLocked && <Lock className="h-4 w-4 text-gray-600" />}
                      <h4 className="font-medium text-gray-900">{question.title}</h4>
                    </div>
                    <div className="flex items-center space-x-4 mb-2">
                      <Badge variant="outline" className="text-xs">
                        {question.course}
                      </Badge>
                      <Badge variant={getStatusColor(question.status)} className="text-xs">
                        {question.status}
                      </Badge>
                      <Badge variant={getPriorityColor(question.priority)} className="text-xs">
                        {question.priority} priority
                      </Badge>
                    </div>
                    <div className="flex items-center space-x-4 text-sm text-gray-600">
                      <div className="flex items-center space-x-1">
                        <User className="h-4 w-4" />
                        <span>{question.student}</span>
                      </div>
                      <div className="flex items-center space-x-1">
                        <Clock className="h-4 w-4" />
                        <span>{question.timeAgo}</span>
                      </div>
                      <div className="flex items-center space-x-1">
                        <MessageSquare className="h-4 w-4" />
                        <span>{question.replies} replies</span>
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    {question.status === "unanswered" && (
                      <Button size="sm" variant="outline">
                        Answer
                      </Button>
                    )}
                    {question.status === "answered" && (
                      <Button size="sm" variant="outline">
                        Mark Resolved
                      </Button>
                    )}
                    <Button asChild size="sm" variant="ghost">
                      <Link href={`/ta/forum/question/${question.id}`}>View</Link>
                    </Button>
                  </div>
                </motion.div>
              ))}
            </div>
          </CardContent>
        </Card>
      </motion.div>
    </div>
  )
}

//END OF app\ta\forum\page.tsx

//START OF app\ta\layout.tsx
"use client"

import type React from "react"

import { PortalSidebar } from "@/components/portal-sidebar"
import { useRequireAuth } from "@/hooks/use-auth"
import { LayoutDashboard, MessageSquare, Users, Calendar, UserCheck } from "lucide-react"

const navigation = [
  {
    title: "Overview",
    items: [
      {
        title: "Dashboard",
        href: "/ta",
        icon: LayoutDashboard,
      },
    ],
  },
  {
    title: "Teaching",
    items: [
      {
        title: "Discussion Forum",
        href: "/ta/forum",
        icon: MessageSquare,
      },
      {
        title: "Student Management",
        href: "/ta/students",
        icon: Users,
      },
      {
        title: "TA Schedule",
        href: "/ta/schedule",
        icon: Calendar,
      },
    ],
  },
]

const colorScheme = {
  primary: "from-purple-500",
  secondary: "to-pink-600",
  accent: "purple-400",
  gradient: "from-purple-500 to-pink-600",
}

export default function TALayout({
  children,
}: {
  children: React.ReactNode
}) {
  const { user, loading } = useRequireAuth(["ta"])

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
      </div>
    )
  }

  if (!user) {
    return null
  }

  return (
    <div className="flex h-screen bg-gray-50">
      <PortalSidebar
        title="TA Portal"
        subtitle="Teaching Assistant"
        icon={UserCheck}
        navigation={navigation}
        colorScheme={colorScheme}
      />
      <main className="flex-1 overflow-y-auto lg:ml-0">
        <div className="p-8">{children}</div>
      </main>
    </div>
  )
}

//END OF app\ta\layout.tsx

//START OF app\ta\page.tsx
"use client"

import { useRequireAuth } from "@/hooks/use-auth"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Users, MessageSquare, Calendar, Clock, ArrowRight, Bell } from "lucide-react"
import Link from "next/link"
import { motion } from "framer-motion"

// Mock data for TA dashboard
const mockData = {
  studentGroups: [
    {
      id: "group-1",
      name: "ICT Fundamentals - Group A",
      studentCount: 12,
      course: "ICT Fundamentals",
      nextSession: "2024-01-15T14:00:00Z",
      pendingQuestions: 3,
    },
    {
      id: "group-2",
      name: "Mathematics - Group B",
      studentCount: 8,
      course: "Mathematics",
      nextSession: "2024-01-16T10:00:00Z",
      pendingQuestions: 1,
    },
    {
      id: "group-3",
      name: "ICT Practical - Group C",
      studentCount: 15,
      course: "ICT Practical",
      nextSession: "2024-01-17T16:00:00Z",
      pendingQuestions: 5,
    },
  ],
  forumActivity: [
    {
      id: "q1",
      title: "Help with Python loops",
      course: "ICT Fundamentals",
      student: "Emma Johnson",
      timeAgo: "2 hours ago",
      priority: "high",
      replies: 0,
    },
    {
      id: "q2",
      title: "Algebra equation solving",
      course: "Mathematics",
      student: "Michael Chen",
      timeAgo: "4 hours ago",
      priority: "medium",
      replies: 1,
    },
    {
      id: "q3",
      title: "Database design question",
      course: "ICT Practical",
      student: "Sarah Wilson",
      timeAgo: "6 hours ago",
      priority: "low",
      replies: 2,
    },
  ],
  upcomingSessions: [
    {
      id: "session-1",
      title: "ICT Q&A Session",
      course: "ICT Fundamentals",
      time: "2024-01-15T14:00:00Z",
      duration: "1 hour",
      type: "Q&A",
      students: 12,
    },
    {
      id: "session-2",
      title: "Math Problem Solving",
      course: "Mathematics",
      time: "2024-01-16T10:00:00Z",
      duration: "45 minutes",
      type: "Tutorial",
      students: 8,
    },
    {
      id: "session-3",
      title: "Lab Help Session",
      course: "ICT Practical",
      time: "2024-01-17T16:00:00Z",
      duration: "2 hours",
      type: "Lab Help",
      students: 15,
    },
  ],
  announcements: [
    {
      id: "ann-1",
      title: "New Assessment Guidelines",
      content: "Updated guidelines for student assessments have been released.",
      priority: "high",
      timeAgo: "1 day ago",
      from: "Dr. Sarah Johnson",
    },
    {
      id: "ann-2",
      title: "Office Hours Update",
      content: "Office hours have been extended for the upcoming exam period.",
      priority: "medium",
      timeAgo: "2 days ago",
      from: "Dr. Sarah Johnson",
    },
  ],
}

export default function TADashboard() {
  const { user, isLoading } = useRequireAuth(["ta"])

  if (isLoading) {
    return <div>Loading...</div>
  }

  const totalStudents = mockData.studentGroups.reduce((sum, group) => sum + group.studentCount, 0)
  const totalPendingQuestions = mockData.studentGroups.reduce((sum, group) => sum + group.pendingQuestions, 0)
  const todaySessions = mockData.upcomingSessions.filter((session) => {
    const sessionDate = new Date(session.time)
    const today = new Date()
    return sessionDate.toDateString() === today.toDateString()
  }).length

  return (
    <div className="p-6 space-y-6">
      {/* Welcome Header */}
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-poppins font-bold text-gray-900">
              Welcome back, {user?.name?.split(" ")[0]}!
            </h1>
            <p className="text-gray-600 mt-1">Here's what's happening with your student groups today.</p>
          </div>
          <div className="flex items-center space-x-2">
            <Badge variant="secondary" className="bg-purple-100 text-purple-700">
              Teaching Assistant
            </Badge>
          </div>
        </div>
      </motion.div>

      {/* Stats Overview */}
      <motion.div
        className="grid grid-cols-1 md:grid-cols-4 gap-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.1 }}
      >
        <Card className="bg-gradient-to-br from-purple-500 to-pink-500 text-white border-0">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-purple-100">Total Students</p>
                <p className="text-3xl font-bold">{totalStudents}</p>
              </div>
              <Users className="h-8 w-8 text-purple-200" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-blue-500 to-cyan-500 text-white border-0">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-blue-100">Pending Questions</p>
                <p className="text-3xl font-bold">{totalPendingQuestions}</p>
              </div>
              <MessageSquare className="h-8 w-8 text-blue-200" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-green-500 to-emerald-500 text-white border-0">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-green-100">Today's Sessions</p>
                <p className="text-3xl font-bold">{todaySessions}</p>
              </div>
              <Calendar className="h-8 w-8 text-green-200" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-orange-500 to-red-500 text-white border-0">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-orange-100">Student Groups</p>
                <p className="text-3xl font-bold">{mockData.studentGroups.length}</p>
              </div>
              <Users className="h-8 w-8 text-orange-200" />
            </div>
          </CardContent>
        </Card>
      </motion.div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Student Groups */}
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <Card className="h-fit">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="flex items-center gap-2">
                    <Users className="h-5 w-5 text-purple-600" />
                    My Student Groups
                  </CardTitle>
                  <CardDescription>Assigned student groups and their status</CardDescription>
                </div>
                <Button asChild variant="outline" size="sm">
                  <Link href="/ta/students">
                    View All
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Link>
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {mockData.studentGroups.map((group) => (
                <div
                  key={group.id}
                  className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors"
                >
                  <div className="flex-1">
                    <h4 className="font-medium text-gray-900">{group.name}</h4>
                    <p className="text-sm text-gray-600">{group.studentCount} students</p>
                    <p className="text-xs text-gray-500">
                      Next session: {new Date(group.nextSession).toLocaleDateString()}
                    </p>
                  </div>
                  <div className="flex items-center space-x-2">
                    {group.pendingQuestions > 0 && (
                      <Badge variant="destructive" className="text-xs">
                        {group.pendingQuestions} pending
                      </Badge>
                    )}
                    <Button asChild variant="ghost" size="sm">
                      <Link href={`/ta/students/${group.id}`}>
                        <ArrowRight className="h-4 w-4" />
                      </Link>
                    </Button>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </motion.div>

        {/* Forum Activity */}
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5, delay: 0.3 }}
        >
          <Card className="h-fit">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="flex items-center gap-2">
                    <MessageSquare className="h-5 w-5 text-blue-600" />
                    Recent Forum Activity
                  </CardTitle>
                  <CardDescription>New and unanswered questions</CardDescription>
                </div>
                <Button asChild variant="outline" size="sm">
                  <Link href="/ta/forum">
                    View Forum
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Link>
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {mockData.forumActivity.map((question) => (
                <div
                  key={question.id}
                  className="flex items-start space-x-3 p-4 border rounded-lg hover:bg-gray-50 transition-colors"
                >
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-1">
                      <h4 className="font-medium text-gray-900">{question.title}</h4>
                      <Badge
                        variant={
                          question.priority === "high"
                            ? "destructive"
                            : question.priority === "medium"
                              ? "default"
                              : "secondary"
                        }
                        className="text-xs"
                      >
                        {question.priority}
                      </Badge>
                    </div>
                    <p className="text-sm text-gray-600">
                      {question.course} ‚Ä¢ {question.student}
                    </p>
                    <p className="text-xs text-gray-500">
                      {question.timeAgo} ‚Ä¢ {question.replies} replies
                    </p>
                  </div>
                  <Button asChild variant="ghost" size="sm">
                    <Link href={`/ta/forum/question/${question.id}`}>
                      <ArrowRight className="h-4 w-4" />
                    </Link>
                  </Button>
                </div>
              ))}
            </CardContent>
          </Card>
        </motion.div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Upcoming Sessions */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.4 }}
        >
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="flex items-center gap-2">
                    <Calendar className="h-5 w-5 text-green-600" />
                    Upcoming Sessions
                  </CardTitle>
                  <CardDescription>Your scheduled Q&A and lab sessions</CardDescription>
                </div>
                <Button asChild variant="outline" size="sm">
                  <Link href="/ta/schedule">
                    View Schedule
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Link>
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {mockData.upcomingSessions.slice(0, 3).map((session) => (
                <div
                  key={session.id}
                  className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors"
                >
                  <div className="flex items-center space-x-3">
                    <div className="p-2 bg-green-100 rounded-lg">
                      <Clock className="h-4 w-4 text-green-600" />
                    </div>
                    <div>
                      <h4 className="font-medium text-gray-900">{session.title}</h4>
                      <p className="text-sm text-gray-600">{session.course}</p>
                      <p className="text-xs text-gray-500">
                        {new Date(session.time).toLocaleDateString()} at{" "}
                        {new Date(session.time).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
                      </p>
                    </div>
                  </div>
                  <div className="text-right">
                    <Badge variant="outline">{session.type}</Badge>
                    <p className="text-xs text-gray-500 mt-1">{session.students} students</p>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </motion.div>

        {/* Announcements */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.5 }}
        >
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Bell className="h-5 w-5 text-orange-600" />
                Announcements
              </CardTitle>
              <CardDescription>Latest updates from instructors</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {mockData.announcements.map((announcement) => (
                <div key={announcement.id} className="p-4 border rounded-lg hover:bg-gray-50 transition-colors">
                  <div className="flex items-start justify-between mb-2">
                    <h4 className="font-medium text-gray-900">{announcement.title}</h4>
                    <Badge variant={announcement.priority === "high" ? "destructive" : "secondary"} className="text-xs">
                      {announcement.priority}
                    </Badge>
                  </div>
                  <p className="text-sm text-gray-600 mb-2">{announcement.content}</p>
                  <div className="flex items-center justify-between text-xs text-gray-500">
                    <span>From: {announcement.from}</span>
                    <span>{announcement.timeAgo}</span>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </div>
  )
}

//END OF app\ta\page.tsx

//START OF app\ta\profile\page.tsx
"use client"

import { useRequireAuth } from "@/hooks/use-auth"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { User, Mail, Phone, MapPin, Calendar, Award, Edit, Save, X } from "lucide-react"
import { motion } from "framer-motion"
import { useState } from "react"

export default function TAProfilePage() {
  const { user, isLoading } = useRequireAuth(["ta"])
  const [isEditing, setIsEditing] = useState(false)
  const [formData, setFormData] = useState({
    firstName: "Alex",
    lastName: "Smith",
    email: "ta.test@example.com",
    phone: "+1 (555) 987-6543",
    address: "456 University Ave, College Town, ST 12345",
    bio: "Passionate teaching assistant with expertise in computer science and mathematics. I enjoy helping students understand complex concepts and achieve their academic goals.",
    specializations: ["Python Programming", "Data Structures", "Web Development", "Mathematics"],
    experience: "2 years",
    education: "Bachelor's in Computer Science, Master's in Education",
  })

  if (isLoading) {
    return <div>Loading...</div>
  }

  const handleSave = () => {
    // In a real app, this would save to the backend
    setIsEditing(false)
  }

  const handleCancel = () => {
    // Reset form data to original values
    setIsEditing(false)
  }

  const achievements = [
    {
      title: "Outstanding TA Award",
      description: "Recognized for exceptional student support",
      date: "Fall 2023",
      icon: Award,
    },
    {
      title: "Student Favorite",
      description: "Highest student satisfaction ratings",
      date: "Spring 2023",
      icon: Award,
    },
    {
      title: "Innovation in Teaching",
      description: "Developed new interactive learning methods",
      date: "Fall 2022",
      icon: Award,
    },
  ]

  const stats = [
    { label: "Students Helped", value: "150+", color: "text-blue-600" },
    { label: "Sessions Conducted", value: "85", color: "text-green-600" },
    { label: "Average Rating", value: "4.9/5", color: "text-purple-600" },
    { label: "Response Time", value: "< 2hrs", color: "text-orange-600" },
  ]

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-poppins font-bold text-gray-900">My Profile</h1>
            <p className="text-gray-600 mt-1">Manage your personal information and teaching profile.</p>
          </div>
          <div className="flex items-center space-x-2">
            {!isEditing ? (
              <Button onClick={() => setIsEditing(true)} variant="outline">
                <Edit className="h-4 w-4 mr-2" />
                Edit Profile
              </Button>
            ) : (
              <div className="flex space-x-2">
                <Button onClick={handleSave} size="sm">
                  <Save className="h-4 w-4 mr-2" />
                  Save
                </Button>
                <Button onClick={handleCancel} variant="outline" size="sm">
                  <X className="h-4 w-4 mr-2" />
                  Cancel
                </Button>
              </div>
            )}
          </div>
        </div>
      </motion.div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Profile Information */}
        <motion.div
          className="lg:col-span-2"
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5, delay: 0.1 }}
        >
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <User className="h-5 w-5 text-purple-600" />
                Personal Information
              </CardTitle>
              <CardDescription>Your basic profile information</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center space-x-6">
                <Avatar className="h-24 w-24">
                  <AvatarImage src="/placeholder.svg?height=96&width=96" />
                  <AvatarFallback className="bg-gradient-to-br from-purple-500 to-pink-500 text-white text-2xl">
                    {formData.firstName[0]}
                    {formData.lastName[0]}
                  </AvatarFallback>
                </Avatar>
                <div className="flex-1">
                  <h3 className="text-xl font-semibold text-gray-900">
                    {formData.firstName} {formData.lastName}
                  </h3>
                  <p className="text-gray-600">Teaching Assistant</p>
                  <Badge variant="secondary" className="mt-2 bg-purple-100 text-purple-700">
                    {formData.experience} Experience
                  </Badge>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <Label htmlFor="firstName">First Name</Label>
                  {isEditing ? (
                    <Input
                      id="firstName"
                      value={formData.firstName}
                      onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}
                    />
                  ) : (
                    <p className="text-gray-900">{formData.firstName}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="lastName">Last Name</Label>
                  {isEditing ? (
                    <Input
                      id="lastName"
                      value={formData.lastName}
                      onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}
                    />
                  ) : (
                    <p className="text-gray-900">{formData.lastName}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <div className="flex items-center space-x-2">
                    <Mail className="h-4 w-4 text-gray-400" />
                    {isEditing ? (
                      <Input
                        id="email"
                        type="email"
                        value={formData.email}
                        onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                        className="flex-1"
                      />
                    ) : (
                      <p className="text-gray-900">{formData.email}</p>
                    )}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="phone">Phone</Label>
                  <div className="flex items-center space-x-2">
                    <Phone className="h-4 w-4 text-gray-400" />
                    {isEditing ? (
                      <Input
                        id="phone"
                        value={formData.phone}
                        onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                        className="flex-1"
                      />
                    ) : (
                      <p className="text-gray-900">{formData.phone}</p>
                    )}
                  </div>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="address">Address</Label>
                <div className="flex items-start space-x-2">
                  <MapPin className="h-4 w-4 text-gray-400 mt-1" />
                  {isEditing ? (
                    <Input
                      id="address"
                      value={formData.address}
                      onChange={(e) => setFormData({ ...formData, address: e.target.value })}
                      className="flex-1"
                    />
                  ) : (
                    <p className="text-gray-900">{formData.address}</p>
                  )}
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="bio">Bio</Label>
                {isEditing ? (
                  <Textarea
                    id="bio"
                    value={formData.bio}
                    onChange={(e) => setFormData({ ...formData, bio: e.target.value })}
                    rows={4}
                  />
                ) : (
                  <p className="text-gray-900">{formData.bio}</p>
                )}
              </div>

              <div className="space-y-2">
                <Label>Specializations</Label>
                <div className="flex flex-wrap gap-2">
                  {formData.specializations.map((spec, index) => (
                    <Badge key={index} variant="outline" className="bg-purple-50 text-purple-700">
                      {spec}
                    </Badge>
                  ))}
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="education">Education</Label>
                {isEditing ? (
                  <Input
                    id="education"
                    value={formData.education}
                    onChange={(e) => setFormData({ ...formData, education: e.target.value })}
                  />
                ) : (
                  <p className="text-gray-900">{formData.education}</p>
                )}
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Stats and Achievements */}
        <motion.div
          className="space-y-6"
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          {/* Performance Stats */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Award className="h-5 w-5 text-orange-600" />
                Performance Stats
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {stats.map((stat, index) => (
                <div key={index} className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">{stat.label}</span>
                  <span className={`font-semibold ${stat.color}`}>{stat.value}</span>
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Achievements */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Award className="h-5 w-5 text-yellow-600" />
                Achievements
              </CardTitle>
              <CardDescription>Recognition and awards received</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {achievements.map((achievement, index) => (
                <div key={index} className="flex items-start space-x-3 p-3 border rounded-lg">
                  <div className="p-2 bg-yellow-100 rounded-lg">
                    <achievement.icon className="h-4 w-4 text-yellow-600" />
                  </div>
                  <div className="flex-1">
                    <h4 className="font-medium text-gray-900">{achievement.title}</h4>
                    <p className="text-sm text-gray-600">{achievement.description}</p>
                    <p className="text-xs text-gray-500 mt-1">{achievement.date}</p>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Quick Actions */}
          <Card>
            <CardHeader>
              <CardTitle>Quick Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <Button className="w-full" variant="outline">
                <Calendar className="mr-2 h-4 w-4" />
                View Schedule
              </Button>
              <Button className="w-full" variant="outline">
                <User className="mr-2 h-4 w-4" />
                Student Groups
              </Button>
              <Button className="w-full" variant="outline">
                <Award className="mr-2 h-4 w-4" />
                Performance Report
              </Button>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </div>
  )
}

//END OF app\ta\profile\page.tsx

//START OF app\ta\schedule\page.tsx
"use client"

import { useRequireAuth } from "@/hooks/use-auth"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Calendar, Clock, Users, Video, MapPin } from "lucide-react"
import { motion } from "framer-motion"
import { useState } from "react"

// Mock data for TA schedule
const mockScheduleData = {
  sessions: [
    {
      id: "session-1",
      title: "ICT Q&A Session",
      course: "ICT Fundamentals",
      type: "Q&A",
      date: "2024-01-15",
      time: "14:00",
      duration: "1 hour",
      students: 12,
      location: "Virtual - Zoom Room 1",
      status: "upcoming",
      description: "Weekly Q&A session for ICT Fundamentals students",
    },
    {
      id: "session-2",
      title: "Math Problem Solving",
      course: "Mathematics",
      type: "Tutorial",
      date: "2024-01-16",
      time: "10:00",
      duration: "45 minutes",
      students: 8,
      location: "Virtual - Zoom Room 2",
      status: "upcoming",
      description: "Help session for algebra and calculus problems",
    },
    {
      id: "session-3",
      title: "Lab Help Session",
      course: "ICT Practical",
      type: "Lab Help",
      date: "2024-01-17",
      time: "16:00",
      duration: "2 hours",
      students: 15,
      location: "Virtual - Zoom Room 3",
      status: "upcoming",
      description: "Hands-on help with practical assignments",
    },
    {
      id: "session-4",
      title: "Office Hours",
      course: "General",
      type: "Office Hours",
      date: "2024-01-18",
      time: "13:00",
      duration: "2 hours",
      students: 0,
      location: "Virtual - Personal Room",
      status: "upcoming",
      description: "Open office hours for any questions",
    },
    {
      id: "session-5",
      title: "ICT Review Session",
      course: "ICT Fundamentals",
      type: "Review",
      date: "2024-01-12",
      time: "15:00",
      duration: "1.5 hours",
      students: 10,
      location: "Virtual - Zoom Room 1",
      status: "completed",
      description: "Review session for Module 3 concepts",
    },
  ],
  weeklyHours: 8,
  totalSessions: 12,
  averageAttendance: 85,
}

export default function TASchedulePage() {
  const { user, isLoading } = useRequireAuth(["ta"])
  const [viewMode, setViewMode] = useState("week")
  const [selectedWeek, setSelectedWeek] = useState(new Date())

  if (isLoading) {
    return <div>Loading...</div>
  }

  const getSessionTypeColor = (type: string) => {
    switch (type) {
      case "Q&A":
        return "bg-blue-100 text-blue-700"
      case "Tutorial":
        return "bg-green-100 text-green-700"
      case "Lab Help":
        return "bg-purple-100 text-purple-700"
      case "Office Hours":
        return "bg-orange-100 text-orange-700"
      case "Review":
        return "bg-pink-100 text-pink-700"
      default:
        return "bg-gray-100 text-gray-700"
    }
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "upcoming":
        return <Badge variant="default">Upcoming</Badge>
      case "completed":
        return <Badge variant="secondary">Completed</Badge>
      case "cancelled":
        return <Badge variant="destructive">Cancelled</Badge>
      default:
        return <Badge variant="outline">Unknown</Badge>
    }
  }

  const upcomingSessions = mockScheduleData.sessions.filter((session) => session.status === "upcoming")
  const completedSessions = mockScheduleData.sessions.filter((session) => session.status === "completed")

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-poppins font-bold text-gray-900">TA Schedule</h1>
            <p className="text-gray-600 mt-1">Manage your Q&A sessions, tutorials, and office hours.</p>
          </div>
          <div className="flex items-center space-x-2">
            <Select value={viewMode} onValueChange={setViewMode}>
              <SelectTrigger className="w-32">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="week">Week View</SelectItem>
                <SelectItem value="month">Month View</SelectItem>
                <SelectItem value="list">List View</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
      </motion.div>

      {/* Schedule Overview */}
      <motion.div
        className="grid grid-cols-1 md:grid-cols-4 gap-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.1 }}
      >
        <Card className="bg-gradient-to-br from-blue-500 to-cyan-500 text-white border-0">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-blue-100">Weekly Hours</p>
                <p className="text-3xl font-bold">{mockScheduleData.weeklyHours}</p>
              </div>
              <Clock className="h-8 w-8 text-blue-200" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-green-500 to-emerald-500 text-white border-0">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-green-100">Total Sessions</p>
                <p className="text-3xl font-bold">{mockScheduleData.totalSessions}</p>
              </div>
              <Calendar className="h-8 w-8 text-green-200" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-purple-500 to-pink-500 text-white border-0">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-purple-100">Avg Attendance</p>
                <p className="text-3xl font-bold">{mockScheduleData.averageAttendance}%</p>
              </div>
              <Users className="h-8 w-8 text-purple-200" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-orange-500 to-red-500 text-white border-0">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-orange-100">Upcoming</p>
                <p className="text-3xl font-bold">{upcomingSessions.length}</p>
              </div>
              <Calendar className="h-8 w-8 text-orange-200" />
            </div>
          </CardContent>
        </Card>
      </motion.div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Upcoming Sessions */}
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Calendar className="h-5 w-5 text-blue-600" />
                Upcoming Sessions
              </CardTitle>
              <CardDescription>Your scheduled sessions for this week</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {upcomingSessions.map((session) => (
                <motion.div
                  key={session.id}
                  className="border rounded-lg p-4 hover:bg-gray-50 transition-colors"
                  whileHover={{ scale: 1.01 }}
                  transition={{ type: "spring", stiffness: 300, damping: 20 }}
                >
                  <div className="flex items-start justify-between mb-3">
                    <div>
                      <h4 className="font-medium text-gray-900">{session.title}</h4>
                      <p className="text-sm text-gray-600">{session.course}</p>
                    </div>
                    <Badge className={getSessionTypeColor(session.type)}>{session.type}</Badge>
                  </div>

                  <div className="grid grid-cols-2 gap-4 mb-3">
                    <div className="flex items-center space-x-2 text-sm text-gray-600">
                      <Calendar className="h-4 w-4" />
                      <span>{new Date(session.date).toLocaleDateString()}</span>
                    </div>
                    <div className="flex items-center space-x-2 text-sm text-gray-600">
                      <Clock className="h-4 w-4" />
                      <span>
                        {session.time} ({session.duration})
                      </span>
                    </div>
                    <div className="flex items-center space-x-2 text-sm text-gray-600">
                      <Users className="h-4 w-4" />
                      <span>{session.students} students</span>
                    </div>
                    <div className="flex items-center space-x-2 text-sm text-gray-600">
                      <MapPin className="h-4 w-4" />
                      <span>Virtual</span>
                    </div>
                  </div>

                  <p className="text-sm text-gray-600 mb-3">{session.description}</p>

                  <div className="flex items-center justify-between">
                    {getStatusBadge(session.status)}
                    <div className="flex space-x-2">
                      <Button size="sm" variant="outline">
                        <Video className="h-4 w-4 mr-1" />
                        Join
                      </Button>
                      <Button size="sm" variant="ghost">
                        Edit
                      </Button>
                    </div>
                  </div>
                </motion.div>
              ))}
            </CardContent>
          </Card>
        </motion.div>

        {/* Recent Sessions */}
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5, delay: 0.3 }}
        >
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Clock className="h-5 w-5 text-green-600" />
                Recent Sessions
              </CardTitle>
              <CardDescription>Completed sessions and their outcomes</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {completedSessions.map((session) => (
                <div key={session.id} className="border rounded-lg p-4 bg-gray-50">
                  <div className="flex items-start justify-between mb-3">
                    <div>
                      <h4 className="font-medium text-gray-900">{session.title}</h4>
                      <p className="text-sm text-gray-600">{session.course}</p>
                    </div>
                    <Badge className={getSessionTypeColor(session.type)}>{session.type}</Badge>
                  </div>

                  <div className="grid grid-cols-2 gap-4 mb-3">
                    <div className="flex items-center space-x-2 text-sm text-gray-600">
                      <Calendar className="h-4 w-4" />
                      <span>{new Date(session.date).toLocaleDateString()}</span>
                    </div>
                    <div className="flex items-center space-x-2 text-sm text-gray-600">
                      <Clock className="h-4 w-4" />
                      <span>
                        {session.time} ({session.duration})
                      </span>
                    </div>
                    <div className="flex items-center space-x-2 text-sm text-gray-600">
                      <Users className="h-4 w-4" />
                      <span>{session.students} attended</span>
                    </div>
                    <div className="flex items-center space-x-2 text-sm text-gray-600">
                      <MapPin className="h-4 w-4" />
                      <span>Virtual</span>
                    </div>
                  </div>

                  <div className="flex items-center justify-between">
                    {getStatusBadge(session.status)}
                    <Button size="sm" variant="ghost">
                      View Summary
                    </Button>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </div>
  )
}

//END OF app\ta\schedule\page.tsx

//START OF app\ta\settings\page.tsx
"use client"

import { useRequireAuth } from "@/hooks/use-auth"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Switch } from "@/components/ui/switch"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Settings, Lock, Bell, Eye, Save } from "lucide-react"
import { motion } from "framer-motion"
import { useState } from "react"

export default function TASettingsPage() {
  const { user, isLoading } = useRequireAuth(["ta"])
  const [settings, setSettings] = useState({
    // Notification Settings
    emailNotifications: true,
    pushNotifications: true,
    forumNotifications: true,
    sessionReminders: true,
    studentQuestions: true,

    // Privacy Settings
    profileVisibility: "students",
    showEmail: false,
    showPhone: false,

    // Security Settings
    twoFactorAuth: false,
    sessionTimeout: "24",

    // Preferences
    timezone: "America/New_York",
    language: "en",
    theme: "light",
  })

  const [passwordData, setPasswordData] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: "",
  })

  if (isLoading) {
    return <div>Loading...</div>
  }

  const handleSaveSettings = () => {
    // In a real app, this would save to the backend
    console.log("Saving settings:", settings)
  }

  const handlePasswordChange = () => {
    // In a real app, this would update the password
    console.log("Changing password")
    setPasswordData({
      currentPassword: "",
      newPassword: "",
      confirmPassword: "",
    })
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-poppins font-bold text-gray-900">Settings</h1>
            <p className="text-gray-600 mt-1">Manage your account preferences and security settings.</p>
          </div>
          <Button onClick={handleSaveSettings}>
            <Save className="h-4 w-4 mr-2" />
            Save Changes
          </Button>
        </div>
      </motion.div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Notification Settings */}
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5, delay: 0.1 }}
        >
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Bell className="h-5 w-5 text-blue-600" />
                Notification Settings
              </CardTitle>
              <CardDescription>Choose what notifications you want to receive</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="email-notifications">Email Notifications</Label>
                  <p className="text-sm text-gray-600">Receive notifications via email</p>
                </div>
                <Switch
                  id="email-notifications"
                  checked={settings.emailNotifications}
                  onCheckedChange={(checked) => setSettings({ ...settings, emailNotifications: checked })}
                />
              </div>

              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="push-notifications">Push Notifications</Label>
                  <p className="text-sm text-gray-600">Receive browser push notifications</p>
                </div>
                <Switch
                  id="push-notifications"
                  checked={settings.pushNotifications}
                  onCheckedChange={(checked) => setSettings({ ...settings, pushNotifications: checked })}
                />
              </div>

              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="forum-notifications">Forum Activity</Label>
                  <p className="text-sm text-gray-600">New questions and replies in forums</p>
                </div>
                <Switch
                  id="forum-notifications"
                  checked={settings.forumNotifications}
                  onCheckedChange={(checked) => setSettings({ ...settings, forumNotifications: checked })}
                />
              </div>

              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="session-reminders">Session Reminders</Label>
                  <p className="text-sm text-gray-600">Reminders for upcoming sessions</p>
                </div>
                <Switch
                  id="session-reminders"
                  checked={settings.sessionReminders}
                  onCheckedChange={(checked) => setSettings({ ...settings, sessionReminders: checked })}
                />
              </div>

              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="student-questions">Student Questions</Label>
                  <p className="text-sm text-gray-600">When students ask new questions</p>
                </div>
                <Switch
                  id="student-questions"
                  checked={settings.studentQuestions}
                  onCheckedChange={(checked) => setSettings({ ...settings, studentQuestions: checked })}
                />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Privacy Settings */}
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Eye className="h-5 w-5 text-green-600" />
                Privacy Settings
              </CardTitle>
              <CardDescription>Control who can see your information</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="profile-visibility">Profile Visibility</Label>
                <Select
                  value={settings.profileVisibility}
                  onValueChange={(value) => setSettings({ ...settings, profileVisibility: value })}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="public">Public</SelectItem>
                    <SelectItem value="students">Students Only</SelectItem>
                    <SelectItem value="instructors">Instructors Only</SelectItem>
                    <SelectItem value="private">Private</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="show-email">Show Email</Label>
                  <p className="text-sm text-gray-600">Display email in your profile</p>
                </div>
                <Switch
                  id="show-email"
                  checked={settings.showEmail}
                  onCheckedChange={(checked) => setSettings({ ...settings, showEmail: checked })}
                />
              </div>

              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="show-phone">Show Phone</Label>
                  <p className="text-sm text-gray-600">Display phone number in your profile</p>
                </div>
                <Switch
                  id="show-phone"
                  checked={settings.showPhone}
                  onCheckedChange={(checked) => setSettings({ ...settings, showPhone: checked })}
                />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Security Settings */}
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5, delay: 0.3 }}
        >
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Lock className="h-5 w-5 text-red-600" />
                Security Settings
              </CardTitle>
              <CardDescription>Manage your account security</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="two-factor">Two-Factor Authentication</Label>
                  <p className="text-sm text-gray-600">Add an extra layer of security</p>
                </div>
                <Switch
                  id="two-factor"
                  checked={settings.twoFactorAuth}
                  onCheckedChange={(checked) => setSettings({ ...settings, twoFactorAuth: checked })}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="session-timeout">Session Timeout</Label>
                <Select
                  value={settings.sessionTimeout}
                  onValueChange={(value) => setSettings({ ...settings, sessionTimeout: value })}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="1">1 hour</SelectItem>
                    <SelectItem value="8">8 hours</SelectItem>
                    <SelectItem value="24">24 hours</SelectItem>
                    <SelectItem value="168">1 week</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Password Change */}
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5, delay: 0.4 }}
        >
          <Card>
            <CardHeader>
              <CardTitle>Change Password</CardTitle>
              <CardDescription>Update your account password</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="current-password">Current Password</Label>
                <Input
                  id="current-password"
                  type="password"
                  value={passwordData.currentPassword}
                  onChange={(e) => setPasswordData({ ...passwordData, currentPassword: e.target.value })}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="new-password">New Password</Label>
                <Input
                  id="new-password"
                  type="password"
                  value={passwordData.newPassword}
                  onChange={(e) => setPasswordData({ ...passwordData, newPassword: e.target.value })}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="confirm-password">Confirm New Password</Label>
                <Input
                  id="confirm-password"
                  type="password"
                  value={passwordData.confirmPassword}
                  onChange={(e) => setPasswordData({ ...passwordData, confirmPassword: e.target.value })}
                />
              </div>

              <Button onClick={handlePasswordChange} className="w-full">
                Update Password
              </Button>
            </CardContent>
          </Card>
        </motion.div>

        {/* Preferences */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.5 }}
          className="lg:col-span-2"
        >
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Settings className="h-5 w-5 text-purple-600" />
                Preferences
              </CardTitle>
              <CardDescription>Customize your experience</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="space-y-2">
                  <Label htmlFor="timezone">Timezone</Label>
                  <Select
                    value={settings.timezone}
                    onValueChange={(value) => setSettings({ ...settings, timezone: value })}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="America/New_York">Eastern Time</SelectItem>
                      <SelectItem value="America/Chicago">Central Time</SelectItem>
                      <SelectItem value="America/Denver">Mountain Time</SelectItem>
                      <SelectItem value="America/Los_Angeles">Pacific Time</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="language">Language</Label>
                  <Select
                    value={settings.language}
                    onValueChange={(value) => setSettings({ ...settings, language: value })}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="en">English</SelectItem>
                      <SelectItem value="es">Spanish</SelectItem>
                      <SelectItem value="fr">French</SelectItem>
                      <SelectItem value="de">German</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="theme">Theme</Label>
                  <Select value={settings.theme} onValueChange={(value) => setSettings({ ...settings, theme: value })}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="light">Light</SelectItem>
                      <SelectItem value="dark">Dark</SelectItem>
                      <SelectItem value="system">System</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </div>
  )
}

//END OF app\ta\settings\page.tsx

//START OF app\ta\students\page.tsx
"use client"

import { useRequireAuth } from "@/hooks/use-auth"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Progress } from "@/components/ui/progress"
import { Users, TrendingUp, Clock, BookOpen, MessageSquare, Calendar, ArrowRight } from "lucide-react"
import Link from "next/link"
import { motion } from "framer-motion"

// Mock data for student management
const mockStudentData = {
  groups: [
    {
      id: "group-1",
      name: "ICT Fundamentals - Group A",
      course: "ICT Fundamentals",
      studentCount: 12,
      averageProgress: 78,
      strugglingStudents: 2,
      nextSession: "2024-01-15T14:00:00Z",
      recentActivity: "2 hours ago",
      students: [
        {
          id: "student-1",
          name: "Emma Johnson",
          email: "emma.johnson@example.com",
          progress: 85,
          lastActive: "1 hour ago",
          strugglingAreas: [],
          status: "active",
        },
        {
          id: "student-2",
          name: "Michael Chen",
          email: "michael.chen@example.com",
          progress: 92,
          lastActive: "30 minutes ago",
          strugglingAreas: [],
          status: "active",
        },
        {
          id: "student-3",
          name: "Sarah Wilson",
          email: "sarah.wilson@example.com",
          progress: 45,
          lastActive: "2 days ago",
          strugglingAreas: ["Python Loops", "Data Structures"],
          status: "struggling",
        },
      ],
    },
    {
      id: "group-2",
      name: "Mathematics - Group B",
      course: "Mathematics",
      studentCount: 8,
      averageProgress: 82,
      strugglingStudents: 1,
      nextSession: "2024-01-16T10:00:00Z",
      recentActivity: "4 hours ago",
      students: [
        {
          id: "student-4",
          name: "David Brown",
          email: "david.brown@example.com",
          progress: 88,
          lastActive: "2 hours ago",
          strugglingAreas: [],
          status: "active",
        },
        {
          id: "student-5",
          name: "Lisa Garcia",
          email: "lisa.garcia@example.com",
          progress: 76,
          lastActive: "1 day ago",
          strugglingAreas: ["Calculus"],
          status: "struggling",
        },
      ],
    },
    {
      id: "group-3",
      name: "ICT Practical - Group C",
      course: "ICT Practical",
      studentCount: 15,
      averageProgress: 71,
      strugglingStudents: 5,
      nextSession: "2024-01-17T16:00:00Z",
      recentActivity: "1 hour ago",
      students: [
        {
          id: "student-6",
          name: "Alex Thompson",
          email: "alex.thompson@example.com",
          progress: 95,
          lastActive: "30 minutes ago",
          strugglingAreas: [],
          status: "active",
        },
      ],
    },
  ],
  progressInsights: {
    totalStudents: 35,
    averageProgress: 77,
    strugglingStudents: 8,
    activeStudents: 27,
    commonStrugglingAreas: [
      { topic: "Python Loops", studentCount: 5 },
      { topic: "Database Design", studentCount: 4 },
      { topic: "Calculus Integration", studentCount: 3 },
      { topic: "Data Structures", studentCount: 3 },
    ],
  },
}

export default function TAStudentsPage() {
  const { user, isLoading } = useRequireAuth(["ta"])

  if (isLoading) {
    return <div>Loading...</div>
  }

  const getProgressColor = (progress: number) => {
    if (progress >= 80) return "text-green-600"
    if (progress >= 60) return "text-yellow-600"
    return "text-red-600"
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "active":
        return (
          <Badge variant="secondary" className="bg-green-100 text-green-700">
            Active
          </Badge>
        )
      case "struggling":
        return <Badge variant="destructive">Needs Help</Badge>
      default:
        return <Badge variant="outline">Unknown</Badge>
    }
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-poppins font-bold text-gray-900">Student Management</h1>
            <p className="text-gray-600 mt-1">Monitor your student groups and track their progress.</p>
          </div>
          <Badge variant="secondary" className="bg-purple-100 text-purple-700">
            {mockStudentData.progressInsights.totalStudents} Total Students
          </Badge>
        </div>
      </motion.div>

      {/* Progress Overview */}
      <motion.div
        className="grid grid-cols-1 md:grid-cols-4 gap-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.1 }}
      >
        <Card className="bg-gradient-to-br from-blue-500 to-cyan-500 text-white border-0">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-blue-100">Total Students</p>
                <p className="text-3xl font-bold">{mockStudentData.progressInsights.totalStudents}</p>
              </div>
              <Users className="h-8 w-8 text-blue-200" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-green-500 to-emerald-500 text-white border-0">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-green-100">Average Progress</p>
                <p className="text-3xl font-bold">{mockStudentData.progressInsights.averageProgress}%</p>
              </div>
              <TrendingUp className="h-8 w-8 text-green-200" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-orange-500 to-red-500 text-white border-0">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-orange-100">Need Help</p>
                <p className="text-3xl font-bold">{mockStudentData.progressInsights.strugglingStudents}</p>
              </div>
              <Clock className="h-8 w-8 text-orange-200" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-purple-500 to-pink-500 text-white border-0">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-purple-100">Active Students</p>
                <p className="text-3xl font-bold">{mockStudentData.progressInsights.activeStudents}</p>
              </div>
              <Users className="h-8 w-8 text-purple-200" />
            </div>
          </CardContent>
        </Card>
      </motion.div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Student Groups */}
        <motion.div
          className="lg:col-span-2"
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Users className="h-5 w-5 text-purple-600" />
                My Student Groups
              </CardTitle>
              <CardDescription>Overview of all assigned student groups</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {mockStudentData.groups.map((group) => (
                <div key={group.id} className="border rounded-lg p-6 hover:bg-gray-50 transition-colors">
                  <div className="flex items-center justify-between mb-4">
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900">{group.name}</h3>
                      <p className="text-sm text-gray-600">{group.course}</p>
                    </div>
                    <Button asChild variant="outline" size="sm">
                      <Link href={`/ta/students/${group.id}`}>
                        View Details
                        <ArrowRight className="ml-2 h-4 w-4" />
                      </Link>
                    </Button>
                  </div>

                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                    <div className="text-center">
                      <p className="text-2xl font-bold text-gray-900">{group.studentCount}</p>
                      <p className="text-xs text-gray-600">Students</p>
                    </div>
                    <div className="text-center">
                      <p className={`text-2xl font-bold ${getProgressColor(group.averageProgress)}`}>
                        {group.averageProgress}%
                      </p>
                      <p className="text-xs text-gray-600">Avg Progress</p>
                    </div>
                    <div className="text-center">
                      <p className="text-2xl font-bold text-red-600">{group.strugglingStudents}</p>
                      <p className="text-xs text-gray-600">Need Help</p>
                    </div>
                    <div className="text-center">
                      <p className="text-sm font-medium text-gray-900">
                        {new Date(group.nextSession).toLocaleDateString()}
                      </p>
                      <p className="text-xs text-gray-600">Next Session</p>
                    </div>
                  </div>

                  <div className="mb-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium text-gray-700">Group Progress</span>
                      <span className="text-sm text-gray-600">{group.averageProgress}%</span>
                    </div>
                    <Progress value={group.averageProgress} className="h-2" />
                  </div>

                  {/* Sample Students */}
                  <div className="space-y-2">
                    <h4 className="text-sm font-medium text-gray-700">Recent Students</h4>
                    {group.students.slice(0, 3).map((student) => (
                      <div key={student.id} className="flex items-center justify-between py-2">
                        <div className="flex items-center space-x-3">
                          <Avatar className="h-8 w-8">
                            <AvatarImage src="/placeholder.svg?height=32&width=32" />
                            <AvatarFallback className="text-xs">
                              {student.name
                                .split(" ")
                                .map((n) => n[0])
                                .join("")}
                            </AvatarFallback>
                          </Avatar>
                          <div>
                            <p className="text-sm font-medium text-gray-900">{student.name}</p>
                            <p className="text-xs text-gray-600">Last active: {student.lastActive}</p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <span className={`text-sm font-medium ${getProgressColor(student.progress)}`}>
                            {student.progress}%
                          </span>
                          {getStatusBadge(student.status)}
                        </div>
                      </div>
                    ))}
                    {group.students.length > 3 && (
                      <p className="text-xs text-gray-500 text-center pt-2">
                        +{group.students.length - 3} more students
                      </p>
                    )}
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </motion.div>

        {/* Common Struggling Areas */}
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5, delay: 0.3 }}
        >
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BookOpen className="h-5 w-5 text-orange-600" />
                Common Struggle Points
              </CardTitle>
              <CardDescription>Topics where students need the most help</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {mockStudentData.progressInsights.commonStrugglingAreas.map((area, index) => (
                <div key={index} className="flex items-center justify-between p-3 border rounded-lg">
                  <div>
                    <h4 className="font-medium text-gray-900">{area.topic}</h4>
                    <p className="text-sm text-gray-600">{area.studentCount} students struggling</p>
                  </div>
                  <Badge variant="destructive" className="text-xs">
                    {area.studentCount}
                  </Badge>
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Quick Actions */}
          <Card className="mt-6">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <MessageSquare className="h-5 w-5 text-blue-600" />
                Quick Actions
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <Button asChild className="w-full" variant="outline">
                <Link href="/ta/forum">
                  <MessageSquare className="mr-2 h-4 w-4" />
                  Check Forum Questions
                </Link>
              </Button>
              <Button asChild className="w-full" variant="outline">
                <Link href="/ta/schedule">
                  <Calendar className="mr-2 h-4 w-4" />
                  View Schedule
                </Link>
              </Button>
              <Button asChild className="w-full" variant="outline">
                <Link href="/ta/students/progress">
                  <TrendingUp className="mr-2 h-4 w-4" />
                  Progress Reports
                </Link>
              </Button>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </div>
  )
}

//END OF app\ta\students\page.tsx

//START OF app\unauthorized\page.tsx
"use client"

import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Shield, ArrowLeft, Home } from "lucide-react"
import { motion } from "framer-motion"

export default function UnauthorizedPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 via-orange-50 to-yellow-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <motion.div
        className="max-w-md w-full"
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        <Card className="shadow-2xl border-0 bg-white/90 backdrop-blur-sm">
          <CardHeader className="text-center">
            <motion.div
              className="mx-auto w-16 h-16 bg-gradient-to-br from-red-500 to-orange-500 rounded-2xl flex items-center justify-center mb-4 shadow-xl"
              initial={{ scale: 0, rotate: -180 }}
              animate={{ scale: 1, rotate: 0 }}
              transition={{ duration: 0.6, type: "spring" }}
            >
              <Shield className="h-8 w-8 text-white" />
            </motion.div>
            <CardTitle className="font-poppins text-2xl">Access Denied</CardTitle>
            <CardDescription className="text-lg">You don't have permission to access this page</CardDescription>
          </CardHeader>
          <CardContent className="space-y-6 text-center">
            <motion.p
              className="text-gray-600"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.2 }}
            >
              This page is restricted to specific user roles. Please contact your administrator if you believe this is
              an error.
            </motion.p>

            <motion.div
              className="space-y-3"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.4 }}
            >
              <Link href="/login" className="block">
                <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                  <Button className="w-full bg-gradient-to-r from-emerald-600 to-teal-600 hover:from-emerald-700 hover:to-teal-700">
                    <ArrowLeft className="mr-2 h-4 w-4" />
                    Back to Login
                  </Button>
                </motion.div>
              </Link>

              <Link href="/" className="block">
                <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                  <Button variant="outline" className="w-full border-emerald-300 hover:bg-emerald-50">
                    <Home className="mr-2 h-4 w-4" />
                    Go to Homepage
                  </Button>
                </motion.div>
              </Link>
            </motion.div>
          </CardContent>
        </Card>
      </motion.div>
    </div>
  )
}

//END OF app\unauthorized\page.tsx

//START OF components\animated-counter.tsx
"use client"

import { useEffect, useState } from "react"
import { motion, useInView } from "framer-motion"
import { useRef } from "react"

interface AnimatedCounterProps {
  end: number
  duration?: number
  suffix?: string
  prefix?: string
}

export function AnimatedCounter({ end, duration = 2, suffix = "", prefix = "" }: AnimatedCounterProps) {
  const [count, setCount] = useState(0)
  const ref = useRef(null)
  const isInView = useInView(ref, { once: true })

  useEffect(() => {
    if (!isInView) return

    let startTime: number
    let animationFrame: number

    const animate = (currentTime: number) => {
      if (!startTime) startTime = currentTime
      const progress = Math.min((currentTime - startTime) / (duration * 1000), 1)

      setCount(Math.floor(progress * end))

      if (progress < 1) {
        animationFrame = requestAnimationFrame(animate)
      }
    }

    animationFrame = requestAnimationFrame(animate)

    return () => cancelAnimationFrame(animationFrame)
  }, [end, duration, isInView])

  return (
    <motion.span
      ref={ref}
      initial={{ opacity: 0, scale: 0.5 }}
      animate={isInView ? { opacity: 1, scale: 1 } : {}}
      transition={{ duration: 0.5 }}
      className="font-bold"
    >
      {prefix}
      {count}
      {suffix}
    </motion.span>
  )
}

//END OF components\animated-counter.tsx

//START OF components\floating-elements.tsx
"use client"

import { motion } from "framer-motion"

export function FloatingElements() {
  return (
    <div className="absolute inset-0 overflow-hidden pointer-events-none">
      {/* Simplified floating shapes - reduced from 6 to 3 */}
      {[...Array(3)].map((_, i) => (
        <motion.div
          key={i}
          className="absolute w-4 h-4 bg-[var(--color-gossamer-200)]/20 rounded-full"
          style={{
            left: `${Math.random() * 100}%`,
            top: `${Math.random() * 100}%`,
          }}
          animate={{
            y: [0, -20, 0],
            opacity: [0.3, 0.6, 0.3],
          }}
          transition={{
            duration: 4,
            repeat: Number.POSITIVE_INFINITY,
            delay: Math.random() * 2,
          }}
        />
      ))}

      {/* Simplified larger elements - reduced from 3 to 2 */}
      {[...Array(2)].map((_, i) => (
        <motion.div
          key={`large-${i}`}
          className="absolute w-8 h-8 bg-gradient-to-br from-[var(--color-gossamer-300)]/10 to-[var(--color-gossamer-400)]/10 rounded-lg"
          style={{
            left: `${20 + Math.random() * 60}%`,
            top: `${20 + Math.random() * 60}%`,
          }}
          animate={{
            scale: [1, 1.1, 1],
          }}
          transition={{
            duration: 6,
            repeat: Number.POSITIVE_INFINITY,
            ease: "linear",
          }}
        />
      ))}
    </div>
  )
}

//END OF components\floating-elements.tsx

//START OF components\footer.tsx
"use client"

import Link from "next/link"
import { GraduationCap, Mail, Phone, MapPin, ArrowUp } from "lucide-react"
import { motion } from "framer-motion"
import { Button } from "@/components/ui/button"

export function Footer() {
  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: "smooth" })
  }

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.3,
      },
    },
  }

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.5 },
    },
  }

  return (
    <footer className="bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-white relative overflow-hidden">
      {/* Background Pattern */}
      <div className="absolute inset-0 opacity-5">
        <div
          className="absolute inset-0"
          style={{
            backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fillRule='evenodd'%3E%3Cg fill='%23ffffff' fillOpacity='0.1'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`,
          }}
        />
      </div>

      <motion.div
        className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 relative z-10"
        variants={containerVariants}
        initial="hidden"
        whileInView="visible"
        viewport={{ once: true, margin: "-100px" }}
      >
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          <motion.div className="col-span-1 md:col-span-2" variants={itemVariants}>
            <div className="flex items-center space-x-2 mb-4">
              <div className="h-8 w-8 text-[var(--color-gossamer-400)]">
                <GraduationCap className="h-8 w-8" />
              </div>
              <span className="font-poppins font-bold text-xl">EduTech Academy</span>
            </div>
            <motion.p className="text-gray-300 mb-6 max-w-md leading-relaxed" variants={itemVariants}>
              Transform your understanding of ICT and Mathematics with our comprehensive online tutoring program. Join
              our digital campus and excel in your studies with personalized support and expert guidance.
            </motion.p>
            <motion.div className="flex space-x-4" variants={itemVariants}>
              {["facebook", "twitter", "linkedin", "youtube"].map((social, index) => (
                <motion.a
                  key={social}
                  href="#"
                  className="w-10 h-10 bg-[var(--color-gossamer-600)]/20 rounded-full flex items-center justify-center hover:bg-[var(--color-gossamer-600)] transition-colors"
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                >
                  <span className="sr-only">{social}</span>
                  <div className="w-5 h-5 bg-current rounded" />
                </motion.a>
              ))}
            </motion.div>
          </motion.div>

          <motion.div variants={itemVariants}>
            <h3 className="font-poppins font-semibold text-lg mb-4 text-[var(--color-gossamer-400)]">Quick Links</h3>
            <ul className="space-y-3">
              {[
                { name: "About Program", href: "/about" },
                { name: "Course Information", href: "/courses" },
                { name: "Student Login", href: "/login" },
                { name: "Contact Us", href: "/contact" },
              ].map((link, index) => (
                <motion.li
                  key={link.name}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.1 + 0.6 }}
                >
                  <Link
                    href={link.href}
                    className="text-gray-300 hover:text-[var(--color-gossamer-400)] transition-colors flex items-center group"
                  >
                    <motion.span className="w-0 h-0.5 bg-[var(--color-gossamer-400)] mr-0 group-hover:w-4 group-hover:mr-2 transition-all duration-300" />
                    {link.name}
                  </Link>
                </motion.li>
              ))}
            </ul>
          </motion.div>

          <motion.div variants={itemVariants}>
            <h3 className="font-poppins font-semibold text-lg mb-4 text-[var(--color-gossamer-400)]">Contact Info</h3>
            <ul className="space-y-4">
              {[
                { icon: Mail, text: "info@edutechacademy.com" },
                { icon: Phone, text: "+1 (555) 123-4567" },
                { icon: MapPin, text: "Online Learning Platform" },
              ].map((item, index) => (
                <motion.li
                  key={index}
                  className="flex items-center space-x-3"
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.1 + 0.7 }}
                  whileHover={{ x: 5 }}
                >
                  <motion.div whileHover={{ scale: 1.2 }} className="flex-shrink-0">
                    <item.icon className="h-5 w-5 text-[var(--color-gossamer-400)]" />
                  </motion.div>
                  <span className="text-gray-300">{item.text}</span>
                </motion.li>
              ))}
            </ul>
          </motion.div>
        </div>

        <motion.div
          className="border-t border-gray-700 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center"
          variants={itemVariants}
        >
          <p className="text-gray-400 text-sm mb-4 md:mb-0">¬© 2024 EduTech Academy. All rights reserved.</p>
          <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
            <Button
              onClick={scrollToTop}
              variant="outline"
              size="sm"
              className="border-[var(--color-gossamer-400)] text-[var(--color-gossamer-400)] hover:bg-[var(--color-gossamer-400)] hover:text-gray-900"
            >
              <ArrowUp className="h-4 w-4 mr-2" />
              Back to Top
            </Button>
          </motion.div>
        </motion.div>
      </motion.div>
    </footer>
  )
}

//END OF components\footer.tsx

//START OF components\header.tsx
"use client"

import Link from "next/link"
import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Menu, X, GraduationCap } from "lucide-react"
import { motion, AnimatePresence } from "framer-motion"

export function Header() {
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [isScrolled, setIsScrolled] = useState(false)

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 10)
    }
    window.addEventListener("scroll", handleScroll)
    return () => window.removeEventListener("scroll", handleScroll)
  }, [])

  const navigation = [
    { name: "Home", href: "/" },
    { name: "About", href: "/about" },
    { name: "Courses", href: "/courses" },
    { name: "Contact", href: "/contact" },
  ]

  return (
    <motion.header
      className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${
        isScrolled
          ? "bg-white/95 backdrop-blur-md shadow-lg border-b border-gray-200/50"
          : "bg-white/80 backdrop-blur-sm"
      }`}
      initial={{ y: -100 }}
      animate={{ y: 0 }}
      transition={{ duration: 0.6, ease: "easeOut" }}
    >
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          <motion.div
            className="flex items-center"
            whileHover={{ scale: 1.05 }}
            transition={{ type: "spring", stiffness: 400, damping: 10 }}
          >
            <Link href="/" className="flex items-center space-x-2">
              <div className="h-8 w-8 text-[var(--color-gossamer-600)]">
                <GraduationCap className="h-8 w-8" />
              </div>
              <span className="font-poppins font-bold text-xl text-gray-900">EduTech Academy</span>
            </Link>
          </motion.div>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex space-x-8">
            {navigation.map((item, index) => (
              <motion.div
                key={item.name}
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
              >
                <Link
                  href={item.href}
                  className="relative text-gray-700 hover:text-[var(--color-gossamer-600)] px-3 py-2 text-sm font-medium transition-colors group"
                >
                  {item.name}
                  <motion.div
                    className="absolute bottom-0 left-0 w-full h-0.5 bg-[var(--color-gossamer-600)] origin-left"
                    initial={{ scaleX: 0 }}
                    whileHover={{ scaleX: 1 }}
                    transition={{ duration: 0.3 }}
                  />
                </Link>
              </motion.div>
            ))}
          </nav>

          <div className="hidden md:flex items-center space-x-4">
            <Link href="/login">
              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                <Button
                  variant="outline"
                  className="hover:bg-[var(--color-gossamer-50)] hover:border-[var(--color-gossamer-300)]"
                >
                  Login
                </Button>
              </motion.div>
            </Link>
            <Link href="/login">
              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                <Button className="bg-gradient-to-r from-[var(--color-gossamer-600)] to-[var(--color-gossamer-700)] hover:from-[var(--color-gossamer-700)] hover:to-[var(--color-gossamer-800)] shadow-lg">
                  Enroll Now
                </Button>
              </motion.div>
            </Link>
          </div>

          {/* Mobile menu button */}
          <div className="md:hidden">
            <Button variant="ghost" size="icon" onClick={() => setIsMenuOpen(!isMenuOpen)} className="relative z-50">
              <AnimatePresence mode="wait">
                {isMenuOpen ? (
                  <motion.div
                    key="close"
                    initial={{ rotate: -90, opacity: 0 }}
                    animate={{ rotate: 0, opacity: 1 }}
                    exit={{ rotate: 90, opacity: 0 }}
                    transition={{ duration: 0.2 }}
                  >
                    <X className="h-6 w-6" />
                  </motion.div>
                ) : (
                  <motion.div
                    key="menu"
                    initial={{ rotate: 90, opacity: 0 }}
                    animate={{ rotate: 0, opacity: 1 }}
                    exit={{ rotate: -90, opacity: 0 }}
                    transition={{ duration: 0.2 }}
                  >
                    <Menu className="h-6 w-6" />
                  </motion.div>
                )}
              </AnimatePresence>
            </Button>
          </div>
        </div>

        {/* Mobile Navigation */}
        <AnimatePresence>
          {isMenuOpen && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3, ease: "easeInOut" }}
              className="md:hidden overflow-hidden"
            >
              <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3 border-t bg-white/95 backdrop-blur-md">
                {navigation.map((item, index) => (
                  <motion.div
                    key={item.name}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.3, delay: index * 0.1 }}
                  >
                    <Link
                      href={item.href}
                      className="text-gray-700 hover:text-[var(--color-gossamer-600)] block px-3 py-2 text-base font-medium transition-colors"
                      onClick={() => setIsMenuOpen(false)}
                    >
                      {item.name}
                    </Link>
                  </motion.div>
                ))}
                <motion.div
                  className="pt-4 space-y-2"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3, delay: 0.4 }}
                >
                  <Link href="/login" className="block">
                    <Button variant="outline" className="w-full">
                      Login
                    </Button>
                  </Link>
                  <Link href="/login" className="block">
                    <Button className="w-full bg-gradient-to-r from-[var(--color-gossamer-600)] to-[var(--color-gossamer-700)]">
                      Enroll Now
                    </Button>
                  </Link>
                </motion.div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </motion.header>
  )
}

//END OF components\header.tsx

//START OF components\portal-sidebar.tsx
"use client"

import type React from "react"
import { useState } from "react"
import Link from "next/link"
import { usePathname } from "next/navigation"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Menu, X, ChevronDown, Settings, User, LogOut, ChevronRight } from "lucide-react"
import { useAuth } from "@/hooks/use-auth"

interface NavigationItem {
  title: string
  href: string
  icon: React.ComponentType<{ className?: string }>
  badge?: string
  children?: NavigationItem[]
}

interface NavigationGroup {
  title: string
  items: NavigationItem[]
}

interface PortalSidebarProps {
  title: string
  subtitle: string
  icon: React.ComponentType<{ className?: string }>
  navigation: NavigationGroup[]
  colorScheme: {
    primary: string
    secondary: string
    accent: string
    gradient: string
  }
}

export function PortalSidebar({ title, subtitle, icon: Icon, navigation, colorScheme }: PortalSidebarProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [expandedGroups, setExpandedGroups] = useState<string[]>([])
  const pathname = usePathname()
  const { user, logout } = useAuth()

  const toggleGroup = (groupTitle: string) => {
    setExpandedGroups((prev) =>
      prev.includes(groupTitle) ? prev.filter((title) => title !== groupTitle) : [...prev, groupTitle],
    )
  }

  const handleLogout = async () => {
    await logout()
  }

  const isActiveLink = (href: string) => {
    if (href === pathname) return true
    if (href !== "/" && pathname?.startsWith(href)) return true
    return false
  }

  const renderNavigationItem = (item: NavigationItem, level = 0) => {
    const hasChildren = item.children && item.children.length > 0
    const isExpanded = expandedGroups.includes(item.title)
    const isActive = isActiveLink(item.href)

    if (hasChildren) {
      return (
        <div key={item.title}>
          <button
            onClick={() => toggleGroup(item.title)}
            className={cn(
              "w-full flex items-center justify-between px-3 py-2 text-sm font-medium rounded-lg transition-all duration-200",
              "hover:bg-white/10 text-white/90 hover:text-white",
              level > 0 && "ml-4",
            )}
          >
            <div className="flex items-center gap-3">
              <item.icon className="h-4 w-4" />
              <span>{item.title}</span>
              {item.badge && (
                <Badge variant="secondary" className="text-xs">
                  {item.badge}
                </Badge>
              )}
            </div>
            <ChevronRight className={cn("h-4 w-4 transition-transform duration-200", isExpanded && "rotate-90")} />
          </button>
          {isExpanded && (
            <div className="mt-1 space-y-1">
              {item.children?.map((child) => renderNavigationItem(child, level + 1))}
            </div>
          )}
        </div>
      )
    }

    return (
      <Link
        key={item.title}
        href={item.href}
        onClick={() => setIsOpen(false)}
        className={cn(
          "flex items-center gap-3 px-3 py-2 text-sm font-medium rounded-lg transition-all duration-200",
          level > 0 && "ml-4",
          isActive
            ? `bg-gradient-to-r ${colorScheme.gradient} text-white shadow-lg`
            : "text-white/90 hover:text-white hover:bg-white/10",
        )}
      >
        <item.icon className="h-4 w-4" />
        <span>{item.title}</span>
        {item.badge && (
          <Badge variant="secondary" className="text-xs ml-auto">
            {item.badge}
          </Badge>
        )}
      </Link>
    )
  }

  return (
    <>
      {/* Mobile Toggle Button */}
      <Button
        variant="ghost"
        size="icon"
        className="fixed top-4 left-4 z-50 lg:hidden bg-white/10 backdrop-blur-sm text-white hover:bg-white/20"
        onClick={() => setIsOpen(!isOpen)}
      >
        {isOpen ? <X className="h-5 w-5" /> : <Menu className="h-5 w-5" />}
      </Button>

      {/* Overlay */}
      {isOpen && <div className="fixed inset-0 bg-black/50 z-40 lg:hidden" onClick={() => setIsOpen(false)} />}

      {/* Sidebar */}
      <aside
        className={cn(
          "fixed left-0 top-0 h-full w-80 z-50 transform transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:z-auto",
          `bg-gradient-to-br ${colorScheme.gradient}`,
          isOpen ? "translate-x-0" : "-translate-x-full",
        )}
      >
        <div className="flex flex-col h-full">
          {/* Header */}
          <div className="p-6 border-b border-white/20">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 bg-white/20 rounded-lg">
                <Icon className="h-6 w-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-white">{title}</h1>
                <p className="text-sm text-white/80">{subtitle}</p>
              </div>
            </div>

            {/* User Info */}
            <div className="flex items-center gap-3 p-3 bg-white/10 rounded-lg">
              <Avatar className="h-10 w-10">
                <AvatarImage src="/placeholder.svg?height=40&width=40" />
                <AvatarFallback className="bg-white/20 text-white">{user?.name?.charAt(0) || "U"}</AvatarFallback>
              </Avatar>
              <div className="flex-1 min-w-0">
                <p className="text-sm font-medium text-white truncate">{user?.name || "User"}</p>
                <Badge variant="secondary" className="text-xs mt-1">
                  {user?.role || "User"}
                </Badge>
              </div>
            </div>
          </div>

          {/* Navigation */}
          <div className="flex-1 overflow-y-auto p-4">
            <nav className="space-y-6">
              {navigation.map((group) => (
                <div key={group.title}>
                  <h3 className="text-xs font-semibold text-white/60 uppercase tracking-wider mb-3">{group.title}</h3>
                  <div className="space-y-1">{group.items.map((item) => renderNavigationItem(item))}</div>
                </div>
              ))}
            </nav>
          </div>

          {/* Footer */}
          <div className="p-4 border-t border-white/20">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" className="w-full justify-between text-white hover:bg-white/10">
                  <div className="flex items-center gap-2">
                    <User className="h-4 w-4" />
                    <span>My Account</span>
                  </div>
                  <ChevronDown className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56">
                <DropdownMenuItem asChild>
                  <Link href={`/${user?.role}/profile`} className="flex items-center gap-2">
                    <User className="h-4 w-4" />
                    <span>Profile</span>
                  </Link>
                </DropdownMenuItem>
                <DropdownMenuItem asChild>
                  <Link href={`/${user?.role}/settings`} className="flex items-center gap-2">
                    <Settings className="h-4 w-4" />
                    <span>Settings</span>
                  </Link>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={handleLogout} className="flex items-center gap-2">
                  <LogOut className="h-4 w-4" />
                  <span>Sign Out</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>
      </aside>
    </>
  )
}

//END OF components\portal-sidebar.tsx

//START OF components\theme-provider.tsx
'use client'

import * as React from 'react'
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from 'next-themes'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

//END OF components\theme-provider.tsx

//START OF components.json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
//END OF components.json

//START OF hooks\use-auth.tsx
"use client"

import { useState, useEffect, createContext, useContext, type ReactNode } from "react"
import { useRouter } from "next/navigation"
import type { User, UserRole, LoginCredentials } from "@/lib/auth"

interface AuthContextType {
  user: Omit<User, "password"> | null
  isLoading: boolean
  login: (credentials: LoginCredentials) => Promise<{ success: boolean; error?: string }>
  logout: () => Promise<void>
  checkSession: () => Promise<void>
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<Omit<User, "password"> | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const router = useRouter()

  const checkSession = async () => {
    try {
      const response = await fetch("/api/auth/session", {
        method: "GET",
        credentials: "include",
      })

      if (response.ok) {
        const data = await response.json()
        if (data.success && data.user) {
          setUser(data.user)
        } else {
          setUser(null)
        }
      } else {
        setUser(null)
      }
    } catch (error) {
      console.error("Session check error:", error)
      setUser(null)
    } finally {
      setIsLoading(false)
    }
  }

  const login = async (credentials: LoginCredentials): Promise<{ success: boolean; error?: string }> => {
    try {
      setIsLoading(true)

      console.log("üîë Login attempt from client:", {
        email: credentials.email,
        userType: credentials.userType,
        timestamp: new Date().toISOString(),
      })

      // Check if this is a test user for client-side validation
      const testUsers = [
        { email: "parent.test@example.com", userType: "parent" },
        { email: "emma.johnson@example.com", userType: "student" },
        { email: "ta.test@example.com", userType: "ta" },
        { email: "instructor.test@example.com", userType: "instructor" },
      ]

      const matchingTestUser = testUsers.find((user) => user.email.toLowerCase() === credentials.email.toLowerCase())

      if (matchingTestUser && matchingTestUser.userType !== credentials.userType) {
        console.log(
          `‚ö†Ô∏è Warning: Test user ${credentials.email} is a ${matchingTestUser.userType}, but trying to log in as ${credentials.userType}`,
        )
      }

      const response = await fetch("/api/auth/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify(credentials),
      })

      const data = await response.json()

      console.log("üì° Login response:", {
        status: response.status,
        success: data.success,
        error: data.error || "None",
        redirectUrl: data.redirectUrl || "None",
      })

      if (data.success && data.user) {
        setUser(data.user)

        console.log("‚úÖ Login successful, redirecting to:", data.redirectUrl)

        // Redirect to appropriate dashboard
        if (data.redirectUrl) {
          router.push(data.redirectUrl)
        }

        return { success: true }
      } else {
        console.log("‚ùå Login failed:", data.error)

        // Enhanced error message for test users
        if (matchingTestUser && credentials.password !== "P@sswOrd123") {
          return {
            success: false,
            error: "Invalid password for test user. Please use 'P@sswOrd123'.",
          }
        }

        return {
          success: false,
          error: data.error || "Login failed. Please try again.",
        }
      }
    } catch (error) {
      console.error("Login error:", error)
      return {
        success: false,
        error: "Network error. Please check your connection and try again.",
      }
    } finally {
      setIsLoading(false)
    }
  }

  const logout = async () => {
    try {
      setIsLoading(true)

      await fetch("/api/auth/logout", {
        method: "POST",
        credentials: "include",
      })

      setUser(null)
      router.push("/login")
    } catch (error) {
      console.error("Logout error:", error)
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    checkSession()
  }, [])

  return (
    <AuthContext.Provider
      value={{
        user,
        isLoading,
        login,
        logout,
        checkSession,
      }}
    >
      {children}
    </AuthContext.Provider>
  )
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider")
  }
  return context
}

// Hook for protecting routes
export function useRequireAuth(allowedRoles?: UserRole[]) {
  const { user, isLoading } = useAuth()
  const router = useRouter()

  useEffect(() => {
    if (!isLoading) {
      if (!user) {
        router.push("/login")
        return
      }

      if (allowedRoles && !allowedRoles.includes(user.role)) {
        router.push("/unauthorized")
        return
      }
    }
  }, [user, isLoading, allowedRoles, router])

  return { user, isLoading }
}

//END OF hooks\use-auth.tsx

//START OF hooks\use-mobile.tsx
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

//END OF hooks\use-mobile.tsx

//START OF hooks\use-toast.ts
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

//END OF hooks\use-toast.ts

//START OF lib\auth.ts
import { cookies } from "next/headers"
import { redirect } from "next/navigation"
import bcrypt from "bcryptjs"

// User types
export type UserRole = "parent" | "student" | "ta" | "instructor"

export interface User {
  id: string
  email: string
  password: string
  role: UserRole
  name: string
  isActive: boolean
  lastLogin?: Date
  profile?: {
    firstName: string
    lastName: string
    phone?: string
    address?: string
    emergencyContact?: string
    childId?: string // For parents
  }
}

// Mock user database - In production, this would be a real database
const MOCK_USERS: User[] = [
  {
    id: "parent-001",
    email: "parent.test@example.com",
    // This is the hash for "P@sswOrd123" - but we'll use direct comparison for the test user
    password: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj/VcSAg/9qm",
    role: "parent",
    name: "Sarah Johnson",
    isActive: true,
    profile: {
      firstName: "Sarah",
      lastName: "Johnson",
      phone: "+1 (555) 123-4567",
      address: "123 Main Street, Springfield, IL 62701",
      emergencyContact: "John Johnson",
      childId: "student-001",
    },
  },
  {
    id: "student-001",
    email: "emma.johnson@example.com",
    password: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj/VcSAg/9qm", // P@sswOrd123
    role: "student",
    name: "Emma Johnson",
    isActive: true,
    profile: {
      firstName: "Emma",
      lastName: "Johnson",
    },
  },
  {
    id: "ta-001",
    email: "ta.test@example.com",
    password: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj/VcSAg/9qm", // P@sswOrd123
    role: "ta",
    name: "Alex Smith",
    isActive: true,
    profile: {
      firstName: "Alex",
      lastName: "Smith",
    },
  },
  {
    id: "instructor-001",
    email: "instructor.test@example.com",
    password: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj/VcSAg/9qm", // P@sswOrd123
    role: "instructor",
    name: "Dr. Sarah Johnson",
    isActive: true,
    profile: {
      firstName: "Dr. Sarah",
      lastName: "Johnson",
    },
  },
]

export interface AuthResult {
  success: boolean
  user?: Omit<User, "password">
  error?: string
  redirectUrl?: string
}

export interface LoginCredentials {
  email: string
  password: string
  userType: UserRole
}

// Authentication functions
export async function authenticateUser(credentials: LoginCredentials): Promise<AuthResult> {
  try {
    console.log("üîê Authentication attempt:", {
      email: credentials.email,
      userType: credentials.userType,
      timestamp: new Date().toISOString(),
    })

    // Find user by email and role
    const user = MOCK_USERS.find(
      (u) => u.email.toLowerCase() === credentials.email.toLowerCase() && u.role === credentials.userType,
    )

    if (!user) {
      console.log("‚ùå Authentication failed: User not found")
      return {
        success: false,
        error: "Invalid email or password. Please check your credentials and try again.",
      }
    }

    if (!user.isActive) {
      console.log("‚ùå Authentication failed: Account inactive")
      return {
        success: false,
        error: "Your account has been deactivated. Please contact support for assistance.",
      }
    }

    // Debug logging to identify the issue
    console.log("üîç Debug - Password verification:", {
      providedPassword: credentials.password,
      storedHash: user.password.substring(0, 10) + "...", // Only log part of the hash for security
    })

    // For test users, we'll use a direct comparison since we know the password
    // This is a temporary fix for debugging - in production, always use proper hashing
    let isPasswordValid = false

    // Log the user details for debugging
    console.log("üîç Debug - User details:", {
      id: user.id,
      email: user.email,
      role: user.role,
      passwordHash: user.password.substring(0, 10) + "...", // Only log part of the hash for security
    })

    // Check if this is one of our test users
    const isTestUser = [
      "parent.test@example.com",
      "emma.johnson@example.com",
      "ta.test@example.com",
      "instructor.test@example.com",
    ].includes(credentials.email.toLowerCase())

    if (isTestUser && credentials.password === "P@sswOrd123") {
      isPasswordValid = true
      console.log(`‚úÖ Test user detected (${user.role}) - password matched directly`)
    } else {
      // For other users, use bcrypt comparison
      try {
        console.log("üîê Attempting bcrypt password comparison")
        isPasswordValid = await bcrypt.compare(credentials.password, user.password)
        console.log(`üîê Bcrypt comparison result: ${isPasswordValid ? "VALID" : "INVALID"}`)
      } catch (error) {
        console.error("‚ùå Bcrypt comparison error:", error)
        return {
          success: false,
          error: "An error occurred during password verification. Please try again.",
        }
      }
    }

    if (!isPasswordValid) {
      console.log("‚ùå Authentication failed: Invalid password")
      return {
        success: false,
        error: "Invalid email or password. Please check your credentials and try again.",
      }
    }

    // Update last login
    user.lastLogin = new Date()

    // Remove password from user object
    const { password, ...userWithoutPassword } = user

    // Determine redirect URL based on user role
    const redirectUrl = getRedirectUrl(user.role)

    console.log("‚úÖ Authentication successful:", {
      userId: user.id,
      email: user.email,
      role: user.role,
      redirectUrl,
      timestamp: new Date().toISOString(),
    })

    return {
      success: true,
      user: userWithoutPassword,
      redirectUrl,
    }
  } catch (error) {
    console.error("üö® Authentication error:", error)
    return {
      success: false,
      error: "An unexpected error occurred. Please try again later.",
    }
  }
}

export function getRedirectUrl(role: UserRole): string {
  switch (role) {
    case "parent":
      return "/parent"
    case "student":
      return "/student"
    case "ta":
      return "/ta"
    case "instructor":
      return "/instructor"
    default:
      return "/login"
  }
}

// Session management
export async function createSession(user: Omit<User, "password">): Promise<void> {
  const cookieStore = await cookies()

  // Create session data
  const sessionData = {
    userId: user.id,
    email: user.email,
    role: user.role,
    name: user.name,
    loginTime: new Date().toISOString(),
    expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 24 hours
  }

  // Set secure session cookie
  cookieStore.set("session", JSON.stringify(sessionData), {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: "strict",
    maxAge: 24 * 60 * 60, // 24 hours
    path: "/",
  })

  console.log("üç™ Session created for user:", user.id)
}

export async function getSession(): Promise<Omit<User, "password"> | null> {
  try {
    const cookieStore = await cookies()
    const sessionCookie = cookieStore.get("session")

    if (!sessionCookie?.value) {
      return null
    }

    const sessionData = JSON.parse(sessionCookie.value)

    // Check if session is expired
    if (new Date() > new Date(sessionData.expiresAt)) {
      await destroySession()
      return null
    }

    // Find user in database
    const user = MOCK_USERS.find((u) => u.id === sessionData.userId)
    if (!user || !user.isActive) {
      await destroySession()
      return null
    }

    const { password, ...userWithoutPassword } = user
    return userWithoutPassword
  } catch (error) {
    console.error("Session validation error:", error)
    await destroySession()
    return null
  }
}

export async function destroySession(): Promise<void> {
  const cookieStore = await cookies()
  cookieStore.delete("session")
  console.log("üóëÔ∏è Session destroyed")
}

export async function requireAuth(allowedRoles?: UserRole[]): Promise<Omit<User, "password">> {
  const user = await getSession()

  if (!user) {
    redirect("/login")
  }

  if (allowedRoles && !allowedRoles.includes(user.role)) {
    redirect("/unauthorized")
  }

  return user
}

// Password utilities
export async function hashPassword(password: string): Promise<string> {
  return bcrypt.hash(password, 12)
}

export async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {
  return bcrypt.compare(password, hashedPassword)
}

// Utility function to generate test password hash
export async function generateTestPasswordHash(): Promise<void> {
  const hash = await hashPassword("P@sswOrd123")
  console.log("Test password hash:", hash)
}

// Add this function at the end of the file
export async function debugPasswordHash(password: string): Promise<void> {
  try {
    const hash = await bcrypt.hash(password, 12)
    console.log(`Debug - Password: "${password}" -> Hash: "${hash}"`)

    // Test verification
    const isValid = await bcrypt.compare(password, hash)
    console.log(`Debug - Verification result: ${isValid ? "VALID" : "INVALID"}`)

    // Test against stored hash
    const testUserHash = "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj/VcSAg/9qm"
    const isValidAgainstStored = await bcrypt.compare(password, testUserHash)
    console.log(`Debug - Verification against stored hash: ${isValidAgainstStored ? "VALID" : "INVALID"}`)
  } catch (error) {
    console.error("Debug password hash error:", error)
  }
}

//END OF lib\auth.ts

//START OF lib\utils.ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

//END OF lib\utils.ts

//START OF package.json
{
  "name": "my-v0-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@emotion/is-prop-valid": "latest",
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-accordion": "1.2.2",
    "@radix-ui/react-alert-dialog": "1.1.4",
    "@radix-ui/react-aspect-ratio": "1.1.1",
    "@radix-ui/react-avatar": "1.1.2",
    "@radix-ui/react-checkbox": "1.1.3",
    "@radix-ui/react-collapsible": "1.1.2",
    "@radix-ui/react-context-menu": "2.2.4",
    "@radix-ui/react-dialog": "1.1.4",
    "@radix-ui/react-dropdown-menu": "2.1.4",
    "@radix-ui/react-hover-card": "1.1.4",
    "@radix-ui/react-label": "2.1.1",
    "@radix-ui/react-menubar": "1.1.4",
    "@radix-ui/react-navigation-menu": "1.2.3",
    "@radix-ui/react-popover": "1.1.4",
    "@radix-ui/react-progress": "1.1.1",
    "@radix-ui/react-radio-group": "1.2.2",
    "@radix-ui/react-scroll-area": "1.2.2",
    "@radix-ui/react-select": "2.1.4",
    "@radix-ui/react-separator": "1.1.1",
    "@radix-ui/react-slider": "1.2.2",
    "@radix-ui/react-slot": "1.1.1",
    "@radix-ui/react-switch": "1.1.2",
    "@radix-ui/react-tabs": "1.1.2",
    "@radix-ui/react-toast": "1.2.4",
    "@radix-ui/react-toggle": "1.1.1",
    "@radix-ui/react-toggle-group": "1.1.1",
    "@radix-ui/react-tooltip": "1.1.6",
    "autoprefixer": "^10.4.20",
    "bcryptjs": "latest",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "4.1.0",
    "embla-carousel-react": "8.5.1",
    "framer-motion": "latest",
    "input-otp": "1.4.1",
    "lucide-react": "^0.454.0",
    "next": "14.2.16",
    "next-themes": "^0.4.4",
    "react": "^18",
    "react-day-picker": "8.10.1",
    "react-dom": "^18",
    "react-hook-form": "^7.54.1",
    "react-resizable-panels": "^2.1.7",
    "recharts": "2.15.0",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.6",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@types/node": "^22",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "postcss": "^8.5",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}
//END OF package.json

//START OF styles\globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

//END OF styles\globals.css

//START OF tailwind.config.ts
// tailwind.config.ts
import type { Config } from "tailwindcss";

const config: Config = {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "*.{js,ts,jsx,tsx,mdx}"
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			},
  			sidebar: {
  				DEFAULT: 'hsl(var(--sidebar-background))',
  				foreground: 'hsl(var(--sidebar-foreground))',
  				primary: 'hsl(var(--sidebar-primary))',
  				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  				accent: 'hsl(var(--sidebar-accent))',
  				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
  				border: 'hsl(var(--sidebar-border))',
  				ring: 'hsl(var(--sidebar-ring))'
  			},
            gossamer: {
              '50': 'var(--color-gossamer-50)',
              '100': 'var(--color-gossamer-100)',
              '200': 'var(--color-gossamer-200)',
              '300': 'var(--color-gossamer-300)',
              '400': 'var(--color-gossamer-400)',
              '500': 'var(--color-gossamer-500)',
              '600': 'var(--color-gossamer-600)',
              '700': 'var(--color-gossamer-700)',
              '800': 'var(--color-gossamer-800)',
              '900': 'var(--color-gossamer-900)',
              '950': 'var(--color-gossamer-950)',
            }
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;
//END OF tailwind.config.ts

//START OF tsconfig.json
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

//END OF tsconfig.json

//END OF FILES
